{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-aeanalytics-prod"
		},
		"AppianDev_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AppianDev'"
		},
		"AzureDataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureSqlDatabase2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase2'"
		},
		"FTP Oracle_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FTP Oracle'"
		},
		"OracleBlob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OracleBlob'"
		},
		"SqlServerArgent_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServerArgent'"
		},
		"TestBlob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'TestBlob'"
		},
		"AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://staeanalyticsprod.dfs.core.windows.net"
		},
		"FTP Oracle_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "sftp.argentenergy.nl"
		},
		"FTP Oracle_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "Oracle"
		},
		"OMJ_API_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api-external.the-omj.com/api/"
		},
		"Operations_SharePoint_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://argentenergyltd.sharepoint.com/sites/PowerBIdata/_api/web/GetFileByServerRelativeUrl('/sites/PowerBIdata/Shared%20Documents/General/Operations/"
		},
		"Sharepoint_Pricing_Data_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://argentenergyltd.sharepoint.com/sites/PowerBIdata/_api/web/GetFileByServerRelativeUrl('/sites/PowerBIdata/Shared%20Documents/General/Excel%20files/"
		},
		"Sharepoint_StdCostsSpread_Data_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://argentenergyltd.sharepoint.com/sites/PowerBIdata/_api/web/GetFileByServerRelativeUrl('@{linkedService().FileName}')/$value"
		},
		"SupplyChain_SharePoint_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://argentenergyltd.sharepoint.com/sites/PowerBIdata/_api/web/GetFileByServerRelativeUrl('/sites/PowerBIdata/Shared%20Documents/General/Excel%20files/"
		},
		"VesselFinder_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.vesselfinder.com"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/TestIncidents')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "test",
				"activities": [
					{
						"name": "Raise an Incident",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://eu2api.symphonysummit.com/Argent/REST/Summit_RESTWCF.svc/RESTService/CommonWS_JsonObjCall",
							"body": {
								"ServiceName": "IM_LogOrUpdateIncident",
								"objCommonParameters": {
									"_ProxyDetails": {
										"AuthType": "APIKEY",
										"APIKey": "tryDnK94yXfNHDFbDyiy6HltkdY2uvw0f5UtnFfGZiY=",
										"ProxyID": 0,
										"ReturnType": "JSON",
										"OrgID": 1
									},
									"incidentParamsJSON": {
										"IncidentContainerJsonObj": {
											"Updater": "Executive",
											"CI_Key": "hostname",
											"CI_Value": "",
											"Ticket": {
												"IsFromWebService": true,
												"Priority_Name": "P3 - Medium",
												"Classification_Name": "Data or Process in system not working",
												"Sup_Function": "IT",
												"Caller_EmailID": "lyndon.johnson@argentenergy.com",
												"Status": "New",
												"Urgency_Name": "Stops Work",
												"Assigned_WorkGroup_Name": "Argent Reporting Support Team",
												"Medium": "Web",
												"Impact_Name": "Multiple Users",
												"Category_Name": "Argent Reporting",
												"CI_ID": "",
												"SLA_Name": "",
												"OpenCategory_Name": "Argent Reporting",
												"Source": "Person",
												"Description": "@{pipeline().parameters.TicketMessage}",
												"PageName": "TicketDetail"
											},
											"TicketInformation": {
												"Information": "TEST Ticket",
												"InternalLog": "#InternalLog#",
												"UserLog": "",
												"Solution": "#Solution#"
											},
											"CustomFields": []
										}
									},
									"RequestType": "RemoteCall"
								}
							}
						}
					},
					{
						"name": "Get the Ticket Number",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Raise an Incident",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TicketNo",
							"value": {
								"value": "@string(activity('Raise an Incident').output.TicketNo)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Email Alert",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get the Ticket Number",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://ae-adf-emailnotification.azurewebsites.net:443/api/Argent-Alerting/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=Aso6aks8InhkiT92JgC0HG-J1IvmAhT5B94OpeVK9lo",
							"body": {
								"value": "{\n    \"receiver\":\"@{pipeline().parameters.receiver}\",\n    \"title\":\"Pipeline Run Failed\",\n    \"message\":\"Job failed, ticket raised @{variables('TicketNo')}\",\n    \"color\":\"Red\",\n    \"dataFactoryName\":\"@{pipeline().DataFactory}\",\n    \"pipelineName\":\"@{pipeline().Pipeline}\",\n    \"pipelineRunId\":\"@{pipeline().RunId}\",\n    \"time\":\"@{utcnow()}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "sql.jobs@argentenergy.com"
					},
					"TicketID": {
						"type": "string"
					},
					"JobMessage": {
						"type": "string",
						"defaultValue": "Azure Data Factory Error"
					},
					"TicketMessage": {
						"type": "string",
						"defaultValue": "Automated message: Data job has failedJob Failed"
					}
				},
				"variables": {
					"TicketNo": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Trade/Pricing"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeekendTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "True or False",
							"value": {
								"value": "@or(contains('\"Date\": \"2024-01-01\"', pipeline().parameters.Date), or(equals(dayOfWeek(pipeline().parameters.Date), 6), equals(dayOfWeek(pipeline().parameters.Date), 0)))\n\n",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Date": {
						"type": "string",
						"defaultValue": "2024-01-01"
					}
				},
				"variables": {
					"True or False": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "Sales/OMJ"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AppianDev')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AppianDev_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FTP Oracle')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "On-premise FTP server",
				"annotations": [],
				"type": "FtpServer",
				"typeProperties": {
					"host": "[parameters('FTP Oracle_properties_typeProperties_host')]",
					"port": 21,
					"enableSsl": false,
					"enableServerCertificateValidation": false,
					"authenticationType": "Basic",
					"userName": "[parameters('FTP Oracle_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FTP Oracle_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OMJ_API')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('OMJ_API_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"APIKey": {
							"type": "SecureString",
							"value": "**********"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Operations_SharePoint')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Link to Sharepoint site \"PowerBI data\" folder \"Operations\"",
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('Operations_SharePoint_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleBlob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('OracleBlob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sharepoint_Pricing_Data')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Link to Sharepoint site \"PowerBI data\" folder \"Excel files\"",
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('Sharepoint_Pricing_Data_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sharepoint_StdCostsSpread_Data')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Link to Sharepoint site \"PowerBI data\" folder \"Finance - Standard Costs and Spread\"",
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "abc"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('Sharepoint_StdCostsSpread_Data_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerArgent')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServerArgent_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SupplyChain_SharePoint')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('SupplyChain_SharePoint_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestBlob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('TestBlob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VesselFinder')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('VesselFinder_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NonOracle')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 7,
						"startTime": "2022-09-01T17:12:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								11
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AppianRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "Integration Runtime setup for Appian",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CREATEGL_Script_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CREATEGL1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SqlServerArgent",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 1. \tMANIPULATE GENERAL LEDGER\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 1.1\tCREATE WIP JOURNALS\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t\r\n\tIF OBJECT_ID('Core.GL_JE_Lines','U') IS NOT NULL DROP TABLE Core.GL_JE_Lines\r\n\tSELECT\t*,\r\n\t\t\tCAST(ISNULL(ACCOUNTED_DR,0) AS MONEY) - CAST(ISNULL(ACCOUNTED_CR,0) AS MONEY) AS ACCOUNTED_AMOUNT,\r\n\t\t\tCAST(ISNULL(ENTERED_DR,0) AS MONEY) - CAST(ISNULL(ENTERED_CR,0) AS MONEY) AS ENTERED_AMOUNT\r\n\tINTO Core.GL_JE_Lines\r\n\tFROM\t(\t\r\n\t\t\t\tSELECT\t\t[JE_HEADER_ID], [JE_LINE_NUM], [LAST_UPDATE_DATE], [LAST_UPDATED_BY], [LEDGER_ID], [CODE_COMBINATION_ID], [PERIOD_NAME], [EFFECTIVE_DATE], [STATUS], [CREATION_DATE], [CREATED_BY], [ENTERED_CR], [ACCOUNTED_CR], [DESCRIPTION], [ENTERED_DR], [ACCOUNTED_DR], [Stamp]\r\n\t\t\t\tFROM\t\t[RAW].[O.GL_JE_LINES] \r\n\t\t\t\tUNION\r\n\t\t\t\tSELECT\t\t[JE_HEADER_ID], [JE_LINE_NUM], [LAST_UPDATE_DATE], [LAST_UPDATED_BY], [LEDGER_ID], [CODE_COMBINATION_ID], [PERIOD_NAME], [EFFECTIVE_DATE], [STATUS], [CREATION_DATE], [CREATED_BY], [ENTERED_CR], [ACCOUNTED_CR], [DESCRIPTION], [ENTERED_DR], [ACCOUNTED_DR], [Stamp]\r\n\t\t\t\tFROM\t\t[RAW].[O.GL_JE_LINES_2023] \r\n\t\t\t\tUNION\r\n\t\t\t\tSELECT\t\t[JE_HEADER_ID], [JE_LINE_NUM], [LAST_UPDATE_DATE], [LAST_UPDATED_BY], [LEDGER_ID], [CODE_COMBINATION_ID], [PERIOD_NAME], [EFFECTIVE_DATE], [STATUS], [CREATION_DATE], [CREATED_BY], [ENTERED_CR], [ACCOUNTED_CR], [DESCRIPTION], [ENTERED_DR], [ACCOUNTED_DR], [Stamp]\r\n\t\t\t\tFROM\t\t[RAW].[O.GL_JE_LINES_2022] \r\n\t\t\t\tUNION\r\n\t\t\t\tSELECT\t\t[JE_HEADER_ID], [JE_LINE_NUM], [LAST_UPDATE_DATE], [LAST_UPDATED_BY], [LEDGER_ID], [CODE_COMBINATION_ID], [PERIOD_NAME], [EFFECTIVE_DATE], [STATUS], [CREATION_DATE], [CREATED_BY], [ENTERED_CR], [ACCOUNTED_CR], [DESCRIPTION], [ENTERED_DR], [ACCOUNTED_DR], [Stamp]\r\n\t\t\t\tFROM\t\t[RAW].[O.GL_JE_LINES_2021]\r\n\t\t\t\tUNION\r\n\t\t\t\tSELECT\t\t[JE_HEADER_ID], [JE_LINE_NUM], [LAST_UPDATE_DATE], [LAST_UPDATED_BY], [LEDGER_ID], [CODE_COMBINATION_ID], [PERIOD_NAME], [EFFECTIVE_DATE], [STATUS], [CREATION_DATE], [CREATED_BY], [ENTERED_CR], [ACCOUNTED_CR], [DESCRIPTION], [ENTERED_DR], [ACCOUNTED_DR], [Stamp]\r\n\t\t\t\tFROM\t\t[RAW].[O.GL_JE_LINES_2020]\r\n\t\t\t\tWHERE\t\t[PERIOD_NAME] LIKE '%21%'\r\n\t\t\t) je\r\n\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 1.2\tBuild Segments in Scope table\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\t\r\n\r\n\tIF OBJECT_ID('Core.GL_SegmentsInScope','U') IS NOT NULL DROP TABLE Core.GL_SegmentsInScope\r\n\t;WITH IDs AS (\r\n\tSELECT \t\tDISTINCT CODE_COMBINATION_ID \r\n\tFROM \t\tCore.GL_JE_Lines\r\n\tUNION \r\n\tSELECT \t\tDISTINCT CODE_COMBINATION_ID \r\n\tFROM \t\t[RAW].[O.GL_BALANCES]\r\n\t)\r\n\tSELECT \t\tDISTINCT i.CODE_COMBINATION_ID, \r\n\t\t\t\tSEGMENT1, SEGMENT2, SEGMENT3, SEGMENT4, SEGMENT5, \r\n\t\t\t\tSEGMENT6\r\n\tINTO \t\tCore.GL_SegmentsInScope \r\n\tFROM \t\tIDs i\r\n\tLEFT JOIN \t[RAW].[O.GL_CODE_COMBINATIONS] gcc \r\n\tON \t\t\tgcc.CODE_COMBINATION_ID = i.CODE_COMBINATION_ID\r\n\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 1.3\tBuild Max Dates table\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\t\r\n\r\n\tIF OBJECT_ID('Core.GL_MaxDates','U') IS NOT NULL DROP TABLE Core.GL_MaxDates\r\n\tSELECT\t\tFLEX_VALUE,\r\n\t\t\t\tVALUE_CATEGORY ,\r\n\t\t\t\tCOUNT(*) AS [rowcount], \r\n\t\t\t\tMAX(CAST(LEFT([LAST_UPDATE_DATE],10) AS DATE)) AS [maxdate]\r\n\tINTO\t\tCore.GL_MaxDates\r\n\tFROM\t\t[RAW].[O.FND_FLEX_VALUES_VL]\r\n\tWHERE\t\t[VALUE_CATEGORY] IN ('Account Argent','Company Argent','Cost Centre Argent')\r\n\tGROUP BY\tFLEX_VALUE\r\n\t,\t\t\tVALUE_CATEGORY\r\n\tHAVING\t\tCOUNT(*) > 1\r\n\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 1.4\tBuild Flex Value Max Date table\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\t\r\n\t\r\n\tIF OBJECT_ID('Core.GL_FlexValueMaxDate','U') IS NOT NULL DROP TABLE Core.GL_FlexValueMaxDate\r\n\tSELECT\t\tfv.*, \r\n\t\t\t\tCASE WHEN md.MaxDate IS NULL THEN CAST(LEFT([LAST_UPDATE_DATE],10) AS DATE) ELSE MaxDate END AS [MaxDate]\r\n\tINTO\t\tCore.GL_FlexValueMaxDate\r\n\tFROM\t\t[RAW].[O.FND_FLEX_VALUES_VL] fv\r\n\tLEFT JOIN\tCore.GL_MaxDates md \r\n\tON \t\t\tfv.FLEX_VALUE = md.flex_value\r\n\tAND\t\t\tfv.Value_Category = md.VALUE_CATEGORY\r\n\tWHERE\t\tfv.[VALUE_CATEGORY] IN ('Account Argent','Company Argent','Cost Centre Argent')\r\n\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 1.5\tBuild GL Descriptions table\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\t\r\n\r\n\tIF OBJECT_ID('Core.GL_Descriptions','U') IS NOT NULL DROP TABLE Core.GL_Descriptions\r\n\t;WITH S AS (\r\n\t\t\t\tSELECT 'SEGMENT' AS SEGMENT, '' AS [VALUE_CATEGORY]\r\n\tUNION \t\tSELECT DISTINCT SEGMENT1, 'Company Argent' AS [VALUE_CATEGORY] FROM Core.GL_SegmentsInScope\t\r\n\tUNION  \t\tSELECT DISTINCT SEGMENT3, 'Account Argent' AS [VALUE_CATEGORY] FROM Core.GL_SegmentsInScope\t\r\n\tUNION  \t\tSELECT DISTINCT SEGMENT2, 'Cost Centre Argent' AS [VALUE_CATEGORY] FROM Core.GL_SegmentsInScope \t\r\n\tUNION  \t\tSELECT DISTINCT SEGMENT2, 'Cost Centre Argent' AS [VALUE_CATEGORY] FROM Core.GL_SegmentsInScope \t\r\n\t),\t\t\t\r\n\tFMV AS (\r\n\tSELECT\t\tDISTINCT fv.FLEX_VALUE, fv.DESCRIPTION, fv.VALUE_CATEGORY\r\n\tFROM\t\tCore.GL_FlexValueMaxDate fv\r\n\tINNER JOIN\tCore.GL_FlexValueMaxDate md \r\n\tON \t\t\tfv.FLEX_VALUE_ID = md.FLEX_VALUE_ID \r\n\tAND \t\tCAST(LEFT(fv.[LAST_UPDATE_DATE],10) AS DATE) = md.MaxDate\r\n\t)\r\n\tSELECT\t\tS.SEGMENT\r\n\t,\t\t\tFMV.*\r\n\tINTO\t\tCore.GL_Descriptions\r\n\tFROM\t\tFMV\r\n\tLEFT JOIN   S\r\n\tON \t\t\tFMV.FLEX_VALUE = S.SEGMENT\r\n\tAND\t\t\tFMV.VALUE_CATEGORY = S.VALUE_CATEGORY\r\n\tWHERE \t\tS.SEGMENT IS NOT NULL\r\n\r\n-----------------------------------------------------------------------------------------------------------------------------------------------\r\n-- 1.6\tCreate table containing budget information\r\n-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\tIF OBJECT_ID('tempdb..#BudgetBalances','U') IS NOT NULL DROP TABLE #BudgetBalances\r\n\tIF OBJECT_ID('[Finance].[BudgetBalances]','U') IS NOT NULL DROP TABLE [Finance].[BudgetBalances]\r\n\r\n\tSELECT\t\tgcc.[PERIOD_NAME] AS [Period Name]\r\n\t,\t\t\tCAST(CASE WHEN gp.PERIOD_NUM = '13' THEN '12' ELSE RIGHT(CONCAT('0',gp.PERIOD_NUM),2) END AS INT) AS [Financial Period]\r\n\t,\t\t\tCONCAT('20',RIGHT(gcc.[PERIOD_NAME],2)) AS [Financial Year]\r\n\t,\t\t\t[BUDGET_NAME] AS [Budget Name]\r\n\t,\t\t\t[SEGMENT1] AS [Entity]\r\n\t,\t\t\te.[Description] AS [Company Name]\r\n\t,\t\t\t[SEGMENT2] AS [Cost Centre]\r\n\t,\t\t\tc.[Description] AS [Cost Centre Description]\r\n\t,\t\t\t[SEGMENT3] AS [Account Number]\r\n\t,\t\t\ta.[Description] AS [Account Description]\r\n\t,\t\t\tfr.[AccountDesc#5] AS [Account Category]\r\n\t,\t\t\t[CURRENCY_CODE] AS [Currency]\r\n\t,\t\t\t[PERIOD_NET_DR] AS [Net Debit]\r\n\t,\t\t\t[PERIOD_NET_CR] AS [Net Credit]\r\n\t,\t\t\tDATENAME(MONTH,CONCAT(CONCAT('20',RIGHT(gcc.[PERIOD_NAME],2)),'-',CAST(CASE WHEN gp.PERIOD_NUM = '13' THEN '12' ELSE RIGHT(CONCAT('0',gp.PERIOD_NUM),2) END AS INT),'-01')) + ' ' + CONCAT('20',RIGHT(gcc.[PERIOD_NAME],2)) AS [Date]\r\n\t,\t\t\tLEFT([BUDGET_NAME],CHARINDEX(' ',[BUDGET_NAME])) AS [Budget Type]\r\n\t,\t\t\tCASE \r\n\t\t\t\t\tWHEN CAST([PERIOD_NET_DR] AS DECIMAL(28,2)) = 0\r\n\t\t\t\t\t\tTHEN CAST([PERIOD_NET_CR] AS DECIMAL(28,2))\r\n\t\t\t\t\tELSE CAST([PERIOD_NET_DR] AS DECIMAL(28,2))\r\n\t\t\t\tEND AS [Budget]\r\n\t,\t\t\tCONCAT([SEGMENT1],':',[CURRENCY_CODE],':',[SEGMENT3],':',[SEGMENT2],':',DATENAME(MONTH,CONCAT(CONCAT('20',RIGHT(gcc.[PERIOD_NAME],2)),'-',CAST(CASE WHEN gp.PERIOD_NUM = '13' THEN '12' ELSE RIGHT(CONCAT('0',gp.PERIOD_NUM),2) END AS INT),'-01')) + ' ' + CONCAT('20',RIGHT(gcc.[PERIOD_NAME],2))) AS [GL_Budget Link]\r\n\t,\t\t\tCAST(GETDATE() AS DATE) AS [DateStamp]\r\n\tINTO\t\t#BudgetBalances\r\n\tFROM\t\t[RAW].[O.GL_BUDGET_BALANCES] gcc\r\n\tLEFT JOIN\t[RAW].[O.GL_PERIODS] gp ON gp.PERIOD_NAME = gcc.PERIOD_NAME \r\n\tLEFT JOIN\tCore.GL_Descriptions e ON e.FLEX_VALUE = gcc.SEGMENT1 AND e.VALUE_CATEGORY = 'Company Argent'\r\n\tLEFT JOIN\tCore.GL_Descriptions a ON a.FLEX_VALUE = gcc.SEGMENT3 AND a.VALUE_CATEGORY = 'Account Argent'\r\n\tLEFT JOIN\tCore.GL_Descriptions c ON c.FLEX_VALUE = gcc.SEGMENT2 AND c.VALUE_CATEGORY = 'Cost Centre Argent'\r\n\tLEFT JOIN\t[RAW].[F.FinanceReference] fr ON gcc.[SEGMENT3] = fr.[AccountDesc#9]\r\n\r\n\tSELECT\t\tbb.*\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN LEFT([Entity],1) = '3'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Budget]/ISNULL(fx1.[Rate_P&L],fx2.[Rate_P&L]),[Budget]/ISNULL(fx1.[Rate_BS],fx2.[Rate_P&L]))\r\n\t\t\t\t\tELSE [Budget]\r\n\t\t\t\tEND AS [Budget GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN LEFT([Entity],1) != '3'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Budget]*ISNULL(fx1.[Rate_P&L],fx2.[Rate_P&L]),[Budget]*ISNULL(fx1.[Rate_BS],fx2.[Rate_P&L]))\r\n\t\t\t\t\tELSE [Budget]\r\n\t\t\t\tEND AS [Budget EUR]\r\n\tINTO\t\t[Finance].[BudgetBalances]\r\n\tFROM\t\t#BudgetBalances bb\r\n\tLEFT JOIN\t[Finance].[FX_Rates] fx1\r\n\tON\t\t\tbb.[Date] = fx1.[Date]\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\tSELECT\t\t*\r\n\t\t\t\t\tFROM\t\t[Finance].[FX_Rates]\r\n\t\t\t\t\tWHERE\t\t[Year] = YEAR(CAST(GETDATE() AS DATE))\r\n\t\t\t\t\tAND\t\t\t[Month] = MONTH(CAST(GETDATE() AS DATE))\r\n\t\t\t\t) fx2\r\n\tON\t\t\t1 = 1\r\n\r\n-----------------------------------------------------------------------------------------------------------------------------------------------\r\n-- 1.7\tManipulate FX Rates table\r\n-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\tIF OBJECT_ID('tempdb..#Dates','U') IS NOT NULL DROP TABLE #Dates\r\n\tIF OBJECT_ID('tempdb..#FX_Rates_PreFillDown','U') IS NOT NULL DROP TABLE #FX_Rates_PreFillDown\r\n\tIF OBJECT_ID('[Finance].[FX_Rates]','U') IS NOT NULL DROP TABLE [Finance].[FX_Rates]\r\n\r\n\t;WITH CTE_Dates AS\r\n\t(\r\n\t    SELECT CONVERT(DATE, (\r\n\t\t\t\t\t\t\t\t\tSELECT\t\tMIN(CAST(CONCAT([Year],'-',[Month],'-01') AS DATE))\r\n\t\t\t\t\t\t\t\t\tFROM\t\t[RAW].[FX_Rates]\r\n\t\t\t\t\t\t\t\t\tWHERE\t\t[Currency] IS NOT NULL\r\n\t\t\t\t\t\t\t\t)) AS Dates\r\n\t \r\n\t    UNION ALL\r\n\t \r\n\t    SELECT DATEADD(MONTH, 1, Dates)\r\n\t    FROM CTE_Dates\r\n\t    WHERE CONVERT(DATE, Dates) <= CONVERT(DATE, DATEADD(MONTH,-1,CAST(GETDATE() AS DATE)))\r\n\t)\r\n\tSELECT\t\tROW_NUMBER()OVER(ORDER BY [Dates]) AS [RowNumber]\r\n\t,\t\t\tDATENAME(MONTH,Dates) + ' ' + DATENAME(YEAR, Dates) AS [Date]\r\n\tINTO\t\t#Dates\r\n\tFROM\t\tCTE_Dates\r\n\r\n\tSELECT\t\tfx.[Currency]\r\n\t,\t\t\tfx.[Rate_BS]\r\n\t,\t\t\tfx.[Rate_P&L]\r\n\t,\t\t\tfx.[Version]\r\n\t,\t\t\tfx.[Year]\r\n\t,\t\t\tfx.[Month]\r\n\t,\t\t\td.[Date]\r\n\tINTO\t\t#FX_Rates_PreFillDown\r\n\tFROM\t\t(\r\n\t\t\t\t\tSELECT\t\t*\r\n\t\t\t\t\t,\t\t\tROW_NUMBER()OVER(ORDER BY CAST(CONCAT([Year],'-',[Month],'-01') AS DATE)) AS [RowNumber]\r\n\t\t\t\t\tFROM\t\t[RAW].[FX_Rates]\r\n\t\t\t\t\tWHERE\t\t[Currency] IS NOT NULL\r\n\t\t\t\t) fx\r\n\tFULL JOIN\t#Dates d\r\n\tON\t\t\tfx.[RowNumber] = d.[RowNumber]\r\n\r\n\r\n\r\n\tSELECT\t\tFIRST_VALUE([Currency]) OVER (PARTITION BY [Currency Group] ORDER BY CAST([Date] AS DATE)) AS [Currency]\r\n\t,\t\t\tFIRST_VALUE([Rate_BS]) OVER (PARTITION BY [Rate_BS Group] ORDER BY CAST([Date] AS DATE)) AS [Rate_BS]\r\n\t,\t\t\tFIRST_VALUE([Rate_P&L]) OVER (PARTITION BY [Rate_P&L Group] ORDER BY CAST([Date] AS DATE)) AS [Rate_P&L]\r\n\t,\t\t\tISNULL([Version],'Rolled Forwards')\t\tAS [Version]\r\n\t,\t\t\tISNULL([Year],RIGHT([Date],4))\t\t\tAS [Year]\r\n\t,\t\t\tISNULL([Month],DATEPART(MM,[Date]))\t\tAS [Month]\r\n\t,\t\t\t[Date]\r\n\tINTO\t\t[Finance].[FX_Rates]\r\n\tFROM\t\t(\r\n\t\t\t\t\tSELECT\t\t*\r\n\t\t\t\t\t,\t\t\tCOUNT([Currency]) OVER (ORDER BY CAST([Date] AS DATE)) AS [Currency Group]\r\n\t\t\t\t\t,\t\t\tCOUNT([Rate_BS]) OVER (ORDER BY CAST([Date] AS DATE)) AS [Rate_BS Group]\r\n\t\t\t\t\t,\t\t\tCOUNT([Rate_P&L]) OVER (ORDER BY CAST([Date] AS DATE)) AS [Rate_P&L Group]\r\n\t\t\t\t\tFROM\t\t#FX_Rates_PreFillDown\r\n\t\t\t\t) fx3"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Finance"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-09T17:23:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerArgent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CREATEGL_Script_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CREATEGL2",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SqlServerArgent",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "--------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 2.1\tCreate PY GL\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\tIF OBJECT_ID('tempdb..#GL_PY','U') IS NOT NULL DROP TABLE #GL_PY\r\n\tIF OBJECT_ID('Core.GL_PY','U') IS NOT NULL DROP TABLE Core.GL_PY;\r\n\r\n\tSELECT\t\t\r\n\tgcc.SEGMENT1 AS [Entity] ,\r\n\te.DESCRIPTION AS [Company Name] , \r\n\tjh.[JE_HEADER_ID] AS [Journal Number] ,\r\n\tCONVERT(VARCHAR(10),CAST(LEFT(jh.[CREATION_DATE],10)  AS DATE),103) AS [Date Entered] ,\r\n\tCONVERT(VARCHAR(10),CAST(SUBSTRING(jh.[CREATION_DATE],12,8)  AS TIME),108) AS [Time Entered] ,\r\n\tCONVERT(VARCHAR(10),CAST(LEFT(jh.LAST_UPDATE_DATE,10) AS DATE),103) AS [Date Updated] ,\r\n\tCONVERT(VARCHAR(10),CAST(SUBSTRING(jh.LAST_UPDATE_DATE,12,8) AS TIME),108) AS [Time Updated] ,\r\n\tjl.[CREATED_BY] AS [User Entered] ,\r\n\tjl.[LAST_UPDATED_BY] AS [User Updated] ,\r\n\tCONVERT(VARCHAR(10),CAST(LEFT(jh.DEFAULT_EFFECTIVE_DATE,10) AS DATE),103) AS [Date Effective],\r\n\tCONVERT(VARCHAR(10),CAST(LEFT(jh.DEFAULT_EFFECTIVE_DATE,10) AS DATE),103) as [Date of Journal],\r\n\tCASE WHEN gp.PERIOD_NUM = '13' THEN '12' ELSE RIGHT(CONCAT('0',gp.PERIOD_NUM),2) END AS [Financial Period] ,\r\n\tjh.[JE_source]\tAS [Journal Type] ,\r\n\tjs.[DESCRIPTION] AS [Journal Type Description] ,\r\n\tLEFT(jh.[DESCRIPTION],200) AS [Journal Description] ,\r\n\tjl.[JE_LINE_NUM] AS [Line Number] ,\r\n\tLEFT(jl.[DESCRIPTION],200) AS [Line Description] ,\r\n\tjh.[CURRENCY_CODE] AS [Currency] ,\r\n\tgl.[CURRENCY_CODE] AS [Entity Currency (EC)] ,\r\n\tCASE WHEN CAST(ACCOUNTED_AMOUNT AS MONEY) > 0 THEN 'D' \r\n\t\t WHEN CAST(ACCOUNTED_AMOUNT AS MONEY) < 0 THEN 'C' \r\n\t\t WHEN CAST(ACCOUNTED_AMOUNT AS MONEY) = 0 AND CAST(ENTERED_AMOUNT AS MONEY) > 0 THEN 'D' \r\n\t\t WHEN CAST(ACCOUNTED_AMOUNT AS MONEY) = 0 AND CAST(ENTERED_AMOUNT AS MONEY) < 0 THEN 'C' ELSE 'D' END AS [DC Indicator], \r\n\tCAST(ENTERED_AMOUNT AS MONEY) AS [Signed Journal Amount], \r\n\tCASE WHEN CAST(ENTERED_AMOUNT AS MONEY) >= 0 THEN     CAST(ENTERED_AMOUNT AS MONEY) ELSE 0 END AS [Unsigned Debit Amount], \r\n\tCASE WHEN CAST(ENTERED_AMOUNT AS MONEY)  < 0 THEN ABS(CAST(ENTERED_AMOUNT AS MONEY)) ELSE 0 END AS [Unsigned Credit Amount], \r\n\tCAST(ACCOUNTED_AMOUNT AS MONEY) AS [Signed Amount EC], \r\n\tCASE WHEN CAST(ACCOUNTED_AMOUNT AS MONEY) >= 0 THEN     CAST(ACCOUNTED_AMOUNT AS MONEY) ELSE 0 END AS [Unsigned Debit Amount EC],\r\n\tCASE WHEN CAST(ACCOUNTED_AMOUNT AS MONEY)  < 0 THEN ABS(CAST(ACCOUNTED_AMOUNT AS MONEY)) ELSE 0 END AS [Unsigned Credit Amount EC], \r\n\tgcc.SEGMENT3 AS [Account Number] ,\r\n\ta.[DESCRIPTION] AS [Account Description] ,\r\n\tCASE \r\n\t\tWHEN gcc.SEGMENT3 IN ('111108','111112') THEN 'Cash and overdrafts' \r\n\t\tWHEN gcc.SEGMENT3 IN ('111110','111114') THEN 'Trade Debtors' \r\n\t\tWHEN gcc.SEGMENT3 IN ('122003','122005') THEN 'Other Debtors & Prepayments' \r\n\t\tWHEN gcc.SEGMENT3 IN ('131003','133006','133012','133014','133027','135001','135005','135009') THEN 'Stock' \r\n\t\tWHEN gcc.SEGMENT3 IN ('212999','231003','231004') THEN 'Other Creditors' \r\n\t\tWHEN gcc.SEGMENT3 IN ('311002','311003') THEN 'Share Capital & Reserves#5' \r\n\t\tWHEN gcc.SEGMENT3 IN ('414002') THEN 'Revenue' \r\n\t\tELSE  fr.[AccountDesc#5] \r\n\tEND AS [Account Category] ,\r\n\t'All' AS [Controlling Area for Cost and Profit Centre] ,\r\n\tgcc.SEGMENT2 AS [Cost Centre] ,\r\n\tc.[DESCRIPTION] AS [Cost Centre Description] , \r\n\tgcc.SEGMENT2 AS [Profit Centre] ,\r\n\tp.[DESCRIPTION] AS [Profit Centre Description] ,\r\n\tRIGHT(CONVERT(VARCHAR(10),CAST(LEFT(jh.DEFAULT_EFFECTIVE_DATE,10) AS DATE),103),4) AS [Year] ,\r\n\tDATENAME(MONTH,CONCAT(RIGHT(CONVERT(VARCHAR(10),CAST(LEFT(jh.DEFAULT_EFFECTIVE_DATE,10) AS DATE),103),4),'-',CASE WHEN gp.PERIOD_NUM = '13' THEN '12' ELSE RIGHT(CONCAT('0',gp.PERIOD_NUM),2) END,'-01')) \r\n\t\t+ ' ' + RIGHT(CONVERT(VARCHAR(10),CAST(LEFT(jh.DEFAULT_EFFECTIVE_DATE,10) AS DATE),103),4) AS [Date]\r\n\tINTO\t\t#GL_PY\r\n\tFROM\t\tCore.GL_JE_Lines jl\r\n\tLEFT JOIN\t[RAW].[O.GL_JE_HEADERS] jh ON jh.JE_HEADER_ID = jl.JE_HEADER_ID\r\n\tLEFT JOIN\t[RAW].[O.GL_JE_BATCHES] jb ON jh.JE_BATCH_ID = jb.JE_BATCH_ID\r\n\tLEFT JOIN\t[RAW].[O.GL_CODE_COMBINATIONS] gcc ON jl.CODE_COMBINATION_ID = gcc.CODE_COMBINATION_ID\r\n\tLEFT JOIN\t[RAW].[O.GL_LEDGERS] gl ON gl.LEDGER_ID = jl.LEDGER_ID\r\n\tLEFT JOIN\t[RAW].[O.GL_PERIODS] gp ON gp.PERIOD_NAME = jl.PERIOD_NAME AND gp.PERIOD_SET_NAME = gl.PERIOD_SET_NAME\r\n\tLEFT JOIN\t[RAW].[O.GL_JE_SOURCES_TL] js ON js.JE_SOURCE_NAME = jh.JE_SOURCE AND js.LANGUAGE = 'US'\r\n\tLEFT JOIN\tCore.GL_Descriptions e ON e.FLEX_VALUE = gcc.SEGMENT1 AND e.VALUE_CATEGORY = 'Company Argent'\r\n\tLEFT JOIN\tCore.GL_Descriptions a ON a.FLEX_VALUE = gcc.SEGMENT3 AND a.VALUE_CATEGORY = 'Account Argent'\r\n\tLEFT JOIN\tCore.GL_Descriptions c ON c.FLEX_VALUE = gcc.SEGMENT2 AND c.VALUE_CATEGORY = 'Cost Centre Argent'\r\n\tLEFT JOIN\tCore.GL_Descriptions p ON p.FLEX_VALUE = gcc.SEGMENT2 AND p.VALUE_CATEGORY = 'Cost Centre Argent'\r\n\tLEFT JOIN\t[RAW].[F.FinanceReference] fr ON gcc.[SEGMENT3] = fr.[AccountDesc#9]\r\n\t\r\n\tWHERE\tjl.STATUS = 'P'\r\n\tAND\t\tREPLACE(jb.ACTUAL_FLAG,'|','') = 'A'\r\n\tAND\t\tISNULL(jh.CURRENCY_CODE, gl.[CURRENCY_CODE]) <> 'STAT'\r\n\tAND \tgcc.SUMMARY_FLAG = 'N'\r\n--\tAND\t\tYEAR(CAST(GETDATE() AS DATE)) - 1 = CONCAT('20',RIGHT(jl.[PERIOD_NAME],2))\t\tReplaced with below to include Dec of previous, previous year\r\n\tAND\t\t(YEAR(CAST(GETDATE() AS DATE)) - 1 = CONCAT('20',RIGHT(jl.[PERIOD_NAME],2))\r\n\t\t\t\tOR CONCAT('Dec-', RIGHT(YEAR(CAST(GETDATE() AS date)) - 2, 2)) = jl.[PERIOD_NAME]\r\n\t\t\t\tOR CONCAT('13_Dec-', RIGHT(YEAR(CAST(GETDATE() AS date)) - 2, 2)) = jl.[PERIOD_NAME])\r\n\r\n\r\n\r\n\tSELECT\t\tgl.*\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'EUR'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Signed Amount EC]*fxpl.[EUR GBP],[Signed Amount EC]*fxbs.[EUR GBP])\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'CNY'\r\n\t\t\t\t\t\tTHEN [Signed Amount EC] * [CNY GBP]\r\n\t\t\t\t\tELSE [Signed Amount EC]\r\n\t\t\t\tEND AS [Signed Amount EC GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'EUR'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Unsigned Debit Amount EC]*fxpl.[EUR GBP],[Unsigned Debit Amount EC]*fxbs.[EUR GBP])\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'CNY'\r\n\t\t\t\t\t\tTHEN [Unsigned Debit Amount EC] * [CNY GBP]\r\n\t\t\t\t\tELSE [Unsigned Debit Amount EC]\r\n\t\t\t\tEND AS [Unsigned Debit Amount EC GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'EUR'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Unsigned Credit Amount EC]*fxpl.[EUR GBP],[Unsigned Credit Amount EC]*fxbs.[EUR GBP])\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'CNY'\r\n\t\t\t\t\t\tTHEN [Unsigned Credit Amount EC] * [CNY GBP]\r\n\t\t\t\t\tELSE [Unsigned Credit Amount EC]\r\n\t\t\t\tEND AS [Unsigned Credit Amount EC GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'GBP'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Signed Amount EC]/fxpl.[EUR GBP],[Signed Amount EC]/fxbs.[EUR GBP])\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'CNY'\r\n\t\t\t\t\t\tTHEN ([Unsigned Credit Amount EC] * [CNY GBP]) * [fx2].[EUR GBP]\r\n\t\t\t\t\tELSE [Signed Amount EC]\r\n\t\t\t\tEND AS [Signed Amount EC EUR]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'GBP'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Unsigned Debit Amount EC]/fxpl.[EUR GBP],[Unsigned Debit Amount EC]/fxbs.[EUR GBP])\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'CNY'\r\n\t\t\t\t\t\tTHEN ([Unsigned Debit Amount EC] * [CNY GBP]) * [fx2].[EUR GBP]\r\n\t\t\t\t\tELSE [Unsigned Debit Amount EC]\r\n\t\t\t\tEND AS [Unsigned Debit Amount EC EUR]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'GBP'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Unsigned Credit Amount EC]/fxpl.[EUR GBP],[Unsigned Credit Amount EC]/fxbs.[EUR GBP])\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'CNY'\r\n\t\t\t\t\t\tTHEN ([Unsigned Credit Amount EC] * [CNY GBP]) * [fx2].[EUR GBP]\r\n\t\t\t\t\tELSE [Unsigned Credit Amount EC]\r\n\t\t\t\tEND AS [Unsigned Credit Amount EC EUR]\r\n\t,\t\t\tCONCAT([Journal Number],':',[Line Number]) AS [GL_SL Link]\r\n\t,\t\t\tCONCAT([Entity],':',gl.[Currency],':',[Journal Number],':',[Line Number],':',[Cost Centre],':',gl.[Date]) AS [GL_Transactiion Link]\r\n\t,\t\t\tCONCAT([Entity],':',[Entity Currency (EC)],':',[Account Number],':',[Cost Centre],':',gl.[Date]) AS [GL_Budget Link]\r\n\t,\t\t\tCONCAT([Entity],':',[Entity Currency (EC)],':',[Account Number],':',gl.[Date]) AS [TB_GL Link]\r\n\tINTO\t\tCore.GL_PY\r\n\tFROM\t\t#GL_PY gl\r\n\tLEFT JOIN\tCore.FXRates_PL fxpl\r\n\tON\t\t\tfxpl.[Year] = gl.[Year]\r\n\tAND\t\t\tfxpl.[Month] = gl.[Financial Period]\r\n\tLEFT JOIN\tCore.FXRates_BS fxbs\r\n\tON\t\t\tfxbs.[Year] = gl.[Year]\r\n\tAND\t\t\tfxbs.[Month] = gl.[Financial Period]\r\n\tLEFT JOIN\tCore.FXRates fx2\r\n\tON\t\t\tfx2.[CONVERSION_DATE_UK_STYLE] = gl.[Date Effective]"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Finance"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-10T13:55:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerArgent')]"
			]
		}
	]
}