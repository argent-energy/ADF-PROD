{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-aeanalytics-prod"
		},
		"AzureDataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureSqlDatabase2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase2'"
		},
		"FTP Oracle_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FTP Oracle'"
		},
		"OracleBlob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OracleBlob'"
		},
		"SqlServerArgent_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServerArgent'"
		},
		"AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://staeanalyticsprod.dfs.core.windows.net"
		},
		"FTP Oracle_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "sftp.argentenergy.nl"
		},
		"FTP Oracle_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "Oracle"
		},
		"Sharepoint_Pricing_Data_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://argentenergyltd.sharepoint.com/sites/PowerBIdata/_api/web/GetFileByServerRelativeUrl('/sites/PowerBIdata/Shared%20Documents/General/Excel%20files/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/TestIncidents')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "test",
				"activities": [
					{
						"name": "Raise an Incident",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://eu2api.symphonysummit.com/Argent/REST/Summit_RESTWCF.svc/RESTService/CommonWS_JsonObjCall",
							"method": "POST",
							"headers": {},
							"body": {
								"ServiceName": "IM_LogOrUpdateIncident",
								"objCommonParameters": {
									"_ProxyDetails": {
										"AuthType": "APIKEY",
										"APIKey": "tryDnK94yXfNHDFbDyiy6HltkdY2uvw0f5UtnFfGZiY=",
										"ProxyID": 0,
										"ReturnType": "JSON",
										"OrgID": 1
									},
									"incidentParamsJSON": {
										"IncidentContainerJsonObj": {
											"Updater": "Executive",
											"CI_Key": "hostname",
											"CI_Value": "",
											"Ticket": {
												"IsFromWebService": true,
												"Priority_Name": "P3 - Medium",
												"Classification_Name": "Data or Process in system not working",
												"Sup_Function": "IT",
												"Caller_EmailID": "lyndon.johnson@argentenergy.com",
												"Status": "New",
												"Urgency_Name": "Stops Work",
												"Assigned_WorkGroup_Name": "Argent Reporting Support Team",
												"Medium": "Web",
												"Impact_Name": "Multiple Users",
												"Category_Name": "Argent Reporting",
												"CI_ID": "",
												"SLA_Name": "",
												"OpenCategory_Name": "Argent Reporting",
												"Source": "Person",
												"Description": "@{pipeline().parameters.TicketMessage}",
												"PageName": "TicketDetail"
											},
											"TicketInformation": {
												"Information": "TEST Ticket",
												"InternalLog": "#InternalLog#",
												"UserLog": "",
												"Solution": "#Solution#"
											},
											"CustomFields": []
										}
									},
									"RequestType": "RemoteCall"
								}
							}
						}
					},
					{
						"name": "Get the Ticket Number",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Raise an Incident",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TicketNo",
							"value": {
								"value": "@string(activity('Raise an Incident').output.TicketNo)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Email Alert",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get the Ticket Number",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://ae-adf-emailnotification.azurewebsites.net:443/api/Argent-Alerting/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=Aso6aks8InhkiT92JgC0HG-J1IvmAhT5B94OpeVK9lo",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n    \"receiver\":\"@{pipeline().parameters.receiver}\",\n    \"title\":\"Pipeline Run Failed\",\n    \"message\":\"Job failed, ticket raised @{variables('TicketNo')}\",\n    \"color\":\"Red\",\n    \"dataFactoryName\":\"@{pipeline().DataFactory}\",\n    \"pipelineName\":\"@{pipeline().Pipeline}\",\n    \"pipelineRunId\":\"@{pipeline().RunId}\",\n    \"time\":\"@{utcnow()}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "sql.jobs@argentenergy.com"
					},
					"TicketID": {
						"type": "string"
					},
					"JobMessage": {
						"type": "string",
						"defaultValue": "Azure Data Factory Error"
					},
					"TicketMessage": {
						"type": "string",
						"defaultValue": "Automated message: Data job has failedJob Failed"
					}
				},
				"variables": {
					"TicketNo": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Trade/Pricing"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FTP Oracle')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "On-premise FTP server",
				"annotations": [],
				"type": "FtpServer",
				"typeProperties": {
					"host": "[parameters('FTP Oracle_properties_typeProperties_host')]",
					"port": 21,
					"enableSsl": false,
					"enableServerCertificateValidation": false,
					"authenticationType": "Basic",
					"userName": "[parameters('FTP Oracle_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FTP Oracle_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleBlob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('OracleBlob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sharepoint_Pricing_Data')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Link to Sharepoint site \"PowerBI data\" folder \"Excel files\"",
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('Sharepoint_Pricing_Data_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerArgent')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServerArgent_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NonOracle')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 7,
						"startTime": "2022-09-01T17:12:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								11
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CREATEGL_Script_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CREATEGL1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SqlServerArgent",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 1. \tMANIPULATE GENERAL LEDGER\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 1.1\tCREATE WIP JOURNALS\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t\r\n\tIF OBJECT_ID('Core.GL_JE_Lines','U') IS NOT NULL DROP TABLE Core.GL_JE_Lines\r\n\tSELECT\t*,\r\n\t\t\tCAST(ISNULL(ACCOUNTED_DR,0) AS MONEY) - CAST(ISNULL(ACCOUNTED_CR,0) AS MONEY) AS ACCOUNTED_AMOUNT,\r\n\t\t\tCAST(ISNULL(ENTERED_DR,0) AS MONEY) - CAST(ISNULL(ENTERED_CR,0) AS MONEY) AS ENTERED_AMOUNT\r\n\tINTO Core.GL_JE_Lines\r\n\tFROM\t(\t\r\n\t\t\t\tSELECT\t\t[JE_HEADER_ID], [JE_LINE_NUM], [LAST_UPDATE_DATE], [LAST_UPDATED_BY], [LEDGER_ID], [CODE_COMBINATION_ID], [PERIOD_NAME], [EFFECTIVE_DATE], [STATUS], [CREATION_DATE], [CREATED_BY], [ENTERED_CR], [ACCOUNTED_CR], [DESCRIPTION], [ENTERED_DR], [ACCOUNTED_DR], [Stamp]\r\n\t\t\t\tFROM\t\t[RAW].[O.GL_JE_LINES] \r\n\t\t\t\tUNION\r\n\t\t\t\tSELECT\t\t[JE_HEADER_ID], [JE_LINE_NUM], [LAST_UPDATE_DATE], [LAST_UPDATED_BY], [LEDGER_ID], [CODE_COMBINATION_ID], [PERIOD_NAME], [EFFECTIVE_DATE], [STATUS], [CREATION_DATE], [CREATED_BY], [ENTERED_CR], [ACCOUNTED_CR], [DESCRIPTION], [ENTERED_DR], [ACCOUNTED_DR], [Stamp]\r\n\t\t\t\tFROM\t\t[RAW].[O.GL_JE_LINES_2021]\r\n\t\t\t\tUNION\r\n\t\t\t\tSELECT\t\t[JE_HEADER_ID], [JE_LINE_NUM], [LAST_UPDATE_DATE], [LAST_UPDATED_BY], [LEDGER_ID], [CODE_COMBINATION_ID], [PERIOD_NAME], [EFFECTIVE_DATE], [STATUS], [CREATION_DATE], [CREATED_BY], [ENTERED_CR], [ACCOUNTED_CR], [DESCRIPTION], [ENTERED_DR], [ACCOUNTED_DR], [Stamp]\r\n\t\t\t\tFROM\t\t[RAW].[O.GL_JE_LINES_2020]\r\n\t\t\t\tWHERE\t\t[PERIOD_NAME] LIKE '%21%'\r\n\t\t\t) je\r\n\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 1.2\tBuild Segments in Scope table\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\t\r\n\t\r\n\tIF OBJECT_ID('Core.GL_SegmentsInScope','U') IS NOT NULL DROP TABLE Core.GL_SegmentsInScope\r\n\t;WITH IDs AS (\r\n\tSELECT \t\tDISTINCT CODE_COMBINATION_ID \r\n\tFROM \t\tCore.GL_JE_Lines\r\n\tUNION \r\n\tSELECT \t\tDISTINCT CODE_COMBINATION_ID \r\n\tFROM \t\t[RAW].[O.GL_BALANCES]\r\n\t)\r\n\tSELECT \t\tDISTINCT i.CODE_COMBINATION_ID, \r\n\t\t\t\tSEGMENT1, SEGMENT2, SEGMENT3, SEGMENT4, SEGMENT5, \r\n\t\t\t\tSEGMENT6\r\n\tINTO \t\tCore.GL_SegmentsInScope \r\n\tFROM \t\tIDs i\r\n\tLEFT JOIN \t[RAW].[O.GL_CODE_COMBINATIONS] gcc \r\n\tON \t\t\tgcc.CODE_COMBINATION_ID = i.CODE_COMBINATION_ID\r\n\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 1.3\tBuild Max Dates table\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\t\r\n\r\n\tIF OBJECT_ID('Core.GL_MaxDates','U') IS NOT NULL DROP TABLE Core.GL_MaxDates\r\n\tSELECT\t\tFLEX_VALUE,\r\n\t\t\t\tVALUE_CATEGORY ,\r\n\t\t\t\tCOUNT(*) AS [rowcount], \r\n\t\t\t\tMAX(CAST(LEFT([LAST_UPDATE_DATE],10) AS DATE)) AS [maxdate]\r\n\tINTO\t\tCore.GL_MaxDates\r\n\tFROM\t\t[RAW].[O.FND_FLEX_VALUES_VL]\r\n\tWHERE\t\t[VALUE_CATEGORY] IN ('Account Argent','Company Argent','Cost Centre Argent')\r\n\tGROUP BY\tFLEX_VALUE\r\n\t,\t\t\tVALUE_CATEGORY\r\n\tHAVING\t\tCOUNT(*) > 1\r\n\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 1.4\tBuild Flex Value Max Date table\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\t\r\n\t\r\n\tIF OBJECT_ID('Core.GL_FlexValueMaxDate','U') IS NOT NULL DROP TABLE Core.GL_FlexValueMaxDate\r\n\tSELECT\t\tfv.*, \r\n\t\t\t\tCASE WHEN md.MaxDate IS NULL THEN CAST(LEFT([LAST_UPDATE_DATE],10) AS DATE) ELSE MaxDate END AS [MaxDate]\r\n\tINTO\t\tCore.GL_FlexValueMaxDate\r\n\tFROM\t\t[RAW].[O.FND_FLEX_VALUES_VL] fv\r\n\tLEFT JOIN\tCore.GL_MaxDates md \r\n\tON \t\t\tfv.FLEX_VALUE = md.flex_value\r\n\tAND\t\t\tfv.Value_Category = md.VALUE_CATEGORY\r\n\tWHERE\t\tfv.[VALUE_CATEGORY] IN ('Account Argent','Company Argent','Cost Centre Argent')\r\n\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 1.5\tBuild GL Descriptions table\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\t\r\n\r\n\tIF OBJECT_ID('Core.GL_Descriptions','U') IS NOT NULL DROP TABLE Core.GL_Descriptions\r\n\t;WITH S AS (\r\n\t\t\t\tSELECT 'SEGMENT' AS SEGMENT, '' AS [VALUE_CATEGORY]\r\n\tUNION \t\tSELECT DISTINCT SEGMENT1, 'Company Argent' AS [VALUE_CATEGORY] FROM Core.GL_SegmentsInScope\t\r\n\tUNION  \t\tSELECT DISTINCT SEGMENT3, 'Account Argent' AS [VALUE_CATEGORY] FROM Core.GL_SegmentsInScope\t\r\n\tUNION  \t\tSELECT DISTINCT SEGMENT2, 'Cost Centre Argent' AS [VALUE_CATEGORY] FROM Core.GL_SegmentsInScope \t\r\n\tUNION  \t\tSELECT DISTINCT SEGMENT2, 'Cost Centre Argent' AS [VALUE_CATEGORY] FROM Core.GL_SegmentsInScope \t\r\n\t),\t\t\t\r\n\tFMV AS (\r\n\tSELECT\t\tDISTINCT fv.FLEX_VALUE, fv.DESCRIPTION, fv.VALUE_CATEGORY\r\n\tFROM\t\tCore.GL_FlexValueMaxDate fv\r\n\tINNER JOIN\tCore.GL_FlexValueMaxDate md \r\n\tON \t\t\tfv.FLEX_VALUE_ID = md.FLEX_VALUE_ID \r\n\tAND \t\tCAST(LEFT(fv.[LAST_UPDATE_DATE],10) AS DATE) = md.MaxDate\r\n\t)\r\n\tSELECT\t\tS.SEGMENT\r\n\t,\t\t\tFMV.*\r\n\tINTO\t\tCore.GL_Descriptions\r\n\tFROM\t\tFMV\r\n\tLEFT JOIN   S\r\n\tON \t\t\tFMV.FLEX_VALUE = S.SEGMENT\r\n\tAND\t\t\tFMV.VALUE_CATEGORY = S.VALUE_CATEGORY\r\n\tWHERE \t\tS.SEGMENT IS NOT NULL\r\n\r\n-----------------------------------------------------------------------------------------------------------------------------------------------\r\n-- 1.6\tCreate table containing budget information\r\n-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\tIF OBJECT_ID('tempdb..#BudgetBalances','U') IS NOT NULL DROP TABLE #BudgetBalances\r\n\tIF OBJECT_ID('[Finance].[BudgetBalances]','U') IS NOT NULL DROP TABLE [Finance].[BudgetBalances]\r\n\r\n\tSELECT\t\tgcc.[PERIOD_NAME] AS [Period Name]\r\n\t,\t\t\tCAST(CASE WHEN gp.PERIOD_NUM = '13' THEN '12' ELSE RIGHT(CONCAT('0',gp.PERIOD_NUM),2) END AS INT) AS [Financial Period]\r\n\t,\t\t\tCONCAT('20',RIGHT(gcc.[PERIOD_NAME],2)) AS [Financial Year]\r\n\t,\t\t\t[BUDGET_NAME] AS [Budget Name]\r\n\t,\t\t\t[SEGMENT1] AS [Entity]\r\n\t,\t\t\te.[Description] AS [Company Name]\r\n\t,\t\t\t[SEGMENT2] AS [Cost Centre]\r\n\t,\t\t\tc.[Description] AS [Cost Centre Description]\r\n\t,\t\t\t[SEGMENT3] AS [Account Number]\r\n\t,\t\t\ta.[Description] AS [Account Description]\r\n\t,\t\t\tfr.[AccountDesc#5] AS [Account Category]\r\n\t,\t\t\t[CURRENCY_CODE] AS [Currency]\r\n\t,\t\t\t[PERIOD_NET_DR] AS [Net Debit]\r\n\t,\t\t\t[PERIOD_NET_CR] AS [Net Credit]\r\n\t,\t\t\tDATENAME(MONTH,CONCAT(CONCAT('20',RIGHT(gcc.[PERIOD_NAME],2)),'-',CAST(CASE WHEN gp.PERIOD_NUM = '13' THEN '12' ELSE RIGHT(CONCAT('0',gp.PERIOD_NUM),2) END AS INT),'-01')) + ' ' + CONCAT('20',RIGHT(gcc.[PERIOD_NAME],2)) AS [Date]\r\n\t,\t\t\tLEFT([BUDGET_NAME],CHARINDEX(' ',[BUDGET_NAME])) AS [Budget Type]\r\n\t,\t\t\tCASE \r\n\t\t\t\t\tWHEN CAST([PERIOD_NET_DR] AS DECIMAL(28,2)) = 0\r\n\t\t\t\t\t\tTHEN IIF(fr.[AccountDesc#5] = 'Revenue',CAST([PERIOD_NET_CR] AS DECIMAL(28,2)),(-1)*CAST([PERIOD_NET_CR] AS DECIMAL(28,2)))\r\n\t\t\t\t\tELSE CAST([PERIOD_NET_DR] AS DECIMAL(28,2))\r\n\t\t\t\tEND AS [Budget]\r\n\t,\t\t\tCONCAT([SEGMENT1],':',[CURRENCY_CODE],':',[SEGMENT3],':',[SEGMENT2],':',DATENAME(MONTH,CONCAT(CONCAT('20',RIGHT(gcc.[PERIOD_NAME],2)),'-',CAST(CASE WHEN gp.PERIOD_NUM = '13' THEN '12' ELSE RIGHT(CONCAT('0',gp.PERIOD_NUM),2) END AS INT),'-01')) + ' ' + CONCAT('20',RIGHT(gcc.[PERIOD_NAME],2))) AS [GL_Budget Link]\r\n\t,\t\t\tCAST(GETDATE() AS DATE) AS [DateStamp]\r\n\tINTO\t\t#BudgetBalances\r\n\tFROM\t\t[RAW].[O.GL_BUDGET_BALANCES] gcc\r\n\tLEFT JOIN\t[RAW].[O.GL_PERIODS] gp ON gp.PERIOD_NAME = gcc.PERIOD_NAME \r\n\tLEFT JOIN\tCore.GL_Descriptions e ON e.FLEX_VALUE = gcc.SEGMENT1 AND e.VALUE_CATEGORY = 'Company Argent'\r\n\tLEFT JOIN\tCore.GL_Descriptions a ON a.FLEX_VALUE = gcc.SEGMENT3 AND a.VALUE_CATEGORY = 'Account Argent'\r\n\tLEFT JOIN\tCore.GL_Descriptions c ON c.FLEX_VALUE = gcc.SEGMENT2 AND c.VALUE_CATEGORY = 'Cost Centre Argent'\r\n\tLEFT JOIN\t[RAW].[F.FinanceReference] fr ON gcc.[SEGMENT3] = fr.[AccountDesc#9]\r\n\r\n\tSELECT\t\tbb.*\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN LEFT([Entity],1) = '3'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Budget]/[Rate_P&L],[Budget]/[Rate_BS])\r\n\t\t\t\t\tELSE [Budget]\r\n\t\t\t\tEND AS [Budget GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN LEFT([Entity],1) != '3'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Budget]*[Rate_P&L],[Budget]*[Rate_BS])\r\n\t\t\t\t\tELSE [Budget]\r\n\t\t\t\tEND AS [Budget EUR]\r\n\tINTO\t\t[Finance].[BudgetBalances]\r\n\tFROM\t\t#BudgetBalances bb\r\n\tLEFT JOIN\t[Finance].[FX_Rates] fx\r\n\tON\t\t\tbb.[Date] = fx.[Date]\r\n\r\n-----------------------------------------------------------------------------------------------------------------------------------------------\r\n-- 1.7\tManipulate FX Rates table\r\n-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\tIF OBJECT_ID('tempdb..#Dates','U') IS NOT NULL DROP TABLE #Dates\r\n\tIF OBJECT_ID('tempdb..#FX_Rates_PreFillDown','U') IS NOT NULL DROP TABLE #FX_Rates_PreFillDown\r\n\tIF OBJECT_ID('[Finance].[FX_Rates]','U') IS NOT NULL DROP TABLE [Finance].[FX_Rates]\r\n\r\n\t;WITH CTE_Dates AS\r\n\t(\r\n\t    SELECT CONVERT(DATE, (\r\n\t\t\t\t\t\t\t\t\tSELECT\t\tMIN(CAST(CONCAT([Year],'-',[Month],'-01') AS DATE))\r\n\t\t\t\t\t\t\t\t\tFROM\t\t[RAW].[FX_Rates]\r\n\t\t\t\t\t\t\t\t\tWHERE\t\t[Currency] IS NOT NULL\r\n\t\t\t\t\t\t\t\t)) AS Dates\r\n\t \r\n\t    UNION ALL\r\n\t \r\n\t    SELECT DATEADD(MONTH, 1, Dates)\r\n\t    FROM CTE_Dates\r\n\t    WHERE CONVERT(DATE, Dates) <= CONVERT(DATE, DATEADD(MONTH,-1,CAST(GETDATE() AS DATE)))\r\n\t)\r\n\tSELECT\t\tROW_NUMBER()OVER(ORDER BY [Dates]) AS [RowNumber]\r\n\t,\t\t\tDATENAME(MONTH,Dates) + ' ' + DATENAME(YEAR, Dates) AS [Date]\r\n\tINTO\t\t#Dates\r\n\tFROM\t\tCTE_Dates\r\n\r\n\tSELECT\t\tfx.[Currency]\r\n\t,\t\t\tfx.[Rate_BS]\r\n\t,\t\t\tfx.[Rate_P&L]\r\n\t,\t\t\tfx.[Version]\r\n\t,\t\t\tfx.[Year]\r\n\t,\t\t\tfx.[Month]\r\n\t,\t\t\td.[Date]\r\n\tINTO\t\t#FX_Rates_PreFillDown\r\n\tFROM\t\t(\r\n\t\t\t\t\tSELECT\t\t*\r\n\t\t\t\t\t,\t\t\tROW_NUMBER()OVER(ORDER BY CAST(CONCAT([Year],'-',[Month],'-01') AS DATE)) AS [RowNumber]\r\n\t\t\t\t\tFROM\t\t[RAW].[FX_Rates]\r\n\t\t\t\t\tWHERE\t\t[Currency] IS NOT NULL\r\n\t\t\t\t) fx\r\n\tFULL JOIN\t#Dates d\r\n\tON\t\t\tfx.[RowNumber] = d.[RowNumber]\r\n\r\n\r\n\r\n\tSELECT\t\tFIRST_VALUE([Currency]) OVER (PARTITION BY [Currency Group] ORDER BY CAST([Date] AS DATE)) AS [Currency]\r\n\t,\t\t\tFIRST_VALUE([Rate_BS]) OVER (PARTITION BY [Rate_BS Group] ORDER BY CAST([Date] AS DATE)) AS [Rate_BS]\r\n\t,\t\t\tFIRST_VALUE([Rate_P&L]) OVER (PARTITION BY [Rate_P&L Group] ORDER BY CAST([Date] AS DATE)) AS [Rate_P&L]\r\n\t,\t\t\tISNULL([Version],'Rolled Forwards')\t\tAS [Version]\r\n\t,\t\t\tISNULL([Year],RIGHT([Date],4))\t\t\tAS [Year]\r\n\t,\t\t\tISNULL([Month],DATEPART(MM,[Date]))\t\tAS [Month]\r\n\t,\t\t\t[Date]\r\n\tINTO\t\t[Finance].[FX_Rates]\r\n\tFROM\t\t(\r\n\t\t\t\t\tSELECT\t\t*\r\n\t\t\t\t\t,\t\t\tCOUNT([Currency]) OVER (ORDER BY CAST([Date] AS DATE)) AS [Currency Group]\r\n\t\t\t\t\t,\t\t\tCOUNT([Rate_BS]) OVER (ORDER BY CAST([Date] AS DATE)) AS [Rate_BS Group]\r\n\t\t\t\t\t,\t\t\tCOUNT([Rate_P&L]) OVER (ORDER BY CAST([Date] AS DATE)) AS [Rate_P&L Group]\r\n\t\t\t\t\tFROM\t\t#FX_Rates_PreFillDown\r\n\t\t\t\t) fx"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Finance"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-09T17:23:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerArgent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CREATEGL_Script_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CREATEGL2",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SqlServerArgent",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "--------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 2.1\tCreate PY GL\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\tIF OBJECT_ID('tempdb..#GL_PY','U') IS NOT NULL DROP TABLE #GL_PY\r\n\tIF OBJECT_ID('Core.GL_PY','U') IS NOT NULL DROP TABLE Core.GL_PY;\r\n\r\n\tSELECT\t\t\r\n\tgcc.SEGMENT1 AS [Entity] ,\r\n\te.DESCRIPTION AS [Company Name] , \r\n\tjh.[JE_HEADER_ID] AS [Journal Number] ,\r\n\tCONVERT(VARCHAR(10),CAST(LEFT(jh.[CREATION_DATE],10)  AS DATE),103) AS [Date Entered] ,\r\n\tCONVERT(VARCHAR(10),CAST(SUBSTRING(jh.[CREATION_DATE],12,8)  AS TIME),108) AS [Time Entered] ,\r\n\tCONVERT(VARCHAR(10),CAST(LEFT(jh.LAST_UPDATE_DATE,10) AS DATE),103) AS [Date Updated] ,\r\n\tCONVERT(VARCHAR(10),CAST(SUBSTRING(jh.LAST_UPDATE_DATE,12,8) AS TIME),108) AS [Time Updated] ,\r\n\tjl.[CREATED_BY] AS [User Entered] ,\r\n\tjl.[LAST_UPDATED_BY] AS [User Updated] ,\r\n\tCONVERT(VARCHAR(10),CAST(LEFT(jh.DEFAULT_EFFECTIVE_DATE,10) AS DATE),103) AS [Date Effective],\r\n\tCONVERT(VARCHAR(10),CAST(LEFT(jh.DEFAULT_EFFECTIVE_DATE,10) AS DATE),103) as [Date of Journal],\r\n\tCASE WHEN gp.PERIOD_NUM = '13' THEN '12' ELSE RIGHT(CONCAT('0',gp.PERIOD_NUM),2) END AS [Financial Period] ,\r\n\tjh.[JE_source]\tAS [Journal Type] ,\r\n\tjs.[DESCRIPTION] AS [Journal Type Description] ,\r\n\tLEFT(jh.[DESCRIPTION],200) AS [Journal Description] ,\r\n\tjl.[JE_LINE_NUM] AS [Line Number] ,\r\n\tLEFT(jl.[DESCRIPTION],200) AS [Line Description] ,\r\n\tjh.[CURRENCY_CODE] AS [Currency] ,\r\n\tgl.[CURRENCY_CODE] AS [Entity Currency (EC)] ,\r\n\tCASE WHEN CAST(ACCOUNTED_AMOUNT AS MONEY) > 0 THEN 'D' \r\n\t\t WHEN CAST(ACCOUNTED_AMOUNT AS MONEY) < 0 THEN 'C' \r\n\t\t WHEN CAST(ACCOUNTED_AMOUNT AS MONEY) = 0 AND CAST(ENTERED_AMOUNT AS MONEY) > 0 THEN 'D' \r\n\t\t WHEN CAST(ACCOUNTED_AMOUNT AS MONEY) = 0 AND CAST(ENTERED_AMOUNT AS MONEY) < 0 THEN 'C' ELSE 'D' END AS [DC Indicator], \r\n\tCAST(ENTERED_AMOUNT AS MONEY) AS [Signed Journal Amount], \r\n\tCASE WHEN CAST(ENTERED_AMOUNT AS MONEY) >= 0 THEN     CAST(ENTERED_AMOUNT AS MONEY) ELSE 0 END AS [Unsigned Debit Amount], \r\n\tCASE WHEN CAST(ENTERED_AMOUNT AS MONEY)  < 0 THEN ABS(CAST(ENTERED_AMOUNT AS MONEY)) ELSE 0 END AS [Unsigned Credit Amount], \r\n\tCAST(ACCOUNTED_AMOUNT AS MONEY) AS [Signed Amount EC], \r\n\tCASE WHEN CAST(ACCOUNTED_AMOUNT AS MONEY) >= 0 THEN     CAST(ACCOUNTED_AMOUNT AS MONEY) ELSE 0 END AS [Unsigned Debit Amount EC],\r\n\tCASE WHEN CAST(ACCOUNTED_AMOUNT AS MONEY)  < 0 THEN ABS(CAST(ACCOUNTED_AMOUNT AS MONEY)) ELSE 0 END AS [Unsigned Credit Amount EC], \r\n\tgcc.SEGMENT3 AS [Account Number] ,\r\n\ta.[DESCRIPTION] AS [Account Description] ,\r\n\tCASE \r\n\t\tWHEN gcc.SEGMENT3 IN ('111110','111114','111108','111112') THEN 'Cash and overdrafts' \r\n\t\tWHEN gcc.SEGMENT3 IN ('122003','122005') THEN 'Other Debtors & Prepayments' \r\n\t\tWHEN gcc.SEGMENT3 IN ('131003','133006','133012','133014','133027','135001','135005','135009') THEN 'Stock' \r\n\t\tWHEN gcc.SEGMENT3 IN ('212999','231003','231004') THEN 'Other Creditors' \r\n\t\tWHEN gcc.SEGMENT3 IN ('311002','311003') THEN 'Share Capital & Reserves#5' \r\n\t\tWHEN gcc.SEGMENT3 IN ('414002') THEN 'Revenue' \r\n\t\tELSE  fr.[AccountDesc#5] \r\n\tEND AS [Account Category] ,\r\n\t'All' AS [Controlling Area for Cost and Profit Centre] ,\r\n\tgcc.SEGMENT2 AS [Cost Centre] ,\r\n\tc.[DESCRIPTION] AS [Cost Centre Description] , \r\n\tgcc.SEGMENT2 AS [Profit Centre] ,\r\n\tp.[DESCRIPTION] AS [Profit Centre Description] ,\r\n\tRIGHT(CONVERT(VARCHAR(10),CAST(LEFT(jh.DEFAULT_EFFECTIVE_DATE,10) AS DATE),103),4) AS [Year] ,\r\n\tDATENAME(MONTH,CONCAT(RIGHT(CONVERT(VARCHAR(10),CAST(LEFT(jh.DEFAULT_EFFECTIVE_DATE,10) AS DATE),103),4),'-',CASE WHEN gp.PERIOD_NUM = '13' THEN '12' ELSE RIGHT(CONCAT('0',gp.PERIOD_NUM),2) END,'-01')) \r\n\t\t+ ' ' + RIGHT(CONVERT(VARCHAR(10),CAST(LEFT(jh.DEFAULT_EFFECTIVE_DATE,10) AS DATE),103),4) AS [Date]\r\n\tINTO\t\t#GL_PY\r\n\tFROM\t\tCore.GL_JE_Lines jl\r\n\tLEFT JOIN\t[RAW].[O.GL_JE_HEADERS] jh ON jh.JE_HEADER_ID = jl.JE_HEADER_ID\r\n\tLEFT JOIN\t[RAW].[O.GL_JE_BATCHES] jb ON jh.JE_BATCH_ID = jb.JE_BATCH_ID\r\n\tLEFT JOIN\t[RAW].[O.GL_CODE_COMBINATIONS] gcc ON jl.CODE_COMBINATION_ID = gcc.CODE_COMBINATION_ID\r\n\tLEFT JOIN\t[RAW].[O.GL_LEDGERS] gl ON gl.LEDGER_ID = jl.LEDGER_ID\r\n\tLEFT JOIN\t[RAW].[O.GL_PERIODS] gp ON gp.PERIOD_NAME = jl.PERIOD_NAME AND gp.PERIOD_SET_NAME = gl.PERIOD_SET_NAME\r\n\tLEFT JOIN\t[RAW].[O.GL_JE_SOURCES_TL] js ON js.JE_SOURCE_NAME = jh.JE_SOURCE AND js.LANGUAGE = 'US'\r\n\tLEFT JOIN\tCore.GL_Descriptions e ON e.FLEX_VALUE = gcc.SEGMENT1 AND e.VALUE_CATEGORY = 'Company Argent'\r\n\tLEFT JOIN\tCore.GL_Descriptions a ON a.FLEX_VALUE = gcc.SEGMENT3 AND a.VALUE_CATEGORY = 'Account Argent'\r\n\tLEFT JOIN\tCore.GL_Descriptions c ON c.FLEX_VALUE = gcc.SEGMENT2 AND c.VALUE_CATEGORY = 'Cost Centre Argent'\r\n\tLEFT JOIN\tCore.GL_Descriptions p ON p.FLEX_VALUE = gcc.SEGMENT2 AND p.VALUE_CATEGORY = 'Cost Centre Argent'\r\n\tLEFT JOIN\t[RAW].[F.FinanceReference] fr ON gcc.[SEGMENT3] = fr.[AccountDesc#9]\r\n\t\r\n\tWHERE\tjl.STATUS = 'P'\r\n\tAND\t\tREPLACE(jb.ACTUAL_FLAG,'|','') = 'A'\r\n\tAND\t\tISNULL(jh.CURRENCY_CODE, gl.[CURRENCY_CODE]) <> 'STAT'\r\n\tAND \tgcc.SUMMARY_FLAG = 'N'\r\n\tAND\t\tYEAR(CAST(GETDATE() AS DATE)) - 1 = CONCAT('20',RIGHT(jl.[PERIOD_NAME],2))\r\n\r\n\r\n\r\n\tSELECT\t\tgl.*\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'EUR'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Signed Amount EC]/[Rate_P&L],[Signed Amount EC]/[Rate_BS])\r\n\t\t\t\t\tELSE [Signed Amount EC]\r\n\t\t\t\tEND AS [Signed Amount EC GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'EUR'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Unsigned Debit Amount EC]/[Rate_P&L],[Unsigned Debit Amount EC]/[Rate_BS])\r\n\t\t\t\t\tELSE [Unsigned Debit Amount EC]\r\n\t\t\t\tEND AS [Unsigned Debit Amount EC GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'EUR'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Unsigned Credit Amount EC]/[Rate_P&L],[Unsigned Credit Amount EC]/[Rate_BS])\r\n\t\t\t\t\tELSE [Unsigned Credit Amount EC]\r\n\t\t\t\tEND AS [Unsigned Credit Amount EC GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'GBP'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Signed Amount EC]*[Rate_P&L],[Signed Amount EC]*[Rate_BS])\r\n\t\t\t\t\tELSE [Signed Amount EC]\r\n\t\t\t\tEND AS [Signed Amount EC EUR]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'GBP'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Unsigned Debit Amount EC]*[Rate_P&L],[Unsigned Debit Amount EC]*[Rate_BS])\r\n\t\t\t\t\tELSE [Unsigned Debit Amount EC]\r\n\t\t\t\tEND AS [Unsigned Debit Amount EC EUR]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'GBP'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Unsigned Credit Amount EC]*[Rate_P&L],[Unsigned Credit Amount EC]*[Rate_BS])\r\n\t\t\t\t\tELSE [Unsigned Credit Amount EC]\r\n\t\t\t\tEND AS [Unsigned Credit Amount EC EUR]\r\n\t,\t\t\tCONCAT([Journal Number],':',[Line Number]) AS [GL_SL Link]\r\n\t,\t\t\tCONCAT([Entity],':',gl.[Currency],':',[Journal Number],':',[Line Number],':',[Cost Centre],':',gl.[Date]) AS [GL_Transactiion Link]\r\n\t,\t\t\tCONCAT([Entity],':',[Entity Currency (EC)],':',[Account Number],':',[Cost Centre],':',gl.[Date]) AS [GL_Budget Link]\r\n\t,\t\t\tCONCAT([Entity],':',[Entity Currency (EC)],':',[Account Number],':',gl.[Date]) AS [TB_GL Link]\r\n\tINTO\t\tCore.GL_PY\r\n\tFROM\t\t#GL_PY gl\r\n\tLEFT JOIN\t[Finance].[FX_Rates] fx\r\n\tON\t\t\tfx.[Date] = gl.[Date]"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Finance"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-10T13:55:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerArgent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CREATEGL_Script_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CREATEGL3",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SqlServerArgent",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "--------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 3.1\tCreate PY GL\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\tIF OBJECT_ID('tempdb..#GL_CY','U') IS NOT NULL DROP TABLE #GL_CY\r\n\tIF OBJECT_ID('Core.GL_CY','U') IS NOT NULL DROP TABLE Core.GL_CY;\r\n\r\n\tSELECT\t\t\r\n\tgcc.SEGMENT1 AS [Entity] ,\r\n\te.DESCRIPTION AS [Company Name] , \r\n\tjh.[JE_HEADER_ID] AS [Journal Number] ,\r\n\tCONVERT(VARCHAR(10),CAST(LEFT(jh.[CREATION_DATE],10)  AS DATE),103) AS [Date Entered] ,\r\n\tCONVERT(VARCHAR(10),CAST(SUBSTRING(jh.[CREATION_DATE],12,8)  AS TIME),108) AS [Time Entered] ,\r\n\tCONVERT(VARCHAR(10),CAST(LEFT(jh.LAST_UPDATE_DATE,10) AS DATE),103) AS [Date Updated] ,\r\n\tCONVERT(VARCHAR(10),CAST(SUBSTRING(jh.LAST_UPDATE_DATE,12,8) AS TIME),108) AS [Time Updated] ,\r\n\tjl.[CREATED_BY] AS [User Entered] ,\r\n\tjl.[LAST_UPDATED_BY] AS [User Updated] ,\r\n\tCONVERT(VARCHAR(10),CAST(LEFT(jh.DEFAULT_EFFECTIVE_DATE,10) AS DATE),103) AS [Date Effective],\r\n\tCONVERT(VARCHAR(10),CAST(LEFT(jh.DEFAULT_EFFECTIVE_DATE,10) AS DATE),103) as [Date of Journal],\r\n\tCASE WHEN gp.PERIOD_NUM = '13' THEN '12' ELSE RIGHT(CONCAT('0',gp.PERIOD_NUM),2) END AS [Financial Period] ,\r\n\tjh.[JE_source]\tAS [Journal Type] ,\r\n\tjs.[DESCRIPTION] AS [Journal Type Description] ,\r\n\tLEFT(jh.[DESCRIPTION],200) AS [Journal Description] ,\r\n\tjl.[JE_LINE_NUM] AS [Line Number] ,\r\n\tLEFT(jl.[DESCRIPTION],200) AS [Line Description] ,\r\n\tjh.[CURRENCY_CODE] AS [Currency] ,\r\n\tgl.[CURRENCY_CODE] AS [Entity Currency (EC)] ,\r\n\tCASE WHEN CAST(ACCOUNTED_AMOUNT AS MONEY) > 0 THEN 'D' \r\n\t\t WHEN CAST(ACCOUNTED_AMOUNT AS MONEY) < 0 THEN 'C' \r\n\t\t WHEN CAST(ACCOUNTED_AMOUNT AS MONEY) = 0 AND CAST(ENTERED_AMOUNT AS MONEY) > 0 THEN 'D' \r\n\t\t WHEN CAST(ACCOUNTED_AMOUNT AS MONEY) = 0 AND CAST(ENTERED_AMOUNT AS MONEY) < 0 THEN 'C' ELSE 'D' END AS [DC Indicator], \r\n\tCAST(ENTERED_AMOUNT AS MONEY) AS [Signed Journal Amount], \r\n\tCASE WHEN CAST(ENTERED_AMOUNT AS MONEY) >= 0 THEN     CAST(ENTERED_AMOUNT AS MONEY) ELSE 0 END AS [Unsigned Debit Amount], \r\n\tCASE WHEN CAST(ENTERED_AMOUNT AS MONEY)  < 0 THEN ABS(CAST(ENTERED_AMOUNT AS MONEY)) ELSE 0 END AS [Unsigned Credit Amount], \r\n\tCAST(ACCOUNTED_AMOUNT AS MONEY) AS [Signed Amount EC], \r\n\tCASE WHEN CAST(ACCOUNTED_AMOUNT AS MONEY) >= 0 THEN     CAST(ACCOUNTED_AMOUNT AS MONEY) ELSE 0 END AS [Unsigned Debit Amount EC],\r\n\tCASE WHEN CAST(ACCOUNTED_AMOUNT AS MONEY)  < 0 THEN ABS(CAST(ACCOUNTED_AMOUNT AS MONEY)) ELSE 0 END AS [Unsigned Credit Amount EC], \r\n\tgcc.SEGMENT3 AS [Account Number] ,\r\n\ta.[DESCRIPTION] AS [Account Description] ,\r\n\tCASE \r\n\t\tWHEN gcc.SEGMENT3 IN ('111110','111114','111108','111112') THEN 'Cash and overdrafts' \r\n\t\tWHEN gcc.SEGMENT3 IN ('122003','122005') THEN 'Other Debtors & Prepayments' \r\n\t\tWHEN gcc.SEGMENT3 IN ('131003','133006','133012','133014','133027','135001','135005','135009') THEN 'Stock' \r\n\t\tWHEN gcc.SEGMENT3 IN ('212999','231003','231004') THEN 'Other Creditors' \r\n\t\tWHEN gcc.SEGMENT3 IN ('311002','311003') THEN 'Share Capital & Reserves#5' \r\n\t\tWHEN gcc.SEGMENT3 IN ('414002') THEN 'Revenue' \r\n\t\tELSE  fr.[AccountDesc#5] \r\n\tEND AS [Account Category] ,\r\n\t'All' AS [Controlling Area for Cost and Profit Centre] ,\r\n\tgcc.SEGMENT2 AS [Cost Centre] ,\r\n\tc.[DESCRIPTION] AS [Cost Centre Description] , \r\n\tgcc.SEGMENT2 AS [Profit Centre] ,\r\n\tp.[DESCRIPTION] AS [Profit Centre Description] ,\r\n\tRIGHT(CONVERT(VARCHAR(10),CAST(LEFT(jh.DEFAULT_EFFECTIVE_DATE,10) AS DATE),103),4) AS [Year] ,\r\n\tDATENAME(MONTH,CONCAT(RIGHT(CONVERT(VARCHAR(10),CAST(LEFT(jh.DEFAULT_EFFECTIVE_DATE,10) AS DATE),103),4),'-',CASE WHEN gp.PERIOD_NUM = '13' THEN '12' ELSE RIGHT(CONCAT('0',gp.PERIOD_NUM),2) END,'-01')) \r\n\t\t+ ' ' + RIGHT(CONVERT(VARCHAR(10),CAST(LEFT(jh.DEFAULT_EFFECTIVE_DATE,10) AS DATE),103),4) AS [Date]\r\n\tINTO\t\t#GL_CY\r\n\tFROM\t\tCore.GL_JE_Lines jl\r\n\tLEFT JOIN\t[RAW].[O.GL_JE_HEADERS] jh ON jh.JE_HEADER_ID = jl.JE_HEADER_ID\r\n\tLEFT JOIN\t[RAW].[O.GL_JE_BATCHES] jb ON jh.JE_BATCH_ID = jb.JE_BATCH_ID\r\n\tLEFT JOIN\t[RAW].[O.GL_CODE_COMBINATIONS] gcc ON jl.CODE_COMBINATION_ID = gcc.CODE_COMBINATION_ID\r\n\tLEFT JOIN\t[RAW].[O.GL_LEDGERS] gl ON gl.LEDGER_ID = jl.LEDGER_ID\r\n\tLEFT JOIN\t[RAW].[O.GL_PERIODS] gp ON gp.PERIOD_NAME = jl.PERIOD_NAME AND gp.PERIOD_SET_NAME = gl.PERIOD_SET_NAME\r\n\tLEFT JOIN\t[RAW].[O.GL_JE_SOURCES_TL] js ON js.JE_SOURCE_NAME = jh.JE_SOURCE AND js.LANGUAGE = 'US'\r\n\tLEFT JOIN\tCore.GL_Descriptions e ON e.FLEX_VALUE = gcc.SEGMENT1 AND e.VALUE_CATEGORY = 'Company Argent'\r\n\tLEFT JOIN\tCore.GL_Descriptions a ON a.FLEX_VALUE = gcc.SEGMENT3 AND a.VALUE_CATEGORY = 'Account Argent'\r\n\tLEFT JOIN\tCore.GL_Descriptions c ON c.FLEX_VALUE = gcc.SEGMENT2 AND c.VALUE_CATEGORY = 'Cost Centre Argent'\r\n\tLEFT JOIN\tCore.GL_Descriptions p ON p.FLEX_VALUE = gcc.SEGMENT2 AND p.VALUE_CATEGORY = 'Cost Centre Argent'\r\n\tLEFT JOIN\t[RAW].[F.FinanceReference] fr ON gcc.[SEGMENT3] = fr.[AccountDesc#9]\r\n\t\r\n\tWHERE\tjl.STATUS = 'P'\r\n\tAND\t\tREPLACE(jb.ACTUAL_FLAG,'|','') = 'A'\r\n\tAND\t\tISNULL(jh.CURRENCY_CODE, gl.[CURRENCY_CODE]) <> 'STAT'\r\n\tAND \tgcc.SUMMARY_FLAG = 'N'\r\n\tAND\t\tYEAR(CAST(GETDATE() AS DATE)) = CONCAT('20',RIGHT(jl.[PERIOD_NAME],2))\r\n\r\n\r\n\r\n\tSELECT\t\tgl.*\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'EUR'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Signed Amount EC]/[Rate_P&L],[Signed Amount EC]/[Rate_BS])\r\n\t\t\t\t\tELSE [Signed Amount EC]\r\n\t\t\t\tEND AS [Signed Amount EC GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'EUR'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Unsigned Debit Amount EC]/[Rate_P&L],[Unsigned Debit Amount EC]/[Rate_BS])\r\n\t\t\t\t\tELSE [Unsigned Debit Amount EC]\r\n\t\t\t\tEND AS [Unsigned Debit Amount EC GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'EUR'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Unsigned Credit Amount EC]/[Rate_P&L],[Unsigned Credit Amount EC]/[Rate_BS])\r\n\t\t\t\t\tELSE [Unsigned Credit Amount EC]\r\n\t\t\t\tEND AS [Unsigned Credit Amount EC GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'GBP'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Signed Amount EC]*[Rate_P&L],[Signed Amount EC]*[Rate_BS])\r\n\t\t\t\t\tELSE [Signed Amount EC]\r\n\t\t\t\tEND AS [Signed Amount EC EUR]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'GBP'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Unsigned Debit Amount EC]*[Rate_P&L],[Unsigned Debit Amount EC]*[Rate_BS])\r\n\t\t\t\t\tELSE [Unsigned Debit Amount EC]\r\n\t\t\t\tEND AS [Unsigned Debit Amount EC EUR]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'GBP'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Unsigned Credit Amount EC]*[Rate_P&L],[Unsigned Credit Amount EC]*[Rate_BS])\r\n\t\t\t\t\tELSE [Unsigned Credit Amount EC]\r\n\t\t\t\tEND AS [Unsigned Credit Amount EC EUR]\r\n\t,\t\t\tCONCAT([Journal Number],':',[Line Number]) AS [GL_SL Link]\r\n\t,\t\t\tCONCAT([Entity],':',gl.[Currency],':',[Journal Number],':',[Line Number],':',[Cost Centre],':',gl.[Date]) AS [GL_Transactiion Link]\r\n\t,\t\t\tCONCAT([Entity],':',[Entity Currency (EC)],':',[Account Number],':',[Cost Centre],':',gl.[Date]) AS [GL_Budget Link]\r\n\t,\t\t\tCONCAT([Entity],':',[Entity Currency (EC)],':',[Account Number],':',gl.[Date]) AS [TB_GL Link]\r\n\tINTO\t\tCore.GL_CY\r\n\tFROM\t\t#GL_CY gl\r\n\tLEFT JOIN\t[Finance].[FX_Rates] fx\r\n\tON\t\t\tfx.[Date] = gl.[Date]"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Finance"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-10T13:55:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerArgent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CREATE_TB_Rec')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CREATE_TB_Rec",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SqlServerArgent",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 4.1\tCOMBINE CY AND PY GL\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t\r\n\tIF OBJECT_ID('Finance.GL','U') IS NOT NULL DROP TABLE Finance.GL;\r\n\tSELECT\t\t*\r\n\tINTO\t\tFinance.GL\r\n\tFROM\t\tCore.GL_CY\r\n\tUNION ALL\r\n\tSELECT\t\t*\r\n\tFROM\t\tCore.GL_PY\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 4.2\tCREATE TB PRE-ADJUSTMENT TABLE\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\tIF OBJECT_ID('tempdb..#WIP_TB','U') IS NOT NULL DROP TABLE #WIP_TB;\r\n\tSELECT\t\tgcc.SEGMENT1 AS [Entity] ,\r\n\t\t\t\te.[DESCRIPTION] AS [Company Name] ,\r\n\t\t\t\tgl.CURRENCY_CODE AS [Entity Currency (EC)],\r\n\t\t\t\tglb.PERIOD_YEAR AS [Financial Year],\r\n\t\t\t\tgcc.SEGMENT3 AS [Account Number] ,\r\n\t\t\t\ta.[DESCRIPTION] AS [Account Description] ,\r\n\t\t\t\tCASE \r\n\t\t\t\t\tWHEN gcc.SEGMENT3 IN ('111110','111114','111108','111112') THEN 'Cash and overdrafts' \r\n\t\t\t\t\tWHEN gcc.SEGMENT3 IN ('122003','122005') THEN 'Other Debtors & Prepayments' \r\n\t\t\t\t\tWHEN gcc.SEGMENT3 IN ('131003','133006','133012','133014','133027','135001','135005','135009') THEN 'Stock' \r\n\t\t\t\t\tWHEN gcc.SEGMENT3 IN ('212999','231003','231004') THEN 'Other Creditors' \r\n\t\t\t\t\tWHEN gcc.SEGMENT3 IN ('311002','311003') THEN 'Share Capital & Reserves#5' \r\n\t\t\t\t\tWHEN gcc.SEGMENT3 IN ('414002') THEN 'Revenue' \r\n\t\t\t\t\tELSE  fr.[AccountDesc#5] \r\n\t\t\t\tEND AS [Account Category],\r\n\t\t\t\tRIGHT(CONCAT('0',glb.PERIOD_NUM),2) AS [Financial Period] ,\r\n\t\t\t\tglb.PERIOD_NUM ,\r\n\t\t\t\tgp.END_DATE\t,\r\n\t\t\t\tgl.PERIOD_SET_NAME,\r\n\t\t\t\tglb.PERIOD_TYPE ,\r\n\t\t\t\tCAST(ISNULL(glb.BEGIN_BALANCE_DR,0) AS DECIMAL(28,2)) - CAST(ISNULL(glb.BEGIN_BALANCE_CR,0) AS DECIMAL(28,2)) AS [Period Opening Balance EC] ,\r\n\t\t\t\tCAST(ISNULL(glb.PERIOD_NET_DR,0) AS DECIMAL(28,2)) AS [Debit EC] ,\r\n\t\t\t\tCAST(ISNULL(glb.PERIOD_NET_CR,0) AS DECIMAL(28,2)) AS [Credit EC] ,\r\n\t\t\t\tCAST(ISNULL(glb.PERIOD_NET_DR,0) AS DECIMAL(28,2)) - CAST(ISNULL(glb.PERIOD_NET_CR,0) AS DECIMAL(28,2)) AS [Movement EC],\r\n\t\t\t\t(CAST(ISNULL(glb.PERIOD_NET_DR,0) AS DECIMAL(28,2)) - CAST(ISNULL(glb.PERIOD_NET_CR,0) AS DECIMAL(28,2))) + (CAST(ISNULL(glb.BEGIN_BALANCE_DR,0) AS DECIMAL(28,2)) - CAST(ISNULL(glb.BEGIN_BALANCE_CR,0) AS DECIMAL(28,2))) AS [Period Closing Balance EC]\r\n\tINTO\t\t#WIP_TB\r\n\tFROM\t\t[RAW].[O.GL_BALANCES] glb\r\n\tLEFT JOIN\t[RAW].[O.GL_CODE_COMBINATIONS] gcc ON glb.CODE_COMBINATION_ID = gcc.CODE_COMBINATION_ID\r\n\tLEFT JOIN\t[RAW].[O.GL_LEDGERS] gl ON gl.LEDGER_ID = glb.LEDGER_ID \r\n\tLEFT JOIN\t[RAW].[O.GL_PERIODS] gp ON gp.PERIOD_NAME = glb.PERIOD_NAME AND gp.PERIOD_SET_NAME = gl.PERIOD_SET_NAME \r\n\tLEFT JOIN\tCore.GL_Descriptions e ON e.FLEX_VALUE = gcc.SEGMENT1 AND e.VALUE_CATEGORY = 'Company Argent'\r\n\tLEFT JOIN\tCore.GL_Descriptions a ON a.FLEX_VALUE = gcc.SEGMENT3 AND a.VALUE_CATEGORY = 'Account Argent'\r\n\tLEFT JOIN\t[RAW].[F.FinanceReference] fr ON gcc.[SEGMENT3] = fr.[AccountDesc#9]\r\n\tWHERE\t\tREPLACE(glb.ACTUAL_FLAG,'|','') = 'A'\r\n\tAND\t\t\tglb.CURRENCY_CODE = gl.CURRENCY_CODE\r\n\tAND \t\tgcc.SUMMARY_FLAG = 'N'\r\n\tAND\t\t\tglb.PERIOD_YEAR  >= YEAR(CAST(GETDATE() AS DATE)) - 1\r\n\r\n\tIF OBJECT_ID('Finance.TB_PreAdjustments','U') IS NOT NULL DROP TABLE Finance.TB_PreAdjustments;\r\n\t;WITH a AS (\t\r\n\tSELECT MIN(gp.PERIOD_NUM) AS [Min Period], MAX(gp.PERIOD_NUM) AS [Max Period], gb.PERIOD_TYPE, gp.PERIOD_SET_NAME, gp.END_DATE, gp.QUARTER_NUM\r\n\tFROM [RAW].[O.GL_PERIODS] gp LEFT JOIN (SELECT DISTINCT PERIOD_TYPE, PERIOD_NUM, PERIOD_SET_NAME, END_DATE FROM #WIP_TB) gb\r\n\tON gb.PERIOD_NUM = gp.PERIOD_NUM AND gb.PERIOD_TYPE = gp.PERIOD_TYPE AND gb.END_DATE = gp.END_DATE\r\n\tWHERE gb.PERIOD_NUM IS NOT NULL\r\n\tGROUP BY gb.PERIOD_TYPE, gp.PERIOD_SET_NAME,gp.END_DATE, gp.QUARTER_NUM\r\n\t)\r\n\tSELECT \tt.[Entity] , \r\n\t\t\tt.[Company Name] , \r\n\t\t\tt.[Entity Currency (EC)] AS [Entity Currency (EC)], \r\n\t\t\tt.[Financial Year] , \r\n\t\t\t[Account Number] , \r\n\t\t\tMAX(LTRIM(RTRIM([Account Description]))) AS [Account Description] , \r\n\t\t\tMAX(LTRIM(RTRIM([Account Category]))) AS [Account Category] , \r\n\t\t\t--[Spotlight Type] , \r\n\t\t\tCAST(a.[Min Period] AS INT) AS [Financial Period] ,\r\n\t\t\tSUM(CASE WHEN CAST([Min Period] AS INT) <> CAST(t.[Financial Period] AS INT) THEN 0 ELSE CAST(t.[Period Opening Balance EC] AS MONEY) END) AS [Period Opening Balance EC],\r\n\t\t\tSUM(CAST(t.[Debit EC] AS MONEY)) AS [Debit EC], \r\n\t\t\tSUM(CAST(t.[Credit EC] AS MONEY)) AS [Credit EC],\r\n\t\t\tSUM(CAST(t.[Movement EC] AS MONEY)) AS [Movement EC],\r\n\t\t\tSUM(CASE WHEN CAST([Max Period] AS INT) <> CAST(t.[Financial Period] AS INT) THEN 0 ELSE CAST( t.[Period Closing Balance EC] AS MONEY) END) AS [Period Closing Balance EC]\r\n\tINTO\tFinance.TB_PreAdjustments\r\n\tFROM \t#WIP_TB t \r\n\tLEFT JOIN a ON a.PERIOD_SET_NAME = t.PERIOD_SET_NAME AND a.PERIOD_TYPE = t.PERIOD_TYPE AND a.END_DATE = t.END_DATE \r\n\tGROUP BY CAST(a.[Min Period] AS INT), t.Entity, t.[Company Name], t.[Entity Currency (EC)], t.[Financial Year], t.[Account Number]\r\n\tORDER BY CAST(a.[Min Period] AS INT) \r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 4.3\tCREATE TB WITH ADJUSTMENTS\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\tIF OBJECT_ID('tempdb..#FinanceTB','U') IS NOT NULL DROP TABLE #FinanceTB\r\n\tIF OBJECT_ID('Finance.TB','U') IS NOT NULL DROP TABLE Finance.TB;\r\n\r\n\tSELECT\t\ttb.[Entity]\r\n\t,\t\t\ttb.[Company Name]\r\n\t,\t\t\ttb.[Entity Currency (EC)]\r\n\t,\t\t\ttb.[Financial Year]\r\n\t,\t\t\ttb.[Account Number]\r\n\t,\t\t\ttb.[Account Description]\r\n\t,\t\t\ttb.[Account Category]\r\n\t,\t\t\ttb.[Financial Period]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN tb.[Financial Period] > 5 AND tb.[Entity] = '331' AND [Account Number] = '211003' AND tb.[Financial Year] = '2022'\r\n\t\t\t\t\t\tTHEN [Period Opening Balance EC] + 572105707.69 - 702.88\r\n\t\t\t\t\tWHEN tb.[Entity] = '331' AND [Account Number] = '211003' AND tb.[Financial Year] > '2022'\r\n\t\t\t\t\t\tTHEN [Period Opening Balance EC] + 572105707.69 - 702.88\r\n\t\t\t\t\tELSE [Period Opening Balance EC]\r\n\t\t\t\tEND + CASE\r\n\t\t\t\t\t  \tWHEN [Account Number] = '133025'\r\n\t\t\t\t\t  \t\tTHEN CAST(ISNULL(git_open.[Adjustment],0) AS MONEY)\r\n\t\t\t\t\t  \tELSE (-1)*CAST(ISNULL(git_open.[Adjustment],0) AS MONEY)\r\n\t\t\t\t\t  END AS [Period Opening Balance EC]\r\n\t,\t\t\t[Debit EC] + CAST(ISNULL(git.[Adjustment],0) AS MONEY) AS [Debit EC]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN tb.[Financial Period] = 5 AND tb.[Entity] = '331' AND [Account Number] = '211003' AND tb.[Financial Year] = '2022'\r\n\t\t\t\t\t\tTHEN [Credit EC] - 572105707.69 - 702.88\r\n\t\t\t\t\tELSE [Credit EC]\r\n\t\t\t\tEND + CAST(ISNULL(git.[Adjustment],0) AS MONEY) AS [Credit EC]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN tb.[Financial Period] = 5 AND tb.[Entity] = '331' AND [Account Number] = '211003' AND tb.[Financial Year] = '2022'\r\n\t\t\t\t\t\tTHEN [Movement EC] + 572105707.69 - 702.88\r\n\t\t\t\t\tWHEN [Account Number] IN ('133025','122001')\r\n\t\t\t\t\t\tTHEN [Period Closing Balance EC] +\tCASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN [Account Number] = '133025'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN CAST(ISNULL(git.[Adjustment],0) AS MONEY)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE (-1)*CAST(ISNULL(git.[Adjustment],0) AS MONEY)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND \r\n\t\t\t\t\t\t\t- ([Period Opening Balance EC]+ CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN [Account Number] = '133025'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN CAST(ISNULL(git_open.[Adjustment],0) AS MONEY)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE (-1)*CAST(ISNULL(git_open.[Adjustment],0) AS MONEY)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND)\r\n\t\t\t\t\tELSE [Movement EC]\r\n\t\t\t\tEND AS [Movement EC]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN tb.[Financial Period] >= 5 AND tb.[Entity] = '331' AND [Account Number] = '211003' AND tb.[Financial Year] = '2022'\r\n\t\t\t\t\t\tTHEN [Period Closing Balance EC] + 572105707.69 - 702.88\r\n\t\t\t\t\tWHEN tb.[Entity] = '331' AND [Account Number] = '211003' AND tb.[Financial Year] > '2022'\r\n\t\t\t\t\t\tTHEN [Period Closing Balance EC] + 572105707.69 - 702.88\r\n\t\t\t\t\tELSE [Period Closing Balance EC]\r\n\t\t\t\tEND + CASE\r\n\t\t\t\t\t  \tWHEN [Account Number] = '133025'\r\n\t\t\t\t\t  \t\tTHEN CAST(ISNULL(git.[Adjustment],0) AS MONEY)\r\n\t\t\t\t\t  \tELSE (-1)*CAST(ISNULL(git.[Adjustment],0) AS MONEY)\r\n\t\t\t\t\t  END AS [Period Closing Balance EC]\r\n\t,\t\t\tCASE \r\n\t\t\t\t\tWHEN [Account Category] = 'Revenue' AND  LEFT([Account Description],12) IN ('Intercompany','Intracompany') THEN '1'\r\n\t\t\t\t\tWHEN [Account Category] = 'Cost of sales' AND  [Account Description] NOT LIKE 'Cost of sales%' THEN '1'\r\n\t\t\t\t\tELSE '0'\r\n\t\t\t\tEND AS [Internal Account Flag]\r\n\t,\t\t\tDATENAME(MONTH,CONCAT(tb.[Financial Year],'-',tb.[Financial Period],'-01')) + ' ' + tb.[Financial Year] AS [Date]\r\n\tINTO\t\t#FinanceTB\r\n\tFROM\t\tFinance.TB_PreAdjustments tb\r\n\tLEFT JOIN\t[RAW].[GIT_Adjustments_Template] git\r\n\tON\t\t\ttb.[Entity] = git.[Entity]\r\n\tAND\t\t\ttb.[Financial Year] = git.[Financial year]\r\n\tAND\t\t\ttb.[Financial Period] = git.[Financial Period]\r\n\tAND\t\t\t[Account Number] IN ('133025','122001')\r\n\tLEFT JOIN\t[RAW].[GIT_Adjustments_Template] git_open\r\n\tON\t\t\ttb.[Entity] = git_open.[Entity]\r\n\tAND\t\t\ttb.[Financial Year] = CASE WHEN tb.[Financial Period] = 12 THEN CAST(git_open.[Financial Year] AS INT) + 1 ELSE git_open.[Financial Year] END \r\n\tAND\t\t\ttb.[Financial Period] = CASE WHEN tb.[Financial Period] = 12 THEN CAST(git_open.[Financial Period] AS INT) + 1 ELSE git_open.[Financial Period] + 1 END\r\n\tAND\t\t\t[Account Number] IN ('133025','122001')\r\n\r\n\tSELECT\t\ttb.*\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'EUR'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Period Opening Balance EC]/[Rate_P&L],[Period Opening Balance EC]/[Rate_BS])\r\n\t\t\t\t\tELSE [Period Opening Balance EC]\r\n\t\t\t\tEND AS [Period Opening Balkance (EC) GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'EUR'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Debit EC]/[Rate_P&L],[Debit EC]/[Rate_BS])\r\n\t\t\t\t\tELSE [Period Opening Balance EC]\r\n\t\t\t\tEND AS [Debit EC GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'EUR'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Credit EC]/[Rate_P&L],[Credit EC]/[Rate_BS])\r\n\t\t\t\t\tELSE [Period Opening Balance EC]\r\n\t\t\t\tEND AS [Credit EC GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'EUR'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Movement EC]/[Rate_P&L],[Movement EC]/[Rate_BS])\r\n\t\t\t\t\tELSE [Movement EC]\r\n\t\t\t\tEND AS [Movement EC GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'EUR'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Period Closing Balance EC]*[Rate_P&L],[Period Closing Balance EC]*[Rate_BS])\r\n\t\t\t\t\tELSE [Period Opening Balance EC]\r\n\t\t\t\tEND AS [Period Closing Balance (EC) GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'GBP'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Period Opening Balance EC]*[Rate_P&L],[Period Opening Balance EC]*[Rate_BS])\r\n\t\t\t\t\tELSE [Period Opening Balance EC]\r\n\t\t\t\tEND AS [Period Opening Balkance (EC) EUR]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'GBP'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Debit EC]*[Rate_P&L],[Debit EC]*[Rate_BS])\r\n\t\t\t\t\tELSE [Period Opening Balance EC]\r\n\t\t\t\tEND AS [Debit EC EUR]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'GBP'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Credit EC]*[Rate_P&L],[Credit EC]*[Rate_BS])\r\n\t\t\t\t\tELSE [Period Opening Balance EC]\r\n\t\t\t\tEND AS [Credit EC EUR]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'GBP'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Movement EC]*[Rate_P&L],[Movement EC]*[Rate_BS])\r\n\t\t\t\t\tELSE [Movement EC]\r\n\t\t\t\tEND AS [Movement EC EUR]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Entity Currency (EC)] = 'GBP'\r\n\t\t\t\t\t\tTHEN IIF(CAST(LEFT([Account Number],1) AS INT) >= 4,[Period Closing Balance EC]*[Rate_P&L],[Period Closing Balance EC]*[Rate_BS])\r\n\t\t\t\t\tELSE [Period Opening Balance EC]\r\n\t\t\t\tEND AS [Period Closing Balance (EC) EUR]\r\n\t,\t\t\tCONCAT([Entity],':',[Entity Currency (EC)],':',[Account Number],':',tb.[Date]) AS [TB_GL Link]\r\n\tINTO\t\t[Finance].[TB]\r\n\tFROM\t\t#FinanceTB tb\r\n\tLEFT JOIN\t[Finance].[FX_Rates] fx\r\n\tON\t\t\tfx.[Date] = tb.[Date]\r\n\r\n\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 4.4\tFILTER OUT INTER ACCOUNTS\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\tIF OBJECT_ID('Finance.TB_Filtered','U') IS NOT NULL DROP TABLE Finance.TB_Filtered;\r\n\tSELECT\t\t*\r\n\tINTO\t\tFinance.TB_Filtered\r\n\tFROM\t\tFinance.TB \r\n\tWHERE\t\tCASE \r\n\t\t\t\t\tWHEN [Account Category] = 'Revenue' AND  LEFT([Account Description],12) IN ('Intercompany','Intracompany') THEN 'Remove'\r\n\t\t\t\t\tWHEN [Account Category] = 'Cost of sales' AND  [Account Description] NOT LIKE 'Cost of sales%' THEN 'Remove'\r\n\t\t\t\t\tELSE 'Keep'\r\n\t\t\t\tEND = 'Keep'\r\n\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 4.5 RECONCILE GL AND TB\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\tIF OBJECT_ID('Finance.Reconciliation','U') IS NOT NULL DROP TABLE Finance.Reconciliation\r\n\t;WITH\t\r\n\tGLPivot AS ( \r\n\tSELECT\t\tRIGHT([Date Effective],4) AS [Financial Year],\r\n\t\t\t\t[Financial Period] ,\r\n\t\t\t\tCAST([Entity] AS NVARCHAR(50)) AS [GL Entity] ,\r\n\t\t\t\t[Account Number] AS [GL Account] ,\t\t\t\t\t\t\r\n\t\t\t\tSUM(CAST([Signed Amount EC] AS MONEY)) AS [GL Movement],\r\n\t\t\t\tCOUNT(1) AS [GL Count]\t\t\t\r\n\tFROM\t\tFinance.GL\r\n\tWHERE\t\tRIGHT([Date Effective],4) >= YEAR(CAST(GETDATE() AS DATE)) - 1\r\n\tGROUP BY\t[Account Number] , CAST([Entity] AS NVARCHAR(50)), [Financial Period], RIGHT([Date Effective],4)\r\n\t), \r\n\tTBPivot AS\t(\r\n\tSELECT\t\t[Financial Year] ,\r\n\t\t\t\t[Financial Period] ,\r\n\t\t\t\tCAST([Entity] AS NVARCHAR(50)) AS [TB Entity] ,\r\n\t\t\t\t[Account Number] AS [TB Account] ,\r\n\t\t\t\t[Account Description] AS [Description] ,\r\n\t\t\t\tSUM(CAST(ISNULL([Period Opening Balance EC],0) AS MONEY)) AS Opening ,\t\t\t\t\t\t\r\n\t\t\t\tSUM(CAST(ISNULL([Period Closing Balance EC],0) AS MONEY)) AS Closing ,\t\t\t\t\t\t\r\n\t\t\t\tSUM(CAST(ISNULL([Period Closing Balance EC],0) AS MONEY)) - SUM(CAST(ISNULL([Period Opening Balance EC],0) AS MONEY)) AS [TB Movement]\r\n\tFROM\t\tFinance.TB_PreAdjustments\r\n\tGROUP BY\t[Account Number] , [Account Description], CAST([Entity] AS NVARCHAR(50)), [Financial Period], [Financial Year]\r\n\t),\r\n\tReconciliation AS (\r\n\tSELECT\t\tCOALESCE(G.[Financial Year],T.[Financial Year]) AS [Financial Year] ,\r\n\t\t\t\tCOALESCE(G.[Financial Period],T.[Financial Period]) AS [Financial Period] , \r\n\t\t\t\tCOALESCE(G.[GL Entity],T.[TB Entity] ) AS [Entity] ,\r\n\t\t\t\tISNULL(G.[GL Account] , 'NOT IN GL') AS [GL Account] , \r\n\t\t\t\tISNULL(G.[GL Movement] , 0) AS [GL Movement] ,\r\n\t\t\t\tISNULL(G.[GL Count], 0) AS [GL Count] ,\r\n\t\t\t\tISNULL(T.[TB Account] , 'NOT IN TB') AS [TB Account] ,\r\n\t\t\t\tISNULL(T.[Description] , '') AS [Description] ,\r\n\t\t\t\tISNULL(T.[Opening] , 0) AS [Opening] ,\r\n\t\t\t\tISNULL(T.[Closing] , 0) AS [Closing] ,\r\n\t\t\t\tISNULL(T.[Closing] , 0) - ISNULL(T.[Opening] , 0) AS [TB Movement] ,\r\n\t\t\t\tISNULL([GL Movement],0)- (ISNULL(T.[Closing] , 0) - ISNULL(T.[Opening] , 0)) AS [Difference]\r\n\tFROM\t\tGLPivot G\r\n\tFULL JOIN\tTBPivot T \r\n\tON\t\t\tG.[GL Account] = T.[TB Account]\r\n\tAND\t\t\tG.[GL Entity] = T.[TB Entity]\r\n\tAND\t\t\tG.[Financial Period] = T.[Financial Period]\r\n\tAND\t\t\tg.[Financial Year] = T.[Financial Year]\r\n\t) \r\n\tSELECT\t\t* \r\n\tINTO\t\tFinance.Reconciliation\r\n\tFROM\t\tReconciliation\r\n\tORDER BY\t[Entity], [TB Account]\r\n\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t-- 4.6 CREATE YTD RECONCILIATION\r\n\t-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\tIF OBJECT_ID('Finance.[ReconcilationYTD]','U') IS NOT NULL DROP TABLE Finance.[ReconcilationYTD]\r\n\tSELECT\t\t[Financial Year]\r\n\t,\t\t\t[Entity]\r\n\t,\t\t\tCASE WHEN [GL Account] = 'NOT IN GL' THEN [TB Account] ELSE [GL Account] END AS [GL Account]\r\n\t,\t\t\tSUM([GL Movement]) AS [GL Movement]\r\n\t,\t\t\tSUM([GL Count]) AS [GL Count]\r\n\t,\t\t\t[TB Account]\r\n\t,\t\t\t[Description] \r\n\t,\t\t\tSUM(CASE WHEN [Financial Period] = '1' THEN [Opening] ELSE 0 END)\t\t\t\tAS [Opening Balance]\r\n\t,\t\t\tSUM(CASE WHEN [Financial Period] = [MaxPeriod] THEN [Closing] ELSE 0 END)\t\tAS [Closing Balance]\r\n\t,\t\t\tSUM(CASE WHEN [Financial Period] = [MaxPeriod] THEN [Closing] ELSE 0 END)\r\n\t\t\t\t\t- SUM(CASE WHEN [Financial Period] = '1' THEN [Opening] ELSE 0 END)\t\t\tAS [TB Movement]\r\n\t,\t\t\tSUM(CASE WHEN [Financial Period] = [MaxPeriod] THEN [Closing] ELSE 0 END)\r\n\t\t\t\t\t- SUM(CASE WHEN [Financial Period] = '1' THEN [Opening] ELSE 0 END)\r\n\t\t\t\t\t - SUM([GL Movement])\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Difference]\r\n\tINTO\t\tFinance.[ReconcilationYTD]\r\n\tFROM\t\t(\r\n\t\t\t\t\tSELECT\t\t*\r\n\t\t\t\t\t,\t\t\tMIN([Financial Period]) OVER (PARTITION BY [Financial Year],[Entity],[TB Account] ) AS [MinPeriod]\r\n\t\t\t\t\t,\t\t\tMAX([Financial Period]) OVER (PARTITION BY [Financial Year],[Entity],[TB Account] ) AS [MaxPeriod]\r\n\t\t\t\t\tFROM\t\tFinance.Reconciliation \r\n\t\t\t\t)r\r\n\tGROUP BY\t[Financial Year]\r\n\t,\t\t\t[Entity]\r\n\t,\t\t\tCASE WHEN [GL Account] = 'NOT IN GL' THEN [TB Account] ELSE [GL Account] END\r\n\t,\t\t\t[TB Account]\r\n\t,\t\t\t[Description] \r\n\tORDER BY\tABS(SUM(CASE WHEN [Financial Period] = [MaxPeriod] THEN [Closing] ELSE 0 END)\r\n\t\t\t\t\t- SUM(CASE WHEN [Financial Period] = '1' THEN [Opening] ELSE 0 END)\r\n\t\t\t\t\t - SUM([GL Movement])) DESC\r\n\r\n\r\n-----------------------------------------------------------------------------------------------------------------------------------------------\r\n-- 4.7\tCreate Entity table\r\n-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t\r\n\tIF OBJECT_ID('[Finance].[EntityDescription]','U') IS NOT NULL DROP TABLE [Finance].[EntityDescription]\r\n\r\n\tSELECT\t\t[Entity]\r\n\t,\t\t\t[Company Name]\r\n\t,\t\t\t[Entity Currency (EC)]\r\n\t,\t\t\tCASE WHEN LEFT([Entity],1) = '3' THEN 'NL' ELSE 'UK' END AS [Country]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN LEFT([Entity],1) = '3' THEN 'Amsterdam'\r\n\t\t\t\t\tWHEN LEFT([Entity],1) = '2' THEN 'Stanlow'\r\n\t\t\t\t\tWHEN LEFT([Entity],1) = '1' THEN 'Motherwell'\r\n\t\t\t\t\tWHEN LEFT([Entity],1) = '9' THEN 'Head Office'\r\n\t\t\t\tEND AS [Location]\r\n\t,\t\t\tCONCAT([Entity],':',[Company Name]) AS [Entity Name]\r\n\tINTO\t\t[Finance].[EntityDescription]\r\n\tFROM\t\t[Finance].[GL]\r\n\tGROUP BY\t[Entity]\r\n\t,\t\t\t[Company Name]\r\n\t,\t\t\t[Entity Currency (EC)]\r\n\t,\t\t\tCASE WHEN LEFT([Entity],1) = '3' THEN 'NL' ELSE 'UK' END\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN LEFT([Entity],1) = '3' THEN 'Amsterdam'\r\n\t\t\t\t\tWHEN LEFT([Entity],1) = '2' THEN 'Stanlow'\r\n\t\t\t\t\tWHEN LEFT([Entity],1) = '1' THEN 'Motherwell'\r\n\t\t\t\t\tWHEN LEFT([Entity],1) = '9' THEN 'Head Office'\r\n\t\t\t\tEND\r\n\t,\t\t\tCONCAT([Entity],':',[Company Name])\r\n\r\n-----------------------------------------------------------------------------------------------------------------------------------------------\r\n-- 4.7\tCreate cost centre table\r\n-----------------------------------------------------------------------------------------------------------------------------------------------\r\n\t\r\n\tIF OBJECT_ID('[Finance].[CostCentre]','U') IS NOT NULL DROP TABLE [Finance].[CostCentre]\r\n\r\n\tSELECT\t\t[Cost Centre]\r\n\t,\t\t\t[Cost Centre Description]\r\n\t,\t\t\tCONCAT([Cost Centre],':',[Cost Centre Description]) AS [Cost Centre Full Description]\r\n\tINTO\t\t[Finance].[CostCentre]\r\n\tFROM\t\t[Finance].[GL]\r\n\tGROUP BY\t[Cost Centre]\r\n\t,\t\t\t[Cost Centre Description]\r\n\t,\t\t\tCONCAT([Cost Centre],':',[Cost Centre Description])\r\n"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Finance"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-09T17:36:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerArgent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_BlendAnalysisCoreScripts')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Finance].[SQL_BlendCoreScripts]"
						},
						"linkedServiceName": {
							"referenceName": "SqlServerArgent",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Finance"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerArgent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_BlendMarginAnalysis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SQL_BlendMargin_TraceabilityLooped",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Finance].[SQL_BlendMargin_TraceabilityLoop]"
						},
						"linkedServiceName": {
							"referenceName": "SqlServerArgent",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SQL_BlendMargin_OrdersAndInvoices",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SQL_BlendMargin_TraceabilityLooped",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Finance].[SQL_BlendMargin_OrdersAndInvoices]"
						},
						"linkedServiceName": {
							"referenceName": "SqlServerArgent",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SQL_BlendMargin_DataMarts",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SQL_BlendMargin_OrdersAndInvoices",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Finance].[SQL_BlendMargin_DataMarts]"
						},
						"linkedServiceName": {
							"referenceName": "SqlServerArgent",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Finance"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-10T11:28:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerArgent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_CurrencyExposure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SQL_CurrencyExposure_CreateContracts",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Finance].[SQL_CurrencyExposure_CreateContracts]"
						},
						"linkedServiceName": {
							"referenceName": "SqlServerArgent",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SQL_CurrencyExposure_DataMarts",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SQL_CurrencyExposure_CreateContracts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Finance].[SQL_CurrencyExposure_DataMarts]"
						},
						"linkedServiceName": {
							"referenceName": "SqlServerArgent",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Finance"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-10T11:42:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerArgent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_Exceptions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExceptionsTables",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SqlServerArgent",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "/*EXCEPTIONS REPORT TABLES*/\r\n\r\n/********************************************************************************************************\r\n\tStep 1.1\tCreate table of sales orders not captured in invoice table\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Finance].[SalesOrdersNotInvoiced]','U') IS NOT NULL\r\n\t\tDROP TABLE [Finance].[SalesOrdersNotInvoiced]\r\n\r\n\tSELECT\t\t*\r\n\tINTO\t\t[Finance].[SalesOrdersNotInvoiced]\r\n\tFROM\t\t[Core].[SalesOrders] so\r\n\tWHERE\t\t[Order Number] NOT IN\t(\r\n\t\t\t\t\t\t\t\t\t\t\t\tSELECT\t\t[Order Number]\r\n\t\t\t\t\t\t\t\t\t\t\t\tFROM\t\t[Core].[SalesOrders] so\r\n\t\t\t\t\t\t\t\t\t\t\t\tLEFT JOIN\t[Core].[ARInvoices] ar\r\n\t\t\t\t\t\t\t\t\t\t\t\tON\t\t\tso.[Order Number] = ar.[SALES_ORDER]\r\n\t\t\t\t\t\t\t\t\t\t\t\tWHERE\t\tar.[SALES_ORDER] IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\t) \r\n\tAND\t\t\t[Order Number] IN\t(\r\n\t\t\t\t\t\t\t\t\t\tSELECT\t[Document Number]\r\n\t\t\t\t\t\t\t\t\t\tFROM\t[Finance].[Traceability]\r\n\t\t\t\t\t\t\t\t\t)\r\n\r\n/********************************************************************************************************\r\n\tStep 1.2\tCreate table of invoices not captured in sales orders table\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Finance].[InvoicesNotInSalesOrders]','U') IS NOT NULL\r\n\t\tDROP TABLE [Finance].[InvoicesNotInSalesOrders]\r\n\r\n\tSELECT\t\t* \r\n\tINTO\t\t[Finance].[InvoicesNotInSalesOrders]\r\n\tFROM\t\tCore.ARInvoices ar\r\n\tWHERE\t\t[SALES_ORDER_LINE] NOT IN\t(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT\t\tDISTINCT [Line ID]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tFROM\t\t[Core].[SalesOrders]\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\r\n/********************************************************************************************************\r\n\tStep 1.3\tCreate an expanded version of the Trade orders and invoices table\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Finance].[ExpandedOrdersAndInvoices]','U') IS NOT NULL\r\n\t\tDROP TABLE [Finance].[ExpandedOrdersAndInvoices]\r\n\r\n\tSELECT\t\t'PO' AS [Source]\r\n\t,\t\t\t[Order Number]\r\n\t,\t\t\t[Parent Order]\r\n\t,\t\t\t[Supplier/Customer]\r\n\t,\t\t\t[Supplier/Customer Number]\r\n\t,\t\t\t[Agreement Number/Sales Contract Number]\r\n\t,\t\t\t[Item Code]\r\n\t,\t\t\t[Item Description]\r\n\t,\t\t\t[Category Code]\r\n\t,\t\t\t[Agreement Price]\r\n\t,\t\t\t[Quantity]\r\n\t,\t\t\t[Invoice Price]\r\n\t,\t\t\t[Invoiced Quantity]\r\n\t,\t\t\t[Invoice Line Amount]\r\n\t,\t\t\t[Currency]\r\n\t,\t\t\t[Business Unit]\r\n\t,\t\t\t[Inventory Organization Code]\r\n\t,\t\t\t[Inventory Organization Name]\r\n\t,\t\t\t[Ordered Quantity]\r\n\t,\t\t\t[Approval Status]\r\n\t,\t\t\t[Mode of Transport]\r\n\t,\t\t\t[Freight Terms]\r\n\t,\t\t\t[Invoice Number]\r\n\t,\t\t\t[Order Status]\r\n\t,\t\t\t[Transaction Date]\r\n\t,\t\t\t[Invoice Amount]\r\n\t,\t\t\t[EUR USD]\r\n\t,\t\t\t[EUR GBP]\r\n\tINTO\t\t[Finance].[ExpandedOrdersAndInvoices]\r\n\tFROM\t\t[Trade].[PurchaseOrdersAndinvoices]\r\n\r\n\tUNION ALL\r\n\r\n\tSELECT\t\t'SO' AS [Source]\r\n\t,\t\t\t[Order Number]\r\n\t,\t\t\t[Parent Order]\r\n\t,\t\t\t'' AS [Supplier/Customer]\r\n\t,\t\t\t'' AS [Supplier/Customer Number]\t\t\r\n\t,\t\t\t'' AS [Agreement Number/Sales Contract Number]\t\r\n\t,\t\t\t[Item Code]\r\n\t,\t\t\t[Item Description]\r\n\t,\t\t\t[Category Code]\r\n\t,\t\t\tNULL AS [Agreement Price]\r\n\t,\t\t\t'' AS [Quantity]\r\n\t,\t\t\t[Invoice Price]\r\n\t,\t\t\t[Invoiced Quantity]\r\n\t,\t\t\t'' AS [Invoice Line Amount]\r\n\t,\t\t\t[Transactional Currency Code] AS [Currency]\r\n\t,\t\t\t[Business Unit Name] AS [Business Unit]\r\n\t,\t\t\t'' AS [Inventory Organization Code]\r\n\t,\t\t\t'' AS [Inventory Organization Name]\r\n\t,\t\t\t'' AS [Ordered Quantity]\r\n\t,\t\t\t'' AS [Approval Status]\r\n\t,\t\t\t'' AS [Mode of Transport]\r\n\t,\t\t\t'' AS [Freight Terms]\r\n\t,\t\t\t'' AS [Invoice Number]\r\n\t,\t\t\t'' AS [Order Status]\r\n\t,\t\t\t[Transaction Date]\r\n\t,\t\t\t[Invoice Amount]\r\n\t,\t\t\t[EUR:USD] AS [EUR USD]\r\n\t,\t\t\t[EUR:GBP] AS [EUR GBP]\r\n\tFROM\t\t[Trade].[SalesOrdersAndInvoices]\r\n\r\n/********************************************************************************************************\r\n\tStep 1.4\tCreate a rec differences table\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Finance].[ReconciliationDifferences]','U') IS NOT NULL\r\n\t\tDROP TABLE [Finance].[ReconciliationDifferences]\r\n\r\n\tSELECT * INTO [Finance].[ReconciliationDifferences] FROM [Finance].[ReconcilationYTD] WHERE [Difference] <> 0\r\n\r\n\r\n/********************************************************************************************************\r\n\tStep 1.5\tCreate a grouped version of the traceability table\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Finance].[TraceabilityGrouped]','U') IS NOT NULL\r\n\t\tDROP TABLE [Finance].[TraceabilityGrouped]\r\n\r\n\r\n\tSELECT\t\tCAST(LEFT([TRANSACTION_DATE],10) AS DATE) AS [Transaction Date]\r\n\t,\t\t\t[Business Unit Name]\r\n\t,\t\t\t[Subinventory]\r\n\t,\t\t\tCASE WHEN [Unit of Measure] = 'LTR' THEN 'TN' ELSE [Unit of Measure] END AS [Unit of Measure]\r\n\t,\t\t\tSUM(CASE WHEN [Unit of Measure] = 'LTR' THEN [Quantity] * 0.0008745 ELSE [Quantity] END) AS [Quantity]\t\t\t\r\n\tINTO\t\t[Finance].[TraceabilityGrouped]\r\n\tFROM\t\t[Finance].[Traceability]\r\n\tGROUP BY\tCAST(LEFT([TRANSACTION_DATE],10) AS DATE)\r\n\t,\t\t\t[Business Unit Name]\r\n\t,\t\t\t[Subinventory]\r\n\t,\t\t\tCASE WHEN [Unit of Measure] = 'LTR' THEN 'TN' ELSE [Unit of Measure] END\r\n\tORDER BY\tCAST(LEFT([TRANSACTION_DATE],10) AS DATE)\r\n\t,\t\t\t[Business Unit Name]\r\n\t,\t\t\t[Subinventory]\r\n\t,\t\t\tCASE WHEN [Unit of Measure] = 'LTR' THEN 'TN' ELSE [Unit of Measure] END\r\n\r\n\r\n/********************************************************************************************************\r\n\tStep 1.5\tCreate a grouped version of the traceability table with a rolling inventory number\r\n********************************************************************************************************/\r\n\r\n\r\n\tIF OBJECT_ID('[Finance].[TraceabilityGroupedRollingInventory]','U') IS NOT NULL\r\n\t\tDROP TABLE [Finance].[TraceabilityGroupedRollingInventory]\r\n\r\n\tSELECT\t\t[Transaction Date]\r\n\t,\t\t\t[Business Unit Name]\r\n\t,\t\t\t[Subinventory]\r\n\t,\t\t\t[Unit of Measure]\r\n\t,\t\t\tSUM(CASE\r\n\t\t\t\t\t\tWHEN [Latest Date Marker] = 'X' THEN ISNULL([Quantity],0)\r\n\t\t\t\t\t\tELSE ISNULL([Quantity],0)*(-1)\r\n\t\t\t\t\tEND) OVER (PARTITION BY [Business Unit Name], [Subinventory], [Unit of Measure] ORDER BY [Transaction Date] DESC) AS [Rolling Total]\r\n\tINTO\t\t[Finance].[TraceabilityGroupedRollingInventory]\r\n\tFROM\t\t(\r\n\r\n\t\t\t\t\tSELECT\t\tCAST(GETDATE() AS DATE) AS [Transaction Date]\r\n\t\t\t\t\t,\t\t\t[Business Unit Name]\r\n\t\t\t\t\t,\t\t\t[Subinventory]\r\n\t\t\t\t\t,\t\t\tCASE WHEN [Transaction UOM Code] = 'LTR' THEN 'TN' ELSE [Transaction UOM Code] END AS [Unit of Measure]\r\n\t\t\t\t\t,\t\t\tSUM(CASE WHEN [Transaction UOM Code] = 'LTR' THEN [Primary Transaction Quantity] * 0.0008745 ELSE [Primary Transaction Quantity] END) AS [Quantity]\t\r\n\t\t\t\t\t,\t\t\t'X' AS [Latest Date Marker]\r\n\t\t\t\t\tFROM\t\t[Core].[OnHandBalance]\r\n\t\t\t\t\tGROUP BY\t[Business Unit Name]\r\n\t\t\t\t\t,\t\t\t[Subinventory]\r\n\t\t\t\t\t,\t\t\tCASE WHEN [Transaction UOM Code] = 'LTR' THEN 'TN' ELSE [Transaction UOM Code] END\r\n\r\n\t\t\t\t\tUNION ALL\r\n\r\n\t\t\t\t\tSELECT\t\t[Transaction Date]\r\n\t\t\t\t\t,\t\t\t[Business Unit Name]\r\n\t\t\t\t\t,\t\t\t[Subinventory]\r\n\t\t\t\t\t,\t\t\t[Unit of Measure]\r\n\t\t\t\t\t,\t\t\t[Quantity]\r\n\t\t\t\t\t,\t\t\t'' AS [Latest Date Marker]\r\n\t\t\t\t\tFROM\t\t[Finance].[TraceabilityGrouped]\r\n\t\t\t\t\tWHERE\t\t[Transaction Date] <> CAST(GETDATE() AS DATE)\r\n\t\t\t\t\tAND\t\t\tCONCAT([Business Unit Name],[Subinventory]) IN (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT\t\tDISTINCT CONCAT([Business Unit Name],[Subinventory])\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM\t\t[Core].[OnHandBalance]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\r\n\t\t\t\t) x"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Finance"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-10T11:05:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerArgent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_Exp_And_Pos_Core_Tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Trade].[SQL_Exp_and_Pos_Core_Tables]"
						},
						"linkedServiceName": {
							"referenceName": "SqlServerArgent",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Trade/Exp and Pos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerArgent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_Exp_And_Pos_Core_Tables_Script')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Exposure And Position Core Tables Script",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SqlServerArgent",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "/*==================================================================================================================*\r\n * Project:\t\tArgent\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n * Purpose:\t\tCreate core tables that will feed in to Exposure and Position data marks\t\t\t\t\t\t\t*\r\n * Description:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t1.1\t\tRaw tables pulled from the data warehouse are first checked to see whether there are multiple date\t*\r\n *\t\t\t\tstamps in the tables, if there are multiple then older date stamps are deleted and only the most\t*\r\n *\t\t\t\tcurrent date stamps data is kept in the table.\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t1.2\t\t\"Core.Items\" table is created.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t1.3\t\t\"Core.Organizations\" table is created.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t1.4\t\t\"Core.Users\" table is created.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t1.5\t\t\"Core.Suppliers\" table is created.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t1.6\t\t\"Core.Locations\" table is created.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t1.7\t\t\"Core.Parties\" table is created.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t1.8\t\t\"Core.PurchaseCcontracts\" table is created.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t1.9\t\t\"Core.PurchaseOrders\" table is created.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t1.10\t\"Core.SalesContracts\" table is created.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t1.11\t\"Core.SalesOrders_Fulfilled\" table is created.\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t1.12\t\"Core.OnHandBalance\" table is created.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t1.13\t\"Core.ReceivingTransactions\" table is created.\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t1.14\t\"Core.FXRates\" table is created.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n * Prerequisites: Import the oracle data daily into the raw tables\t\t\t \t\t\t\t\t\t\t\t\t\t*\r\n *\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n * Outputs: Tables \"Core.Items\"; \"Core.Organizations\"; \"Core.Users\"; \"Core.Suppliers\"; \"Core.Locations\";\t\t\t*\r\n *\t\t\t\"Core.Parties\"; \"Core.PurchaseContracts\"; \"Core.PurchaseOrders\"; \"Core.SalesContracts\";\t\t\t\t\t*\r\n *\t\t\t\"Core.SalesOrders_Fulfilled\"; \"Core.OnHandBalance\"; \"Core.ReceivingTransactions\"; \"Core.FXRates\"\t\t*\r\n *\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n * Impact: If any of the core tables are re-created,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t   then the trade tables must be edited and data deleted before DataMarks.sql can be re-run\t\t\t\t\t*\r\n *\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n * Date:        29/07/2022\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n * Version:     1.0\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n *==================================================================================================================*\r\n * Updates:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n * Date\t\t| Version | Author\t\t| Change made\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n * -----------------------------------------------------------------------------------------------------------------*\r\n * --/--/-- |  1.-\t  |\t\t\t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t\t|\t\t  |\t\t\t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *==================================================================================================================*/\r\n \r\n\r\n/********************************************************************************************************\r\n\tStep 1.1:\tUpdate the raw tables with the current day's data, pulled from the data warehouse.\r\n********************************************************************************************************/\r\n\r\n\tDECLARE @DeleteTableStatement NVARCHAR(MAX)\r\n\tDECLARE Cur2 CURSOR READ_ONLY\r\n\tFOR\r\n\t\t\tSELECT  'Delete from [RAW].[' + TABLE_NAME + ']  where stamp <> (select distinct max(stamp) from [RAW].[' + TABLE_NAME + '])'\r\n\t\t\tFROM    INFORMATION_SCHEMA.TABLES\r\n\t\t\tWHERE   TABLE_SCHEMA = 'RAW'\r\n\t\t\t\t\tAND TABLE_TYPE = 'BASE TABLE' and TABLE_NAME like 'O.%'\r\n\r\n\r\n\tOPEN Cur2\r\n\tFETCH NEXT FROM Cur2 INTO @DeleteTableStatement\r\n\tWHILE @@FETCH_STATUS = 0\r\n\t\t  BEGIN\r\n\t\t\t\tPRINT 'Executing ' + @DeleteTableStatement\r\n\t\t\t\tEXECUTE sp_executesql @DeleteTableStatement\r\n\t\t\t\tFETCH NEXT FROM Cur2 INTO @DeleteTableStatement\r\n\t\t  END\r\n\tCLOSE Cur2\r\n\tDEALLOCATE Cur2\r\n\r\n/********************************************************************************************************\r\n\tStep 1.2:\tCreate core items table.\r\n\r\n\t\t\t\tCore.Items is built by joining the tables [RAW].[O.EGP_SYSTEM_ITEMS_B], \r\n\t\t\t\t[RAW].[O.EGP_SYSTEM_ITEMS_TL], [RAW].[O.EGP_ITEM_CAT_ASSIGNMENTS], [RAW].[O.EGP_CATEGORIES_B],\r\n\t\t\t\t[RAW].[O.EGP_CATEGORY_SETS_TL]\r\n\r\n\t\t\t\t[RAW].[O.EGP_CATEGORY_SETS_TL] is filtered for [CATEGORY_SET_NAME] = 'Argent Catalog'\r\n\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Core].[Items]','U') IS NOT NULL\r\n\t\tDROP TABLE [Core].[Items]\r\n\r\n\tSELECT\t\tCAST(ib.[INVENTORY_ITEM_ID] AS NVARCHAR(255))\t\t\t\t\tAS [Inventory Item ID]\r\n\t,\t\t\tCAST(ib.[ORGANIZATION_ID] AS NVARCHAR(255))\t\t\t\t\tAS [Organization ID]\r\n\t,\t\t\tCAST(ib.[ATTRIBUTE1] AS NVARCHAR(255))\t\t\t\t\t\tAS [European Waste Code]\r\n\t,\t\t\tCAST(ib.[ATTRIBUTE11] AS NVARCHAR(255))\t\t\t\t\tAS [Dutch Item Name]\r\n\t,\t\t\tCAST(ib.[ATTRIBUTE13] AS NVARCHAR(255))\t\t\t\t\tAS [FATOL]\r\n\t,\t\t\tCAST(ib.[ATTRIBUTE14] AS NVARCHAR(255))\t\t\t\t\tAS [ABP Category]\r\n\t,\t\t\tCAST(ib.[ATTRIBUTE15] AS NVARCHAR(255))\t\t\t\t\tAS [Nature of Commodity EN]\r\n\t,\t\t\tCAST(ib.[ATTRIBUTE18] AS NVARCHAR(255))\t\t\t\t\tAS [Nature of Commodity NL]\r\n\t,\t\t\tCAST(ib.[ATTRIBUTE19] AS NVARCHAR(255))\t\t\t\t\tAS [Treatment Type]\r\n\t,\t\t\tCAST(ib.[ATTRIBUTE21] AS NVARCHAR(255))\t\t\t\t\tAS [Basel Code]\r\n\t,\t\t\tCAST(ib.[ATTRIBUTE25] AS NVARCHAR(255))\t\t\t\t\tAS [Hazardous Material Description]\r\n\t,\t\t\tCAST(ib.[ATTRIBUTE7] AS NVARCHAR(255))\t\t\t\t\t\tAS [Waste Item]\r\n\t,\t\t\tCAST(ib.[ATTRIBUTE8] AS NVARCHAR(255))\t\t\t\t\t\tAS [ABP Item]\r\n\t,\t\t\tCAST(ib.[ATTRIBUTE9] AS NVARCHAR(255))\t\t\t\t\t\tAS [Sustainable Item]\r\n\t,\t\t\tCAST(LEFT(ib.[CREATION_DATE],10) AS DATE)\t\tAS [Item Creation Date]\r\n\t,\t\t\tCAST(ib.[INVENTORY_ITEM_STATUS_CODE] AS NVARCHAR(255))\t\t\t\t\tAS [Item Status]\r\n\t,\t\t\tCAST(ib.[ITEM_NUMBER] AS NVARCHAR(255))\t\t\t\t\t\t\t\tAS [Item Code]\r\n\t,\t\t\tCAST(ib.[ITEM_TYPE] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\tAS [Item Type]\r\n\t,\t\t\tCAST(LEFT(ib.[LAST_UPDATE_DATE],10) AS DATE)\tAS [Item Update Date]\r\n\t,\t\t\tCAST(ib.[PRIMARY_UOM_CODE] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [Unit Of Measure]\r\n\t,\t\t\tCAST(it.[LANGUAGE] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\tAS [Language]\r\n\t,\t\t\tCAST(it.[DESCRIPTION]\t AS NVARCHAR(255))\t\t\t\t\t\t\tAS [Item Name]\r\n\t,\t\t\tCAST(it.[LONG_DESCRIPTION] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [Long Item Name]\r\n\t,\t\t\tCAST(cat.[ITEM_CATEGORY_ASSIGNMENT_ID] AS NVARCHAR(255))\t\t\t\tAS [Item Category Assignment ID]\r\n\t,\t\t\tCAST(cat.[CATEGORY_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\tAS [Category ID]\r\n\t,\t\t\tCAST(cat.[CATEGORY_CONTENT_CODE] AS NVARCHAR(255))\t\t\t\t\t\tAS [Category Content Code]\r\n\t,\t\t\tCAST(cat.[CATEGORY_CODE] AS NVARCHAR(255))\t\t\t\t\t\t\t\tAS [Category Code]\r\n\t,\t\t\tCAST(cat.[CATEGORY_SET_ID] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [Category Set ID]\r\n\t,\t\t\tCAST(cat.[CATEGORY_SET_NAME] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [Category Set Name]\r\n\t,\t\t\tCAST(cat.[DESCRIPTION] AS NVARCHAR(255))\t\t\t\t\t\t\t\tAS [Category Set Description]\r\n\tINTO\t\t[Core].[Items]\r\n\tFROM\t\t[RAW].[O.EGP_SYSTEM_ITEMS_B] ib\r\n\tLEFT JOIN\t[RAW].[O.EGP_SYSTEM_ITEMS_TL] it\r\n\tON\t\t\tib.[INVENTORY_ITEM_ID] = it.[INVENTORY_ITEM_ID]\r\n\tAND\t\t\tib.[ORGANIZATION_ID] = it.[ORGANIZATION_ID]\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\tSELECT\t\t[ITEM_CATEGORY_ASSIGNMENT_ID]\t\r\n\t\t\t\t\t,\t\t\t[INVENTORY_ITEM_ID]\r\n\t\t\t\t\t,\t\t\t[ORGANIZATION_ID]\r\n\t\t\t\t\t,\t\t\tica.[CATEGORY_ID]\t\t\t\t\t\r\n\t\t\t\t\t,\t\t\t[CATEGORY_CONTENT_CODE]\t\t\t\r\n\t\t\t\t\t,\t\t\t[CATEGORY_CODE]\t\t\t\t\t\r\n\t\t\t\t\t,\t\t\tica.[CATEGORY_SET_ID]\t\t\t\t\r\n\t\t\t\t\t,\t\t\t[CATEGORY_SET_NAME]\t\t\t\t\r\n\t\t\t\t\t,\t\t\t[DESCRIPTION]\t\t\t\t\t\r\n\t\t\t\t\tFROM\t\t[RAW].[O.EGP_ITEM_CAT_ASSIGNMENTS] ica  \r\n\t\t\t\t\tLEFT JOIN\t[RAW].[O.EGP_CATEGORIES_B] cb\r\n\t\t\t\t\tON\t\t\tica.[CATEGORY_ID] = cb.[CATEGORY_ID] \r\n\t\t\t\t\tLEFT JOIN\t[RAW].[O.EGP_CATEGORY_SETS_TL] ct\r\n\t\t\t\t\tON\t\t\tica.[CATEGORY_SET_ID] = ct.[CATEGORY_SET_ID]\r\n\t\t\t\t\tWHERE\t\tct.[CATEGORY_SET_NAME] = 'Argent Catalog'\r\n\t\t\t\t) cat\r\n\tON\t\t\tcat.[INVENTORY_ITEM_ID] = ib.[INVENTORY_ITEM_ID]\r\n\r\n\r\n\t\r\n\r\n/********************************************************************************************************\r\n\tStep 1.3:\tCreate core organizations table.\r\n\r\n\t\t\t\tCore.Organizations is built by joining the tables [RAW].[O.[RAW].[O.INV_ORGANIZATION_DEFINITIONS_V]], \r\n\t\t\t\tand [RAW].[O.XLE_ENTITY_PROFILES]\r\n\t\t\t\t\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Core].[Organizations]','U') IS NOT NULL\r\n\t\tDROP TABLE [Core].[Organizations]\r\n\t\t\r\n\tSELECT\t\tCAST(o.[ORGANIZATION_ID] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [Organization ID]\r\n\t,\t\t\tCAST(o.[ORGANIZATION_CODE] AS NVARCHAR(255))\t\t\t\t\t\tAS [Inventory Organization Code]\r\n\t,\t\t\tCAST(o.[ORGANIZATION_NAME] AS NVARCHAR(255))\t\t\t\t\t\tAS [Inventory Organization Name]\r\n\t,\t\t\tCAST(o.[SET_OF_BOOKS_ID] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [Set Of Books ID]\r\n\t,\t\t\tCAST(o.[CHART_OF_ACCOUNTS_ID] AS NVARCHAR(255))\t\t\t\t\tAS [Chart Of Accounts ID]\r\n\t,\t\t\tCAST(o.[CURRENCY_CODE] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [Currency Code]\r\n\t,\t\t\tCAST(o.[BUSINESS_UNIT_NAME]\t AS NVARCHAR(255))\t\t\t\t\tAS [Business Unit Name]\r\n\t,\t\t\tCAST(o.[BUSINESS_UNIT_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [Business Unit ID]\r\n\t,\t\t\tCAST(o.[INVENTORY_FLAG]\t AS NVARCHAR(255))\t\t\t\t\t\tAS [Inventory Flag]\r\n\t,\t\t\tCAST(o.[LOCATION_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\tAS [Location ID]\r\n\t,\t\t\tCAST(o.[TIMEZONE_CODE] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [Timezone Code]\r\n\t,\t\t\tCAST(ISNULL(le.[LEGAL_ENTITY_ID],'N/A') AS NVARCHAR(255))\t\t\tAS [Legal Entity ID]\r\n\t,\t\t\tCAST(ISNULL(le.[PARTY_ID],'N/A') AS NVARCHAR(255))\t\t\t\t\tAS [Party ID]\r\n\t,\t\t\tCAST(ISNULL(le.[LEGAL_ENTITY_IDENTIFIER],'N/A') AS NVARCHAR(255))\tAS [Legal Entity Short Name]\r\n\t,\t\t\tCAST(ISNULL(le.[NAME],'N/A') AS NVARCHAR(255))\t\t\t\t\t\tAS [Legal Entity Name]\r\n\t,\t\t\tCAST(ISNULL(le.[GEOGRAPHY_ID],'N/A') AS NVARCHAR(255))\t\t\t\tAS [Geography ID]\r\n\t,\t\t\tCAST(ISNULL(le.[ATTRIBUTE_CATEGORY],'N/A') AS NVARCHAR(255))\t\tAS [Legal Entity Country]\r\n\tINTO\t\t[Core].[Organizations]\r\n\tFROM\t\t[RAW].[O.INV_ORGANIZATION_DEFINITIONS_V] o\r\n\tLEFT JOIN\t[RAW].[O.XLE_ENTITY_PROFILES] le\r\n\tON\t\t\to.[LEGAL_ENTITY] = le.LEGAL_ENTITY_ID\r\n\t\r\n\r\n/********************************************************************************************************\r\n\tStep 1.4:\tCreate core users table.\r\n\r\n\t\t\t\tCore.Users using the [RAW].[O.PER_USERS] table\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Core].[Users]','U') IS NOT NULL\r\n\t\tDROP TABLE [Core].[Users]\r\n\t\t\r\n\tSELECT\t\tCAST([USER_ID] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [User ID]\r\n\t,\t\t\tCAST(LEFT([START_DATE],10) AS DATE)\tAS [Start Date]\r\n\t,\t\t\tCAST([USERNAME] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [Username]\r\n\t,\t\t\tCAST([SUSPENDED] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [Suspended]\r\n\t,\t\t\tCAST([PERSON_ID] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [Person ID]\r\n\tINTO\t\t[Core].[Users]\r\n\tFROM\t\t[RAW].[O.PER_USERS] \r\n\r\n\r\n/********************************************************************************************************\r\n\tStep 1.5:\tCreate core suppliers table.\r\n\r\n\t\t\t\tCore.Suppliers is built by joining the tables [RAW].[O.POZ_SUPPLIERS]\r\n\t\t\t\tand [RAW].[O.POZ_SUPPLIER_SITES_ALL_M]\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Core].[Suppliers]','U') IS NOT NULL\r\n\t\tDROP TABLE [Core].[Suppliers]\r\n\r\n\tSELECT\t\tCAST(s.[VENDOR_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [Vendor ID]\r\n\t,\t\t\tCAST(s.[SEGMENT1] AS NVARCHAR(255))\t\t\t\t\t\tAS [Supplier ID]\r\n\t,\t\t\tCAST(s.[PARTY_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [Party ID]\r\n\t,\t\t\tCAST(s.[ORGANIZATION_TYPE_LOOKUP_CODE] AS NVARCHAR(255))\tAS [Organization Type]\r\n\t,\t\t\tCAST(s.[VENDOR_TYPE_LOOKUP_CODE] AS NVARCHAR(255))\t\t\tAS [Supplier Type]\r\n\t,\t\t\tLEFT(s.[END_DATE_ACTIVE],10)\t\tAS [Supplier Inactive Date]\r\n\t,\t\t\tCAST(ss.[VENDOR_SITE_ID] AS NVARCHAR(255))\t\t\t\t\tAS [Vendor Site ID]\r\n\t,\t\t\tCAST(ss.[PRC_BU_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [Prc BU ID]\r\n\t,\t\t\tCAST(ss.[LOCATION_ID] AS NVARCHAR(255))\t\t\t\t\tAS [Location ID]\t\r\n\t,\t\t\tCAST(ss.[PARTY_SITE_ID] AS NVARCHAR(255))\t\t\t\t\tAS [Party Site ID]\r\n\t,\t\t\tCAST(ss.[VENDOR_SITE_CODE] AS NVARCHAR(255))\t\t\t\tAS [Supplier Site Name] \r\n\t,\t\t\tCAST(ss.[PURCHASING_SITE_FLAG] AS NVARCHAR(255))\t\t\tAS [Purchasing Site Flag]\r\n\t,\t\t\tCAST(ss.[PAY_SITE_FLAG] AS NVARCHAR(255))\t\t\t\t\tAS [Pay Site Flag]\r\n\t,\t\t\tCAST(ss.[TERMS_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [Terms ID]\r\n\t,\t\t\tCAST(ss.[INVOICE_CURRENCY_CODE] AS NVARCHAR(255))\t\t\tAS [Site Invoice Currency Code]\r\n\t,\t\t\tCAST(ss.[PAYMENT_CURRENCY_CODE] AS NVARCHAR(255))\t\t\tAS [Site Payment Currency Code]\r\n\t,\t\t\tLEFT(ss.[INACTIVE_DATE],10)\t\t\tAS [Site Inactive Date]\t\t\t\t\t\r\n\t,\t\t\tCAST(ss.[ATTRIBUTE17] AS NVARCHAR(255))\t\t\t\t\tAS [VIHB Code]\t\r\n\t,\t\t\tCAST(ss.[ATTRIBUTE18] AS NVARCHAR(255))\t\t\t\t\tAS [Vendor Category]\t\r\n\t,\t\t\tCAST(ss.[ATTRIBUTE2] AS NVARCHAR(255))\t\t\t\t\t\tAS [ISCC Cetificate Number]\t\r\n\t,\t\t\tLEFT(ss.[ATTRIBUTE_DATE1],10)\t\tAS [ISCC Certificate Expiry Date]\r\n\t,\t\t\tCAST(ss.[ATTRIBUTE1] AS NVARCHAR(255))\t\t\t\t\t\tAS [Site VET ID]\r\n\t,\t\t\tCAST(ss.[ATTRIBUTE19] AS NVARCHAR(255))\t\t\t\t\tAS [INS Certificate Number]\r\n\t,\t\t\tLEFT(ss.[ATTRIBUTE_DATE2],10)\t\tAS [INS Certificate Expiry Date]\t\t\t\t\r\n\t,\t\t\tCAST(ss.[TERMS_DATE_BASIS] AS NVARCHAR(255))\t\t\t\tAS [Site Terms Date Basis]\r\n\tINTO\t\t[Core].[Suppliers]\r\n\tFROM\t\t[RAW].[O.POZ_SUPPLIERS] s\r\n\tLEFT JOIN\t[RAW].[O.POZ_SUPPLIER_SITES_ALL_M] ss\r\n\tON\t\t\ts.[VENDOR_ID] = ss.[VENDOR_ID]\r\n\r\n\r\n/********************************************************************************************************\r\n\tStep 1.6:\tCreate core locations table.\r\n\r\n\t\t\t\tCore.Locations is built using the [RAW].[O.HZ_LOCATIONS] table\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Core].[Locations]','U') IS NOT NULL\r\n\t\tDROP TABLE [Core].[Locations]\r\n\r\n\tSELECT\t\tCAST([LOCATION_ID] AS NVARCHAR(255))\t\t\t\tAS [Location ID]\r\n\t,\t\t\tCAST([Country] AS NVARCHAR(255))\t\t\t\t\tAS [Country]\r\n\t,\t\t\tCAST([ADDRESS1]\t AS NVARCHAR(255))\t\t\t\tAS [Company Name]\r\n\t,\t\t\tCAST([ADDRESS2]\t AS NVARCHAR(255))\t\t\t\tAS [Address Line 2]\r\n\t,\t\t\tCAST([CITY]\t AS NVARCHAR(255))\t\t\t\t\tAS [City]\r\n\t,\t\t\tCAST([POSTAL_CODE] AS NVARCHAR(255))\t\t\t\tAS [Postal Code]\r\n\t,\t\t\tCAST([ADDRESS_STYLE] AS NVARCHAR(255))\t\t\t\tAS [Address Style]\r\n\t,\t\t\tCAST([STATUS_FLAG] AS NVARCHAR(255))\t\t\t\tAS [Status Flag]\r\n\t,\t\t\tCAST([ADDRESS3] AS NVARCHAR(255))\t\t\t\t\tAS [Address Line 3]\r\n\t,\t\t\tCAST([ADDRESS4] AS NVARCHAR(255))\t\t\t\t\tAS [Address Line 4]\r\n\t,\t\t\tCAST([STATE] AS NVARCHAR(255))\t\t\t\t\t\tAS [State]\r\n\t,\t\t\tCAST([Province] AS NVARCHAR(255))\t\t\t\t\tAS [Province]\r\n\t,\t\t\tCAST([ADDR_ELEMENT_ATTRIBUTE2] AS NVARCHAR(255))\tAS [Area]\r\n\t,\t\t\tCAST([BUILDING] AS NVARCHAR(255))\t\t\t\t\tAS [Building Name]\r\n\tINTO\t\t[Core].[Locations]\r\n\tFROM\t\t[RAW].[O.HZ_LOCATIONS]\r\n\t\r\n\r\n/********************************************************************************************************\r\n\tStep 1.7:\tCreate core parties table.\r\n\r\n\t\t\t\tCore.Parties is built by joining the tables [RAW].[O.HZ_PARTIES]\r\n\t\t\t\tand [RAW].[O.HZ_PARTY_SITES]\r\n\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Core].[Parties]','U') IS NOT NULL\r\n\t\tDROP TABLE [Core].[Parties]\r\n\r\n\tSELECT\t\tCAST(p.[PARTY_ID] AS NVARCHAR(255))\t\t\t\tAS [Party ID]\r\n\t,\t\t\tCAST(p.[PARTY_NUMBER] AS NVARCHAR(255))\t\t\tAS [Party Number]\r\n\t,\t\t\tCAST(p.[PARTY_NAME] AS NVARCHAR(255))\t\t\t\tAS [Party Name]\r\n\t,\t\t\tCAST(p.[PARTY_TYPE] AS NVARCHAR(255))\t\t\t\tAS [Party Type]\r\n\t,\t\t\tCAST(p.[STATUS] AS NVARCHAR(255))\t\t\t\t\tAS [Party Status]\r\n\t,\t\t\tCAST(p.[INTERNAL_FLAG] AS NVARCHAR(255))\t\t\tAS [Internal Party]\r\n\t,\t\t\tCAST(p.[EMAIL_ADDRESS] AS NVARCHAR(255))\t\t\tAS [Party Email Address]\r\n\t,\t\t\tCAST(p.[DUNS_NUMBER_C] AS NVARCHAR(255))\t\t\tAS [DUNS Number]\r\n\t,\t\t\tCAST(ps.[PARTY_SITE_ID] AS NVARCHAR(255))\t\t\tas [Party SIte ID]\r\n\t,\t\t\tCAST(ps.[LOCATION_ID] AS NVARCHAR(255))\t\t\tAS [Location ID]\r\n\t,\t\t\tCAST(ps.[START_DATE_ACTIVE] AS NVARCHAR(255))\t\tAS [Start Date Active]\r\n\t,\t\t\tCAST(ps.[END_DATE_ACTIVE] AS NVARCHAR(255))\t\tAS [End Date Active]\r\n\t,\t\t\tCAST(ps.[PARTY_SITE_NUMBER] AS NVARCHAR(255))\t\tAS [Party Site Number]\r\n\t,\t\t\tCAST(ps.[STATUS] AS NVARCHAR(255))\t\t\t\t\tAS [Party Site Status]\r\n\t,\t\t\tCAST(ps.[PARTY_SITE_NAME] AS NVARCHAR(255))\t\tAS [Party Site Name]\r\n\t,\t\t\tCAST(ps.[OVERALL_PRIMARY_FLAG] AS NVARCHAR(255))\tAS [Primary Party Site]\r\n\tINTO\t\t[Core].[Parties]\r\n\tFROM\t\t[RAW].[O.HZ_PARTIES] p\r\n\tLEFT JOIN\t[RAW].[O.HZ_PARTY_SITES] ps\t\t\r\n\tON\t\t\tp.[PARTY_ID] = ps.[PARTY_ID]\r\n\r\n\r\n/********************************************************************************************************\r\n\tStep 1.8:\tCreate core purchase contracts table.\r\n\r\n\t\t\t\tCore.PurchaseContracts is built by joining the tables [RAW].[O.PO_HEADERS_ALL],\r\n\t\t\t\t[RAW].[O.PO_LINES_ALL] and [RAW].[O.PO_GA_ORG_ASSIGNMENTS]\r\n\r\n\t\t\t\t[RAW].[O.PO_HEADERS_ALL] is filtered for [TYPE_LOOKUP_CODE] = 'BLANKET'\r\n\r\n\t\t\t\t[Blanket Agreement Quantity] is calculated as ([BLANKET_TOTAL_AMOUNT] - 10)/[UNIT_PRICE]\r\n\t\t\t\tif [QUANTITY_COMMITTED] is NULL. Otherwise it is set to [QUANTITY_COMMITTED]\r\n********************************************************************************************************/\r\n\r\n\r\n\tIF OBJECT_ID('[Core].[PurchaseContracts]','U') IS NOT NULL\r\n\t\tDROP TABLE [Core].[PurchaseContracts]\r\n\t\t\r\n\tSELECT\t\tCAST(pha.[PO_HEADER_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [PO Header ID]\t\t\t\t\r\n\t,\t\t\tCAST(pha.[CURRENT_VERSION_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Current Version ID]\r\n\t,\t\t\tCAST(pha.[DOCUMENT_STATUS] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Purchase Document Status]\r\n\t,\t\t\tCAST(pha.[PRC_BU_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Purchasing BU]\r\n\t,\t\t\tCAST(pha.[AGENT_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Buyer]\r\n\t,\t\t\tCAST(pha.[TYPE_LOOKUP_CODE]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Purchase Document Type]\r\n\t,\t\t\tCAST(pha.[SEGMENT1] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Blanket Purchase Agreement Number]\r\n\t,\t\t\tCAST(pha.[VENDOR_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Supplier]\r\n\t,\t\t\tCAST(pha.[VENDOR_SITE_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Supplier Site]\r\n\t,\t\t\tCAST(pha.[TERMS_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Terms ID]\r\n\t,\t\t\tCAST(pha.[FREIGHT_TERMS_LOOKUP_CODE] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Incoterm]\r\n\t,\t\t\tCAST(pha.[CURRENCY_CODE] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Purchase Document Currency]\t\r\n\t,\t\t\tCAST(LEFT(pha.[START_DATE],10) AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Agreement Start Date]\t\t\t\r\n\t,\t\t\tCAST(LEFT(pha.[END_DATE],10) AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Agreement End Date]\t\t\r\n\t,\t\t\tCAST(pha.[BLANKET_TOTAL_AMOUNT]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Agreement Amount]\r\n\t,\t\t\tCAST(CASE WHEN pha.[AMOUNT_RELEASED] IS NULL THEN '0' ELSE pha.[AMOUNT_RELEASED] END AS NUMERIC(28,2))\t\t\tAS [Amount Released Against Agreement]\t\r\n\t,\t\t\tCAST(pha.[CARRIER_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Carrier ID]\t\t\t\r\n\t,\t\t\tCAST(pha.[NOTE_TO_VENDOR] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Note To Vendor]\t\r\n\t,\t\t\tCAST(pha.[BILLTO_BU_ID]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Bill To BU ID]\r\n\t,\t\t\tCAST(pha.[SOLDTO_LE_ID]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Sold To BU ID]\r\n\t,\t\t\tCAST(pha.[REQ_BU_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Req BU ID]\r\n\t,\t\t\tCAST(pha.[SHIP_TO_LOCATION_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Ship To Location ID]\r\n\t,\t\t\tCAST(pha.[BILL_TO_LOCATION_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Bill To Location ID]\r\n\t,\t\t\tCAST(LEFT(pha.[CLOSED_DATE],10) AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Purchased Document Closed Date]\t\t\t\t\t\t\r\n\t,\t\t\tCAST(pha.[RATE]\t\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Currency Conversion Rate]\t\r\n\t,\t\t\tCAST(pha.[NOTE_TO_RECEIVER]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Note To Receiver]\r\n\t,\t\t\tCAST(pha.[COMMENTS]\t\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Purchase Document Description]\t\t\r\n\t,\t\t\tCAST(pha.[FROM_HEADER_ID]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [From Header ID]\r\n\t,\t\t\tCAST(pha.[FROM_TYPE_LOOKUP_CODE]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [From Type Lookup Code]\r\n\t,\t\t\tCAST(pha.[FOB_LOOKUP_CODE]\t\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Sustainability Position]\t\t\t\r\n\t,\t\t\tCAST(LEFT(pha.[ATTRIBUTE_DATE1],10)\t\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Deal Date]\t\t\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE5]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Transporter Name]\t\r\n\t,\t\t\tCAST(CASE WHEN pha.[ATTRIBUTE_NUMBER2] IS NULL THEN '0' ELSE pha.[ATTRIBUTE_NUMBER2] END AS NUMERIC(28,2))\t\tAS [Transporter Unit Price]\t\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE9] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [FFA Spec]\t\t\t\t\r\n\t,\t\t\tCAST(CASE WHEN pha.[ATTRIBUTE_NUMBER3] IS NULL THEN '0' ELSE pha.[ATTRIBUTE_NUMBER3] END AS NUMERIC(28,2))\t\tAS [Transporter Amount]\t\t\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE18] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Ultimo Order]\t\t\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE12]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Transporter Currency]\t\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE7] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Additional Charges 1 Supplier]\t\r\n\t,\t\t\tCAST(CASE WHEN pha.[ATTRIBUTE_NUMBER4] IS NULL THEN '0' ELSE pha.[ATTRIBUTE_NUMBER4] END AS NUMERIC(28,2))\t\tAS [Additional Charges 1 Unit Price]\r\n\t,\t\t\tCAST(CASE WHEN pha.[ATTRIBUTE_NUMBER5] IS NULL THEN '0' ELSE pha.[ATTRIBUTE_NUMBER5] END AS NUMERIC(28,2))\t\tAS [Additional Charges 1 Amount]\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE13] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Additional Charges 1 Currency]\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE17] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Additional Charges 1 Description]\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE12]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Additional Charges 2 Supplier]\r\n\t,\t\t\tCAST(CASE WHEN pha.[ATTRIBUTE_NUMBER6] IS NULL THEN '0' ELSE pha.[ATTRIBUTE_NUMBER6] END AS NUMERIC(28,2))\t\tAS [Additional Charges 2 Unit Price]\r\n\t--,\t\t\tCAST(CASE WHEN pha.[ATTRIBUTE_NUMBER7] IS NULL THEN '0' ELSE pha.[ATTRIBUTE_NUMBER7] END AS NUMERIC(28,2))\t\tAS [Additional Charges 2 Amount]\r\n\t,\t\t\tNULL\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Additional Charges 2 Amount]\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE15] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Additional Charges 2 Currency]\r\n\t,\t\t\tCAST(pla.[PO_LINE_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [PO Line ID]\r\n\t,\t\t\tCAST(pla.[LINE_STATUS] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Line Status]\r\n\t,\t\t\tCAST(pla.[LINE_NUM]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Line NUmber]\r\n\t,\t\t\tCAST(pla.[ITEM_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Item ID]\r\n\t,\t\t\tCAST(pla.[CATEGORY_ID]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Category ID]\r\n\t,\t\t\tCAST(pla.[ITEM_DESCRIPTION]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Item Description]\r\n\t,\t\t\tCAST(pla.[UOM_CODE]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [UOM Code]\r\n\t,\t\t\tCAST(pla.[UNIT_PRICE] AS NUMERIC(28,2))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Unit Price]\r\n\t,\t\t\tCAST(pla.[QUANTITY] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Ordered Quantity]\r\n\t,\t\t\tCAST(pla.[FROM_LINE_ID]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [From Line ID]\r\n\t,\t\t\tCAST(pla.[VENDOR_PRODUCT_NUM] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Supplier Item]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN CAST(pla.[UNIT_PRICE] AS NUMERIC(28,2)) = 0\r\n\t\t\t\t\t\tTHEN 0\r\n\t\t\t\t\tWHEN pla.[QUANTITY_COMMITTED] IS NULL\r\n\t\t\t\t\t\tTHEN CAST(CASE \r\n\t\t\t\t\t\t\t\t\tWHEN pha.[BLANKET_TOTAL_AMOUNT] IS NULL\r\n\t\t\t\t\t\t\t\t\t\tTHEN '0' \r\n\t\t\t\t\t\t\t\t\tELSE CAST(pha.[BLANKET_TOTAL_AMOUNT] AS NUMERIC(28,2)) - 10\r\n\t\t\t\t\t\t\t\t  END AS NUMERIC(28,2))/CAST(pla.[UNIT_PRICE] AS NUMERIC(28,2))\r\n\t\t\t\t\tELSE CAST(pla.[QUANTITY_COMMITTED] AS NUMERIC(28,2))\r\n\t\t\t\tEND\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Blanket Agreement Quantity]\t\r\n\t,\t\t\tCAST(pla.[CLOSED_DATE] AS NVARCHAR(255))\t\tAS [CLOSED_DATE]\r\n\t,\t\t\tCAST(pla.[CANCEL_REASON] AS NVARCHAR(255))\t\tAS [CANCEL_REASON]\r\n\t,\t\t\tCAST(poa.[Vendor Site ID] AS NVARCHAR(255))\t\tAS [Vendor Site ID]\r\n\tINTO\t\t[Core].[PurchaseContracts]\r\n\tFROM\t\t[RAW].[O.PO_HEADERS_ALL] pha\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\tLEFT JOIN\t[RAW].[O.PO_LINES_ALL] pla\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\tON\t\t\tpla.[PO_HEADER_ID] = pha.[PO_HEADER_ID]\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\tSELECT\t\t[PO_HEADER_ID]\t\r\n\t\t\t\t\t,\t\t\tMIN([VENDOR_SITE_ID]) AS [Vendor Site ID]\r\n\t\t\t\t\tFROM\t\t[RAW].[O.PO_GA_ORG_ASSIGNMENTS]\r\n\t\t\t\t\tGROUP BY\t[PO_HEADER_ID]\r\n\t\t\t\t) poa\r\n\tON\t\t\tpha.[PO_HEADER_ID] = poa.[PO_HEADER_ID]\r\n\tWHERE\t\tpha.[TYPE_LOOKUP_CODE] = 'BLANKET'\r\n\r\n\r\n/********************************************************************************************************\r\n\tStep 1.9:\tCreate core purchase orders table.\r\n\r\n\t\t\t\tCore.PurchaseOrders is built by joining the tables [RAW].[O.PO_HEADERS_ALL],\r\n\t\t\t\tand [RAW].[O.PO_LINES_ALL]\r\n\r\n\t\t\t\t[RAW].[O.PO_HEADERS_ALL] is filtered for [TYPE_LOOKUP_CODE] = 'STANDARD'\r\n\r\n********************************************************************************************************/\r\n\tIF OBJECT_ID('[Core].[PurchaseOrders]','U') IS NOT NULL\r\n\t\tDROP TABLE [Core].[PurchaseOrders]\r\n\t\t\r\n\tSELECT\t\tCAST(pha.[PO_HEADER_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [PO Header ID]\t\t\t\t\r\n\t,\t\t\tCAST(pha.[CURRENT_VERSION_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Current Version ID]\r\n\t,\t\t\tCAST(pha.[DOCUMENT_STATUS] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Purchase Document Status]\r\n\t,\t\t\tCAST(pha.[PRC_BU_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Purchasing BU]\r\n\t,\t\t\tCAST(pha.[AGENT_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Buyer]\r\n\t,\t\t\tCAST(pha.[TYPE_LOOKUP_CODE]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Purchase Document Type]\r\n\t,\t\t\tCAST(pha.[SEGMENT1] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Purchase Order Number]\r\n\t,\t\t\tCAST(pha.[VENDOR_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Supplier]\r\n\t,\t\t\tCAST(pha.[VENDOR_SITE_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Supplier Site]\r\n\t,\t\t\tCAST(pha.[TERMS_ID]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Terms ID]\r\n\t,\t\t\tCAST(pha.[FREIGHT_TERMS_LOOKUP_CODE] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Incoterm]\r\n\t,\t\t\tCAST(pha.[CURRENCY_CODE] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Purchase Document Currency]\t\r\n\t,\t\t\tCAST(LEFT(pha.[START_DATE],10) AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Agreement Start Date]\t\t\t\r\n\t,\t\t\tCAST(LEFT(pha.[END_DATE],10) AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Agreement End Date]\t\t\r\n\t,\t\t\tCAST(pha.[BLANKET_TOTAL_AMOUNT]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Agreement Amount]\r\n\t,\t\t\tCAST(pha.[AMOUNT_RELEASED] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Amount Released Against Agreement]\t\r\n\t,\t\t\tCAST(pha.[CARRIER_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Carrier ID]\t\t\t\r\n\t,\t\t\tCAST(pha.[NOTE_TO_VENDOR] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Note To Vendor]\t\r\n\t,\t\t\tCAST(pha.[BILLTO_BU_ID]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Bill To BU ID]\r\n\t,\t\t\tCAST(pha.[SOLDTO_LE_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Sold To BU ID]\r\n\t,\t\t\tCAST(pha.[REQ_BU_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Req BU ID]\r\n\t,\t\t\tCAST(pha.[SHIP_TO_LOCATION_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Ship To Location ID]\r\n\t,\t\t\tCAST(pha.[BILL_TO_LOCATION_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Bill To Location ID]\r\n\t,\t\t\tCAST(LEFT(pha.[CLOSED_DATE],10) AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Purchased Document Closed Date]\t\t\t\t\t\t\r\n\t,\t\t\tCAST(pha.[RATE] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Currency Conversion Rate]\t\r\n\t,\t\t\tCAST(pha.[NOTE_TO_RECEIVER]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Note To Receiver]\r\n\t,\t\t\tCAST(pha.[COMMENTS] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Purchase Document Description]\t\t\r\n\t,\t\t\tCAST(pha.[FROM_TYPE_LOOKUP_CODE] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [From Type Lookup Code]\r\n\t,\t\t\tCAST(pha.[FOB_LOOKUP_CODE] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Sustainability Position]\t\t\t\r\n\t,\t\t\tCAST(LEFT(pha.[ATTRIBUTE_DATE1],10)\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Deal Date]\t\t\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE5] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Transporter Name]\t\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE_NUMBER2] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Transporter Unit Price]\t\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE9] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [FFA Spec]\t\t\t\t\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE_NUMBER3] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Transporter Amount]\t\t\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE18] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Ultimo Order]\t\t\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE12] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Transporter Currency]\t\t\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE7] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Additional Charges 1 Supplier]\t\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE_NUMBER4] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Additional Charges 1 Unit Price]\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE_NUMBER5] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Additional Charges 1 Amount]\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE13] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Additional Charges 1 Currency]\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE17] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Additional Charges 1 Description]\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE12] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Additional Charges 2 Supplier]\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE_NUMBER6] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Additional Charges 2 Unit Price]\r\n\t--,\t\t\tpha.[ATTRIBUTE_NUMBER7]\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Additional Charges 2 Amount]\r\n\t,\t\t\tNULL\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Additional Charges 2 Amount]\r\n\t,\t\t\tCAST(pha.[ATTRIBUTE15] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Additional Charges 2 Currency]\r\n\t,\t\t\tCAST(pla.[PO_LINE_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [PO Line ID]\r\n\t,\t\t\tCAST(pla.[FROM_HEADER_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [From Header ID]\r\n\t,\t\t\tCAST(pla.[PRC_BU_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Procurement BU ID]\r\n\t,\t\t\tCAST(pla.[LINE_STATUS] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Line Status]\r\n\t,\t\t\tCAST(pla.[LINE_NUM] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Line Number]\r\n\t,\t\t\tCAST(pla.[ITEM_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Item ID]\r\n\t,\t\t\tCAST(pla.[CATEGORY_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Category ID]\r\n\t,\t\t\tCAST(pla.[ITEM_DESCRIPTION]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Item Description]\r\n\t,\t\t\tCAST(pla.[UOM_CODE] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [UOM Code]\r\n\t,\t\t\tCAST(CASE WHEN pla.[UNIT_PRICE] IS NULL THEN '0' ELSE pla.[UNIT_PRICE] END AS NUMERIC(28,2))AS [Unit Price]\r\n\t,\t\t\tCAST(pla.[QUANTITY]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Ordered Quantity]\r\n\t,\t\t\tCAST(pla.[FROM_LINE_ID]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [From Line ID]\r\n\t,\t\t\tCAST(pla.[VENDOR_PRODUCT_NUM] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Supplier Item]\r\n\t,\t\t\tCAST(pla.[QUANTITY_COMMITTED] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Blanket Agreement Quantity]\t\r\n\t,\t\t\tCAST(pla.[CLOSED_DATE] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Closed Date]\r\n\t,\t\t\tCAST(pla.[CANCEL_REASON] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Cancel Reason]\r\n\tINTO\t\t[Core].[PurchaseOrders]\r\n\tFROM\t\t[RAW].[O.PO_HEADERS_ALL] pha\t\t\t\t\t\r\n\tLEFT JOIN\t[RAW].[O.PO_LINES_ALL] pla\t\t\t\t\r\n\tON\t\t\tpla.[PO_HEADER_ID] = pha.[PO_HEADER_ID]\r\n\tWHERE\t\tpha.[TYPE_LOOKUP_CODE] = 'STANDARD'\r\n\r\n\r\n/********************************************************************************************************\r\n\tStep 1.10:\tCreate core sales contracts table.\r\n\r\n\t\t\t\tCore.SalesContracts is built by joining the tables [RAW].[O.OKC_K_HEADERS_ALL_B],\r\n\t\t\t\t[RAW].[O.OKC_K_HEADERS_TL], [RAW].[O.OKC_K_LINES_B], [RAW].[O.OKC_K_LINES_TL], \r\n\t\t\t\t[RAW].[O.OKC_K_PARTY_ROLES_B] and [RAW].[O.QP_PRICING_TERMS_B] \r\n\r\n\r\n\t\t\t\t[RAW].[O.OKC_K_PARTY_ROLES_B] is joined twice. In the first join it is filtered for\r\n\t\t\t\t[RLE_CODE] = 'SUPPLIER' to bring through the supplier details. In the second join it\r\n\t\t\t\tis filtered for [RLE_CODE] = 'CUSTOMER' to bring through the customer details.\r\n\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Core].[SalesContracts]','U') IS NOT NULL\r\n\t\tDROP TABLE [Core].[SalesContracts]\r\n\t\t\r\n\tSELECT\t\tCAST(sch.[ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\tAS [Contract Header ID]\r\n\t,\t\t\tCAST(sch.[MAJOR_VERSION] AS NVARCHAR(255))\t\t\t\t\t\tAS [Sales Contract Version]\r\n\t,\t\t\tCAST(sch.[CONTRACT_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [Contract ID]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE10] AS NVARCHAR(255))\t\t\t\t\t\tAS [Customer Bill To]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE11] AS NVARCHAR(255))\t\t\t\t\t\tAS [Customer Ship To]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE16] AS NVARCHAR(255))\t\t\t\t\t\tAS [Shipping Method]\r\n\t,\t\t\tCAST(sch.[VERSION_TYPE]\t AS NVARCHAR(255))\t\t\t\t\tAS [Version Type]\r\n\t,\t\t\tCAST(sch.[CONTRACT_NUMBER] AS NVARCHAR(255))\t\t\t\t\tAS [Sales Contract Number]\r\n\t,\t\t\tCAST(sch.[CONTRACT_TYPE_ID]\t AS NVARCHAR(255))\t\t\t\tAS [Contract Type ID]\r\n\t,\t\t\tCAST(sch.[ORG_ID] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [Business Unit]\r\n\t,\t\t\tCAST(sch.[STS_CODE] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [Sales Contract Status]\r\n\t,\t\t\tCAST(sch.[CURRENCY_CODE] AS NVARCHAR(255))\t\t\t\t\t\tAS [Currency Code]\r\n\t,\t\t\tCAST(sch.[START_DATE] AS NVARCHAR(255))\t\t\t\t\t\tAS [Sales Contract Start Date]\r\n\t,\t\t\tCAST(sch.[END_DATE]\t AS NVARCHAR(255))\t\t\t\t\t\tAS [Sales Contract End Date]\r\n\t,\t\t\tCAST(sch.[LEGAL_ENTITY_ID] AS NVARCHAR(255))\t\t\t\t\tAS [Legal Entity ID]\r\n\t,\t\t\tCAST(sch.[PRICING_STRATEGY_ID] AS NVARCHAR(255))\t\t\t\tAS [Pricing Strategy ID]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE14] AS NVARCHAR(255))\t\t\t\t\t\tAS [Payment Term]\r\n\t,\t\t\tCAST(sch.[AMENDMENT_EFFECTIVE_DATE] AS NVARCHAR(255))\t\t\tAS [Ammendment Effective Date]\r\n\t,\t\t\tCAST(sch.[APPROVAL_NOTE] AS NVARCHAR(255))\t\t\t\t\t\tAS [Approval Note]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE7] AS NVARCHAR(255))\t\t\t\t\t\tAS [VET ID]\r\n\t,\t\t\tCAST(sch.[DATE_APPROVED] AS NVARCHAR(255))\t\t\t\t\t\tAS [Date Approved]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE1] AS NVARCHAR(255))\t\t\t\t\t\tAS [Transporter]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE_NUMBER1] AS NVARCHAR(255))\t\t\t\t\tAS [Transporter Unit Price]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE2] AS NVARCHAR(255))\t\t\t\t\t\tAS [Additional Charges 1 Supplier]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE_NUMBER2] AS NVARCHAR(255))\t\t\t\t\tAS [Additional Charges 1 Unit Price]\r\n\t,\t\t\tCAST(sch.[TRN_CODE]\t AS NVARCHAR(255))\t\t\t\t\t\tAS [Termination reason]\r\n\t,\t\t\tCAST(sch.[DATE_TERMINATED] AS NVARCHAR(255))\t\t\t\t\tAS [Terminated Date]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE3] AS NVARCHAR(255))\t\t\t\t\t\tAS [Disposal Method]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE4] AS NVARCHAR(255))\t\t\t\t\t\tAS [Waste Stream Number]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE5] AS NVARCHAR(255))\t\t\t\t\t\tAS [Waste Description]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE_NUMBER3] AS NVARCHAR(255))\t\t\t\t\tAS [Transporter Amount]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE12] AS NVARCHAR(255))\t\t\t\t\t\tAS [Transporter Currency]\r\n\t,\t\t\tCAST(LEFT(sch.[ATTRIBUTE_DATE1],10) AS NVARCHAR(255))\t\t\tAS [Deal Date]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE6] AS NVARCHAR(255))\t\t\t\t\t\tAS [Sustainability Position]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE15] AS NVARCHAR(255))\t\t\t\t\t\tAS [Sustainability Position Details]\r\n\t,\t\t\tCAST(sch.[COMMITMENT_AMOUNT] AS NVARCHAR(255))\t\t\t\t\tAS [Commitment Amount]\r\n\t,\t\t\tCAST(sch.[DATETIME_CANCELLED] AS NVARCHAR(255))\t\t\t\tAS [Cancelled Date]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE19] AS NVARCHAR(255))\t\t\t\t\t\tAS [Additional Charges 1 Description]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE13] AS NVARCHAR(255))\t\t\t\t\t\tAS [Additional Charges 1 Currency]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE21] AS NVARCHAR(255))\t\t\t\t\t\tAS [Allow Multiple Shipping Addresses]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE17] AS NVARCHAR(255))\t\t\t\t\t\tAS [Additional Charges 2 Supplier]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE20] AS NVARCHAR(255))\t\t\t\t\t\tAS [Additional Charges 2 Description]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE_NUMBER5] AS NVARCHAR(255))\t\t\t\t\tAS [Additional Charges 2 Unit Price]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE_NUMBER6] AS NVARCHAR(255))\t\t\t\t\tAS [Additional Charges 2 Amount]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE_NUMBER4] AS NVARCHAR(255))\t\t\t\t\tAS [Additional Charges 1 Amount]\r\n\t,\t\t\tCAST(sch.[ATTRIBUTE18] AS NVARCHAR(255))\t\t\t\t\t\tAS [Additional Charges 2 Currency]\r\n\t,\t\t\tCAST(sct.[LANGUAGE]\t AS NVARCHAR(255))\t\t\t\t\t\tAS [Language]\r\n\t,\t\t\tCAST(sct.[DESCRIPTION] AS NVARCHAR(255))\t\t\t\t\t\tAS [Description]\r\n\t,\t\t\tCAST(sct.[COGNOMEN] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [Trader]\r\n\t,\t\t\tCAST(sct.[VERSION_DESCRIPTION]\t AS NVARCHAR(255))\t\t\tAS [Additional Description]\r\n\t,\t\t\tCAST(scl.[ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\tAS [Line ID]\r\n\t--,\t\t\tCAST(scl.[LINE_ID]\t\t\t\t\t\tAS [Line ID 2]\r\n\t,\t\t\tCAST(scl.[LINE_NUMBER] AS NVARCHAR(255))\t\t\t\t\t\tAS [Line Number]\r\n\t,\t\t\tCAST(scl.[LINE_TYPE_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [Line Type ID]\r\n\t,\t\t\tCAST(LEFT(scl.[START_DATE],10) AS NVARCHAR(255))\t\t\t\tAS [Line Start Date]\r\n\t,\t\t\tCAST(LEFT(scl.[END_DATE],10) AS NVARCHAR(255))\t\t\t\t\tAS [Line End Date]\r\n\t,\t\t\tCAST(scl.[STS_CODE]\t AS NVARCHAR(255))\t\t\t\t\t\tAS [Sts Code]\r\n\t,\t\t\tCAST(scl.[UOM_CODE]\t AS NVARCHAR(255))\t\t\t\t\t\tAS [UOM Code]\r\n\t,\t\t\tCAST(scl.[PRICE_LIST_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [Price List ID]\r\n\t,\t\t\tCAST(scl.[AGREED_QTY] AS NVARCHAR(255))\t\t\t\t\t\tAS [Line Quantity]\r\n\t,\t\t\tCAST(scl.[ATTRIBUTE3] AS NVARCHAR(255))\t\t\t\t\t\tAS [Incoterm]\r\n\t,\t\t\tCAST(scl.[AGREED_AMT] AS NVARCHAR(255))\t\t\t\t\t\tAS [Line Amount]\r\n\t,\t\t\tCAST(scl.[ATTRIBUTE7] AS NVARCHAR(255))\t\t\t\t\t\tAS [Quality]\r\n\t,\t\t\tCAST(scl.[ATTRIBUTE2] AS NVARCHAR(255))\t\t\t\t\t\tAS [Tolerance]\r\n\t,\t\t\tCAST(scl.[ATTRIBUTE6] AS NVARCHAR(255))\t\t\t\t\t\tAS [Sustainability Contact]\r\n\t,\t\t\tCAST(scl.[ATTRIBUTE9] AS NVARCHAR(255))\t\t\t\t\t\tAS [Nomination]\r\n\t,\t\t\tCAST(scl.[ATTRIBUTE10] AS NVARCHAR(255))\t\t\t\t\t\tAS [Nomination Requirement]\r\n\t,\t\t\tCAST(scl.[ATTRIBUTE11] AS NVARCHAR(255))\t\t\t\t\t\tAS [Lay Time]\r\n\t,\t\t\tCAST(scl.[ATTRIBUTE12] AS NVARCHAR(255))\t\t\t\t\t\tAS [Inspection]\r\n\t,\t\t\tCAST(scl.[ATTRIBUTE14] AS NVARCHAR(255))\t\t\t\t\t\tAS [Demurrage Vessel]\r\n\t,\t\t\tCAST(scl.[ATTRIBUTE15] AS NVARCHAR(255))\t\t\t\t\t\tAS [Legislation]\r\n\t,\t\t\tCAST(scl.[ATTRIBUTE4] AS NVARCHAR(255))\t\t\t\t\t\tAS [Laycan]\r\n\t,\t\t\tCAST(scl.[ATTRIBUTE8] AS NVARCHAR(255))\t\t\t\t\t\tAS [Temperature]\r\n\t,\t\t\tCAST(scl.[ATTRIBUTE13] AS NVARCHAR(255))\t\t\t\t\t\tAS [Detenation Demurrage]\r\n\t,\t\t\tCAST(sclt.[ITEM_NAME] AS NVARCHAR(255))\t\t\t\t\t\tAS [Item Name]\r\n\t,\t\t\tCAST(sup.[ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\tAS [Supplier Party Role ID]\r\n\t,\t\t\tCAST(sup.[OBJECT1_ID1] AS NVARCHAR(255))\t\t\t\t\t\tAS [Sales Contract Supplier]\r\n\t,\t\t\tCAST(cus.[ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\tAS [Customer Party Role ID]\r\n\t,\t\t\tCAST(cus.[OBJECT1_ID1] AS NVARCHAR(255))\t\t\t\t\t\tAS [Sales Contract Customer]\r\n\t,\t\t\tCAST(scpt.[PRICING_TERM_ID]\t AS NVARCHAR(255))\t\t\t\tAS [Pricing Term ID]\r\n\t,\t\t\tCAST(scpt.[PARENT_ENTITY_TYPE_CODE] AS NVARCHAR(255))\t\t\tAS [Parent Entity Type Code]\r\n\t,\t\t\tCAST(scpt.[PARENT_ENTITY_KEY_COLUMN1] AS NVARCHAR(255))\t\tAS [Parent Entity Key Column 1]\r\n\t,\t\t\tCAST(scpt.[PARENT_ENTITY_KEY_COLUMN2] AS NVARCHAR(255))\t\tAS [Parent Entity Key Column 2]\r\n\t,\t\t\tCAST(scpt.[PARENT_ENTITY_KEY_COLUMN3] AS NVARCHAR(255))\t\tAS [Parent Entity Key Column 3]\r\n\t,\t\t\tCAST(scpt.[PARENT_ENTITY_KEY_COLUMN4] AS NVARCHAR(255))\t\tAS [Parent Entity Key Column 4]\r\n\t,\t\t\tCAST(scpt.[PARENT_ENTITY_KEY_COLUMN5] AS NVARCHAR(255))\t\tAS [List Price]\r\n\t,\t\t\tCAST(scpt.[ITEM_ID]\t AS NVARCHAR(255))\t\t\t\t\t\tAS [Item ID]\r\n\t,\t\t\tCAST(scpt.[PRICING_CURRENCY_CODE] AS NVARCHAR(255))\t\t\tAS [Pricing Currency Code]\r\n\t,\t\t\tCAST(scpt.[PRICING_UOM_CODE] AS NVARCHAR(255))\t\t\t\t\tAS [Pricing UOM Code]\r\n\t,\t\t\tCAST(scpt.[ADJUSTMENT_AMOUNT] AS NVARCHAR(255))\t\t\t\tAS [Agreement Price]\r\n\tINTO\t\t[Core].[SalesContracts]\r\n\tFROM\t\t[RAW].[O.OKC_K_HEADERS_ALL_B] sch\t\t\t\t\r\n\tLEFT JOIN\t[RAW].[O.OKC_K_HEADERS_TL] sct\t\t\t\t\r\n\tON\t\t\tsch.[ID] = sct.[ID]\r\n\tAND\t\t\tsch.[MAJOR_VERSION] = sct.[MAJOR_VERSION]\r\n\tLEFT JOIN\t[RAW].[O.OKC_K_LINES_B] scl\r\n\tON\t\t\tsch.[ID] = scl.[CHR_ID]\r\n\tAND\t\t\tsch.[MAJOR_VERSION] = scl.[MAJOR_VERSION]\r\n\tLEFT JOIN\t[RAW].[O.OKC_K_LINES_TL] sclt\r\n\tON\t\t\tscl.[ID] = sclt.[ID]\r\n\tAND\t\t\tscl.[MAJOR_VERSION] = sclt.[MAJOR_VERSION]\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\tSELECT\t\t*\r\n\t\t\t\t\tFROM\t\t[RAW].[O.OKC_K_PARTY_ROLES_B]\r\n\t\t\t\t\tWHERE\t\t[RLE_CODE] = 'SUPPLIER'\r\n\t\t\t\t) sup\t\r\n\tON\t\t\tsch.[ID] = sup.[CHR_ID]\r\n\tAND\t\t\tsch.[MAJOR_VERSION] = sup.[MAJOR_VERSION]\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\tSELECT\t\t*\r\n\t\t\t\t\tFROM\t\t[RAW].[O.OKC_K_PARTY_ROLES_B]\r\n\t\t\t\t\tWHERE\t\t[RLE_CODE] = 'CUSTOMER'\r\n\t\t\t\t) cus\t\r\n\tON\t\t\tsch.[ID] = cus.[CHR_ID]\r\n\tAND\t\t\tsch.[MAJOR_VERSION] = cus.[MAJOR_VERSION]\r\n\tLEFT JOIN\t[RAW].[O.QP_PRICING_TERMS_B] scpt\r\n\tON\t\t\tscpt.[PARENT_ENTITY_KEY_COLUMN1] = sch.[ID]\r\n\tAND\t\t\tscpt.[PARENT_ENTITY_KEY_COLUMN2] = scl.[ID]\r\n\tAND\t\t\tscpt.[PARENT_ENTITY_KEY_COLUMN3] = sch.[MAJOR_VERSION]\r\n\r\n\r\n/********************************************************************************************************\r\n\tStep 1.11:\tCreate core sales orders fulfilled table.\r\n\r\n\t\t\t\tCore.SalesOrders_Fulfilled is built using the table [RAW].[O.DOO_FULFILL_LINES_ALL]\r\n\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Core].[SalesOrders_Fulfilled]','U') IS NOT NULL\r\n\t\tDROP TABLE [Core].[SalesOrders_Fulfilled]\r\n\r\n\tSELECT\t\tCAST([CANCELED_FLAG] AS NVARCHAR(255))\t\t\t\t\tAS [CANCELED_FLAG]\r\n\t,\t\t\tCAST([CARRIER_ID] AS NVARCHAR(255))\t\t\t\t\tAS [CARRIER_ID]\r\n\t,\t\t\tCAST([FULFILL_ORG_ID] AS NVARCHAR(255))\t\t\t\tAS [FULFILL_ORG_ID]\r\n\t,\t\t\tCAST([HEADER_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [HEADER_ID]\r\n\t,\t\t\tCAST([OPEN_FLAG] AS NVARCHAR(255))\t\t\t\t\t\tAS [OPEN_FLAG]\r\n\t,\t\t\tCAST([ORG_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [ORG_ID]\r\n\t,\t\t\tCAST([PAYMENT_TERM_ID] AS NVARCHAR(255))\t\t\t\tAS [PAYMENT_TERM_ID]\r\n\t,\t\t\tCAST([REQUEST_SHIP_DATE] AS NVARCHAR(255))\t\t\t\tAS [REQUEST_SHIP_DATE]\r\n\t,\t\t\tCAST([SOURCE_ORDER_ID] AS NVARCHAR(255))\t\t\t\tAS [SOURCE_ORDER_ID]\r\n\t,\t\t\tCAST([SOURCE_ORDER_NUMBER] AS NVARCHAR(255))\t\t\tAS [SOURCE_ORDER_NUMBER]\r\n\t,\t\t\tCAST([SOURCE_ORG_ID] AS NVARCHAR(255))\t\t\t\t\tAS [SOURCE_ORG_ID]\r\n\t,\t\t\tCAST([STATUS_CODE] AS NVARCHAR(255))\t\t\t\t\tAS [STATUS_CODE]\r\n\t,\t\t\tCAST([FULFILL_LINE_ID] AS NVARCHAR(255))\t\t\t\tAS [FULFILL_LINE_ID]\r\n\t,\t\t\tCAST([LINE_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [LINE_ID]\r\n\t,\t\t\tCAST([FULFILL_LINE_NUMBER] AS NVARCHAR(255))\t\t\tAS [FULFILL_LINE_NUMBER]\r\n\t,\t\t\tCAST([INVENTORY_ITEM_ID] AS NVARCHAR(255))\t\t\t\tAS [INVENTORY_ITEM_ID]\r\n\t,\t\t\tCAST([ITEM_TYPE_CODE] AS NVARCHAR(255))\t\t\t\tAS [ITEM_TYPE_CODE]\r\n\t,\t\t\tCAST(ISNULL([ORDERED_QTY],'0') AS NVARCHAR(255))\tAS [ORDERED_QTY]\r\n\t,\t\t\tCAST([SOURCE_LINE_ID] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [SOURCE_LINE_ID]\r\n\t,\t\t\tCAST([SOURCE_LINE_NUMBER] AS NVARCHAR(255))\t\t\t\t\t\tAS [SOURCE_LINE_NUMBER]\r\n\t,\t\t\tCAST([SOURCE_SCHEDULE_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [SOURCE_SCHEDULE_ID]\r\n\t,\t\t\tCAST([SOURCE_SCHEDULE_NUMBER] AS NVARCHAR(255))\t\t\t\t\tAS [SOURCE_SCHEDULE_NUMBER]\r\n\t,\t\t\tCAST([ORDERED_UOM] AS NVARCHAR(255))\t\t\t\t\t\t\t\tAS [ORDERED_UOM]\r\n\t,\t\t\tCAST([INVOICE_INTERFACED_FLAG] AS NVARCHAR(255))\t\t\t\t\tAS [INVOICE_INTERFACED_FLAG]\r\n\t,\t\t\tCAST([BILL_TO_CUSTOMER_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [BILL_TO_CUSTOMER_ID]\r\n\t,\t\t\tCAST([BILL_TO_SITE_USE_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [BILL_TO_SITE_USE_ID]\r\n\t,\t\t\tCAST([UNIT_SELLING_PRICE] AS NVARCHAR(255))\t\t\t\t\t\tAS [UNIT_SELLING_PRICE]\r\n\t,\t\t\tCAST([INVENTORY_ORGANIZATION_ID] AS NVARCHAR(255))\t\t\t\t\tAS [INVENTORY_ORGANIZATION_ID]\r\n\t,\t\t\tCAST([SHIP_TO_PARTY_ID]\t AS NVARCHAR(255))\t\t\t\t\t\tAS [SHIP_TO_PARTY_ID]\r\n\t,\t\t\tCAST([SHIP_TO_PARTY_SITE_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [SHIP_TO_PARTY_SITE_ID]\r\n\t,\t\t\tCAST([ITEM_SUB_TYPE_CODE] AS NVARCHAR(255))\t\t\t\t\t\tAS [ITEM_SUB_TYPE_CODE]\r\n\t,\t\t\tCAST([DEFAULT_TAXATION_COUNTRY]\t AS NVARCHAR(255))\t\t\t\tAS [DEFAULT_TAXATION_COUNTRY]\r\n\t,\t\t\tCAST([PRODUCT_TYPE]\t AS NVARCHAR(255))\t\t\t\t\t\tAS [PRODUCT_TYPE]\r\n\t,\t\t\tCAST([TRX_BUSINESS_CATEGORY] AS NVARCHAR(255))\t\t\t\t\t\tAS [TRX_BUSINESS_CATEGORY]\r\n\t,\t\t\tCAST([ASSESSABLE_VALUE] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [ASSESSABLE_VALUE]\r\n\t,\t\t\tCAST([PURCHASING_ENABLED_FLAG] AS NVARCHAR(255))\t\t\t\t\tAS [PURCHASING_ENABLED_FLAG]\r\n\t,\t\t\tCAST([APPLIED_PRICE_LIST_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [APPLIED_PRICE_LIST_ID]\r\n\t,\t\t\tCAST([CHANGE_ELIGIBLE_FLAG]\t AS NVARCHAR(255))\t\t\t\t\tAS [CHANGE_ELIGIBLE_FLAG]\r\n\t,\t\t\tCAST([MODIFIED_FLAG] AS NVARCHAR(255))\t\t\t\t\t\t\t\tAS [MODIFIED_FLAG]\r\n\t,\t\t\tCAST([UNREFERENCED_RETURN_FLAG]\t AS NVARCHAR(255))\t\t\t\tAS [UNREFERENCED_RETURN_FLAG]\r\n\t,\t\t\tCAST([UNIT_QUANTITY] AS NVARCHAR(255))\t\t\t\t\t\t\t\tAS [UNIT_QUANTITY]\r\n\t,\t\t\tCAST([PROCESS_INSTANCE_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [PROCESS_INSTANCE_ID]\r\n\t,\t\t\tCAST([PROCESS_NUMBER] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [PROCESS_NUMBER]\r\n\t,\t\t\tCAST([TRANSPORTATION_PLANNED_FLAG] AS NVARCHAR(255))\t\t\t\tAS [TRANSPORTATION_PLANNED_FLAG]\r\n\t,\t\t\tCAST([ASSET_TRACKED_FLAG] AS NVARCHAR(255))\t\t\t\t\t\tAS [ASSET_TRACKED_FLAG]\r\n\t,\t\t\tCAST([PRJ_REC_INDICATOR] AS NVARCHAR(255))\t\t\t\t\t\t\tAS [PRJ_REC_INDICATOR]\r\n\t,\t\t\tCAST([MDO_FLAG]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\tAS [MDO_FLAG]\r\n\t,\t\t\tCAST([FULFILL_INSTANCE_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [FULFILL_INSTANCE_ID]\r\n\t,\t\t\tCAST(ISNULL([FULFILLED_QTY],'0') AS NVARCHAR(255))\t\tAS [FULFILLED_QTY]\r\n\t,\t\t\tCAST([CANCELED_QTY] AS NVARCHAR(255))\t\t\t\tAS [CANCELED_QTY]\r\n\t,\t\t\tCAST([SHIPPING_INSTRUCTIONS] AS NVARCHAR(255))\t\tAS [SHIPPING_INSTRUCTIONS]\r\n\t,\t\t\tCAST([REFERENCE_FLINE_ID] AS NVARCHAR(255))\t\t\tAS [REFERENCE_FLINE_ID]\r\n\t,\t\t\tCAST([PACKING_INSTRUCTIONS] AS NVARCHAR(255))\t\tAS [PACKING_INSTRUCTIONS]\r\n\t,\t\t\tCAST([CUSTOMER_PO_NUMBER] AS NVARCHAR(255))\t\t\tAS [CUSTOMER_PO_NUMBER]\r\n\t,\t\t\tCAST(ISNULL([RMA_DELIVERED_QTY],'0') AS NVARCHAR(255))\tAS [RMA_DELIVERED_QTY]\r\n\t,\t\t\tCAST([AGREEMENT_HEADER_ID] AS NVARCHAR(255))\t\t\tAS [AGREEMENT_HEADER_ID]\r\n\t,\t\t\tCAST([AGREEMENT_LINE_ID] AS NVARCHAR(255))\t\t\t\tAS [AGREEMENT_LINE_ID]\r\n\t,\t\t\tCAST([AGREEMENT_VERSION_NUMBER] AS NVARCHAR(255))\t\tAS [AGREEMENT_VERSION_NUMBER]\r\n\tINTO\t\t[Core].[SalesOrders_Fulfilled]\r\n\tFROM\t\t[RAW].[O.DOO_FULFILL_LINES_ALL]\r\n\r\n\r\n/********************************************************************************************************\r\n\tStep 1.12:\tCreate core on hand balance table.\r\n\r\n\t\t\t\tCore.OnHandBalance is built by joining the tables [RAW].[O.INV_ONHAND_QUANTITIES_DETAIL],\r\n\t\t\t\t[Core].[Items] and [Core].[Organizations]\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Core].[OnHandBalance]','U') IS NOT NULL\r\n\t\tDROP TABLE [Core].[OnHandBalance]\r\n\r\n\tSELECT\t\to.[Business Unit Name] \r\n\t,\t\t\to.[Inventory Organization Name] \r\n\t,\t\t\tCAST(oq.[INVENTORY_ITEM_ID]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\tAS [Item ID]\r\n\t,\t\t\tCAST(oq.[ORGANIZATION_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\tAS [Inventory Organization ID]\r\n\t,\t\t\tCAST(oq.[PRIMARY_TRANSACTION_QUANTITY] AS NUMERIC(28,4))\t\tAS [Primary Transaction Quantity]\r\n\t,\t\t\tCAST(oq.[SUBINVENTORY_CODE] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\tAS [Subinventory]\r\n\t,\t\t\tCAST(oq.[ONHAND_QUANTITIES_ID] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\tAS [Onhand Quantities ID]\r\n\t,\t\t\tCAST(oq.[TRANSACTION_UOM_CODE]\t AS NVARCHAR(255))\t\t\t\t\t\t\t\t\tAS [Transaction UOM Code]\r\n\t,\t\t\tCAST(oq.[LOT_NUMBER] AS NVARCHAR(255))\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Lot Number]\r\n\t,\t\t\ti.[Item Code]\r\n\t,\t\t\ti.[Item Name]\r\n\t,\t\t\ti.[Category Set Name]\r\n\t,\t\t\ti.[Category Code]\r\n\t,\t\t\ti.[Category Set Description]\r\n\tINTO\t\t[Core].[OnHandBalance]\r\n\tFROM\t\t[RAW].[O.INV_ONHAND_QUANTITIES_DETAIL] oq\r\n\tLEFT JOIN\t[Core].[Items] i\r\n\tON\t\t\toq.[INVENTORY_ITEM_ID] = i.[Inventory Item ID]\r\n\tAND\t\t\toq.[ORGANIZATION_ID] = i.[Organization ID]\r\n\tLEFT JOIN\t[Core].[Organizations] o\r\n\tON\t\t\toq.[ORGANIZATION_ID] = o.[Organization ID]\r\n\r\n\r\n\r\n/********************************************************************************************************\r\n\tStep 1.13:\tCreate core receiving transactions table.\r\n\r\n\t\t\t\tCore.ReceivingTransactions is built using the table [RAW].[O.RCV_TRANSACTIONS]\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Core].[ReceivingTransactions]','U') IS NOT NULL\r\n\t\tDROP TABLE [Core].[ReceivingTransactions]\r\n\r\n\tSELECT\t\tCAST([TRANSACTION_ID] AS NVARCHAR(255))\t\t\t\tAS [Transaction ID]\r\n\t,\t\t\tCAST([SHIP_FROM_LOCATION_ID] AS NVARCHAR(255))\t\t\tAS [Ship From Location ID]\r\n\t,\t\t\tCAST([ORGANIZATION_ID] AS NVARCHAR(255))\t\t\t\tAS [Organization ID]\r\n\t,\t\t\tCAST([CREATED_BY] AS NVARCHAR(255))\t\t\t\t\tAS [Created By]\r\n\t,\t\t\tCAST([TRANSACTION_TYPE] AS NVARCHAR(255))\t\t\t\tAS [Transaction Type]\r\n\t,\t\t\tCAST([TRANSACTION_DATE] AS NVARCHAR(255))\t\t\t\tAS [Transaction Date]\r\n\t,\t\t\tCAST([SHIPMENT_HEADER_ID] AS NVARCHAR(255))\t\t\tAS [Shipment Header ID]\r\n\t,\t\t\tCAST([SHIPMENT_LINE_ID] AS NVARCHAR(255))\t\t\t\tAS [Shipment Line ID]\r\n\t,\t\t\tCAST([SOURCE_DOCUMENT_CODE] AS NVARCHAR(255))\t\t\tAS [Source Document Code]\r\n\t,\t\t\tCAST([DESTINATION_TYPE_CODE] AS NVARCHAR(255))\t\t\tAS [Destination Type Code]\r\n\t,\t\t\tCAST([PRIMARY_QUANTITY]\t AS NVARCHAR(255))\t\t\tAS [Primary Quantity]\r\n\t,\t\t\tCAST([PRIMARY_UOM_CODE]\t AS NVARCHAR(255))\t\t\tAS [Primary UOM Code]\r\n\t,\t\t\tCAST([EMPLOYEE_ID] AS NVARCHAR(255))\t\t\t\t\tAS [Employee ID]\r\n\t,\t\t\tCAST([PARENT_TRANSACTION_ID] AS NVARCHAR(255))\t\t\tAS [Parent Transaction ID]\r\n\t,\t\t\tCAST([PO_HEADER_ID] AS NVARCHAR(255))\t\t\t\t\tAS [PO Header ID]\r\n\t,\t\t\tCAST([PO_LINE_ID] AS NVARCHAR(255))\t\t\t\t\tAS [PO Line ID]\r\n\t,\t\t\tCAST([PO_LINE_LOCATION_ID] AS NVARCHAR(255))\t\t\tAS [PO Line Location ID]\r\n\t,\t\t\tCAST([PO_DISTRIBUTION_ID] AS NVARCHAR(255))\t\t\tAS [PO Distribution ID]\r\n\t,\t\t\tCAST([PO_REVISION_NUM] AS NVARCHAR(255))\t\t\t\tAS [PO Revision Num]\r\n\t,\t\t\tCAST([DELIVER_TO_PERSON_ID] AS NVARCHAR(255))\t\t\tAS [Deliver To Person ID]\r\n\t,\t\t\tCAST([DELIVER_TO_LOCATION_ID] AS NVARCHAR(255))\t\tAS [Deliver To Location ID]\r\n\t,\t\t\tCAST([VENDOR_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [Vendor ID]\r\n\t,\t\t\tCAST([VENDOR_SITE_ID] AS NVARCHAR(255))\t\t\t\tAS [Vendor Site ID]\r\n\t,\t\t\tCAST([LOCATION_ID] AS NVARCHAR(255))\t\t\t\t\tAS [Location ID]\r\n\t,\t\t\tCAST([DESTINATION_CONTEXT] AS NVARCHAR(255))\t\t\tAS [Destination Context]\r\n\t,\t\t\tCAST([INTERFACE_TRANSACTION_ID] AS NVARCHAR(255))\t\tAS [Interface Transaction ID]\r\n\t,\t\t\tCAST([GROUP_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [Group ID]\r\n\t,\t\t\tCAST([SUBINVENTORY]\t AS NVARCHAR(255))\t\t\t\tAS [Subinventory]\r\n\t,\t\t\tCAST([FROM_SUBINVENTORY] AS NVARCHAR(255))\t\t\t\tAS [From Subinventory]\r\n\t,\t\t\tCAST([ATTRIBUTE1] AS NVARCHAR(255))\t\t\t\t\t\tAS [ATTRIBUTE1]\r\n\t,\t\t\tCAST([ATTRIBUTE2] AS NVARCHAR(255))\t\t\t\t\t\tAS [ATTRIBUTE2]\r\n\t,\t\t\tCAST([ATTRIBUTE4] AS NVARCHAR(255))\t\t\t\t\t\tAS [ATTRIBUTE4]\r\n\t,\t\t\tCAST([ATTRIBUTE_NUMBER1] AS NVARCHAR(255))\t\t\t\tAS [ATTRIBUTE_NUMBER1]\r\n\t,\t\t\tCAST([ATTRIBUTE_NUMBER2] AS NVARCHAR(255))\t\t\t\tAS [ATTRIBUTE_NUMBER2]\r\n\t,\t\t\tCAST([ATTRIBUTE_NUMBER3] AS NVARCHAR(255))\t\t\t\tAS [ATTRIBUTE_NUMBER3]\r\n\t,\t\t\tCAST([ATTRIBUTE_NUMBER8] AS NVARCHAR(255))\t\t\t\tAS [ATTRIBUTE_NUMBER8]\r\n\t,\t\t\tCAST([ATTRIBUTE_TIMESTAMP1] AS NVARCHAR(255))\t\t\tAS [ATTRIBUTE_TIMESTAMP1]\r\n\t,\t\t\tCAST([ATTRIBUTE_TIMESTAMP2] AS NVARCHAR(255))\t\t\tAS [ATTRIBUTE_TIMESTAMP2]\r\n\t,\t\t\tCAST([PO_UNIT_PRICE] AS NVARCHAR(255))\t\t\t\t\tAS [PO Unit Price]\r\n\t,\t\t\tCAST([CURRENCY_CONVERSION_RATE] AS NVARCHAR(255))\t\tAS [Currency Conversion Rate]\r\n\t,\t\t\tCAST([QUANTITY_BILLED] AS NVARCHAR(255))\t\t\t\tAS [Quantity Billed]\r\n\t,\t\t\tCAST([AMOUNT_BILLED] AS NVARCHAR(255))\t\t\t\t\tAS [Amount Billed]\r\n\t,\t\t\tCAST([ATTRIBUTE_NUMBER7] AS NVARCHAR(255))\t\t\t\tAS [ATTRIBUTE_NUMBER7]\r\n\t,\t\t\tCAST([FINAL_DISCHARGE_LOCATION_ID] AS NVARCHAR(255))\tAS [Final Discharge Location ID]\r\n\t,\t\t\tCAST([TRANSFER_ORDER_HEADER_ID] AS NVARCHAR(255))\t\tAS [Transfer Order Header ID]\r\n\t,\t\t\tCAST([TRANSFER_ORDER_LINE_ID] AS NVARCHAR(255))\t\tAS [Transfer Order Line ID]\r\n\t,\t\t\tCAST([REASON_ID] AS NVARCHAR(255))\t\t\t\t\t\tAS [Reason ID]\r\n\t,\t\t\tCAST([RECEIPT_ADVICE_HEADER_ID] AS NVARCHAR(255))\t\tAS [Receipt Advice Header ID]\r\n\tINTO\t\t[Core].[ReceivingTransactions]\r\n\tFROM\t\t[RAW].[O.RCV_TRANSACTIONS]\r\n\r\n\r\n/********************************************************************************************************\r\n\tStep 1.14:\tCreate core FX rates table.\r\n\r\n\t\t\t\tCore.FXRates is built using the [RAW].[O.GL_DAILY_RATES] table. \r\n********************************************************************************************************/\r\n\r\n\r\n\tIF OBJECT_ID('tempdb..#tempfx') IS NOT NULL\r\n\t\tDROP TABLE #tempfx\r\n\r\n\tSELECT\t\t\r\n\t\t\t\tfx.[CONVERSION_DATE]\r\n\t,\t\t\tCAST(CASE WHEN [FROM_CURRENCY] = 'EUR' and [TO_CURRENCY] = 'GBP'\r\n\t\t\t\t\tTHEN LEFT([CONVERSION_RATE],7) END AS NUMERIC(28,4))\t\t\t\t\tAS [EUR GBP]\r\n\t,\t\t\tCAST(CASE WHEN [FROM_CURRENCY] = 'EUR' and [TO_CURRENCY] = 'USD'\r\n\t\t\t\t\tTHEN [CONVERSION_RATE] END AS NUMERIC(28,4))\t\t\t\t\t\t\tAS [EUR USD]\r\n\tINTO\t\t#tempfx\r\n\tFROM\t\t[RAW].[O.GL_DAILY_RATES] fx\r\n\tWHERE\t\t[FROM_CURRENCY] = 'EUR'\r\n\tand\t\t\t[TO_CURRENCY] IN ('GBP','USD')\r\n\tGROUP BY\t[CONVERSION_DATE], [FROM_CURRENCY], [TO_CURRENCY], [CONVERSION_RATE]\r\n\r\n\r\n\tIF OBJECT_ID('[Core].[FXRates]','U') IS NOT NULL\r\n\tDROP TABLE [Core].[FXRates]\r\n\r\n\tSELECT\r\n\t\t\t\t[CONVERSION_DATE]\r\n\t,\t\t\tCASE WHEN AVG([EUR GBP]) > 2 \r\n\t\t\t\t\tTHEN (AVG([EUR GBP]))/10 \r\n\t\t\t\t\tELSE AVG([EUR GBP])\t\t\t\t\t\t\t\t\t\t\t\t\tEND\tAS [EUR GBP]\r\n\t,\t\t\tAVG([EUR USD])\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [EUR USD]\r\n\tINTO\t\t[Core].[FXRates]\r\n\tFROM\t\t#tempfx\r\n\tGROUP BY\t[CONVERSION_DATE]"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Trade/Exp and Pos"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-17T12:13:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerArgent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_Exp_And_Pos_Data_Marks_Script')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Exposure And Position Data Marks Script",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SqlServerArgent",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "/*==============================================================================================================================*\r\n * Project:\t\tArgent\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n * Purpose:\t\tCreate data marts that feed in to Exposure and Position reports\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n * Description:\t1) Creates purchase contract, sales contract and inventory tables from Core tables created in previous script.\t*\r\n *\t\t\t\t2) Create formatted versions of the yield, blended sales and exposure limit tables for use in the reports\t\t*\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n * Prerequisites: CoreTables.sql script produces the core tables\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n * Outputs: Tables \"Trade.PurchaseContracts\"; \"Trade.SalesContracts\"; \"Trade.InventoryOnHandBalance\";\t\t\t\t\t\t\t*\r\n *\t\t\t\"Trade.BlendedSales\"; \"Trade.Yield\"; \"Trade.ExposureLimits\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n * Impact: If the trade tables are appended to,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t   then the SQL to Blob pipeline must be re-run\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n * Date:        29/07/2022\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n * Version:     1.0\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n *==============================================================================================================================*\r\n * Updates:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n * Date\t\t| Version | Author\t\t| Change made\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n * -----------------------------------------------------------------------------------------------------------------------------*\r\n * --/--/-- |  1.-\t  |\t\t\t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *\t\t\t|\t\t  |\t\t\t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\r\n *==============================================================================================================================*/\r\n\r\n /********************************************************************************************************\r\n\tStep 2.1:\tDelete current day's data from the final tables. This ensures that if the script is run more\r\n\t\t\t\tthan once in one day there is no duplicated data.\r\n********************************************************************************************************/\r\n\r\n\tDECLARE @DeleteTableStatement NVARCHAR(MAX)\r\n\tDECLARE Cur2 CURSOR READ_ONLY\r\n\tFOR\r\n\t\t\tSELECT  'Delete from [Trade].[' + TABLE_NAME + ']  where CAST([DateStamp] AS DATE) = CAST(GETDATE() AS DATE)'\r\n\t\t\tFROM    INFORMATION_SCHEMA.TABLES\r\n\t\t\tWHERE   TABLE_SCHEMA = 'Trade'\r\n\t\t\tAND\t\tTABLE_TYPE = 'BASE TABLE' \r\n\t\t\tAND\t\tTABLE_NAME IN ('SalesContracts','InventoryOnHandBalance','PurchaseContracts')\r\n\r\n\r\n\tOPEN Cur2\r\n\tFETCH NEXT FROM Cur2 INTO @DeleteTableStatement\r\n\tWHILE @@FETCH_STATUS = 0\r\n\t\t  BEGIN\r\n\t\t\t\tPRINT 'Executing ' + @DeleteTableStatement\r\n\t\t\t\tEXECUTE sp_executesql @DeleteTableStatement\r\n\t\t\t\tFETCH NEXT FROM Cur2 INTO @DeleteTableStatement\r\n\t\t  END\r\n\tCLOSE Cur2\r\n\tDEALLOCATE Cur2\r\n\r\n/********************************************************************************************************\r\n\tStep 2.2:\tCreate the Trade.Yield table.\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Trade].[Yield]','U') IS NOT NULL\r\n\t\tDROP TABLE [Trade].[Yield]\r\n\r\n\tSELECT\t\tCASE WHEN [Business Unit] = 'BDA' THEN 'BDA BU' ELSE [Business Unit] END AS [Business Unit]\r\n\t,\t\t\t[Item Category]\r\n\t,\t\t\t[Expected yield]\r\n\t,\t\t\tCONVERT(DATE,[Start date],103)\tAS [Start date]\r\n\t,\t\t\tCONVERT(DATE,[End date],103) AS [End date]\r\n\t,\t\t\t[Stamp]\r\n\tINTO\t\t[Trade].[Yield]\r\n\tFROM\t\t[RAW].[NO.Yields]\r\n\r\n/********************************************************************************************************\r\n\tStep 2.3:\tCreate the Trade.PurchaseContracts table.\r\n\r\n\t\t\t\tTrade.PurchaseContracts is built by joining [Core].[PurchaseContracts], [Core].[Suppliers],\r\n\t\t\t\t[Core].[Parties], [Core].[Organizations], [Core].[Items], [Core].[PurchaseOrders], ,\r\n\t\t\t\t[Core].[Users], [Core].[FXRates] and [Trade].[Yield]\r\n\r\n\t\t\t\t[Core].[Organizations] is filtered for [Business Unit Name] values of 'BDA BU', 'Motherwell'\r\n\t\t\t\tand 'Stanlow'.\r\n\r\n\t\t\t\tContracts with an end date prior to July 2021 and an [Amount Released Against Agreement] value of 0\r\n\t\t\t\tare not brought into Trade.PurchaseContracts\r\n\r\n\tAssumptions:\t1)\tChemical contracts (Item Code starts with \"CH\") that do not have a populated end date have\r\n\t\t\t\t\t\tthe end date set to the end of the year of the start date.\r\n\r\n\t\t\t\t\t2)\tDelivered Quantity is calculated by combining [Core].[PurchaseOrders] and [Core].[ReceivingTransactions]\r\n\t\t\t\t\t\tand filtering for [Destination Type Code] = 'INVENTORY', [Line Status] NOT IN ('OPEN','CANCELED','CLOSED FOR INVOICING')\r\n\t\t\t\t\t\tand [Transaction Type] <> 'RETURN TO RECEIVING' then summing [Primary Quantity].\r\n\r\n\t\t\t\t\t3)\tReturned Quantity is calculated by combining [Core].[PurchaseOrders] and [Core].[ReceivingTransactions]\r\n\t\t\t\t\t\tand filtering for [Destination Type Code] = 'INVENTORY', [Line Status] NOT IN ('OPEN','CANCELED','CLOSED FOR INVOICING')\r\n\t\t\t\t\t\tand [Transaction Type] = 'RETURN TO RECEIVING' then summing [Primary Quantity].\r\n\r\n\t\t\t\t\t4)\tYield adjusted volumes are calculated by joining [Trade].[Yields] onto the Core tables on date and item category.\r\n\t\t\t\t\t\tIf the item category is not found in [Trade].[Yields] then the average yield for the business unit is used.\r\n\r\n\t\t\t\t\t5)\tPurchase Document Status is changed to \"Closed\" for contracts that have expired and have a status that is not Closed, Finally Closed or Cancelled.\r\n\t\t\t\t\t\r\n********************************************************************************************************/\r\n\r\n\r\n\r\n\tINSERT INTO [Trade].[PurchaseContracts]\r\n\tSELECT\t\to.[Business Unit Name]\r\n\t,\t\t\tpc.[Blanket Purchase Agreement Number] \r\n\t,\t\t\tCONCAT(LEFT(pc.[Purchase Document Status],1),LOWER(SUBSTRING(pc.[Purchase Document Status],2,LEN(pc.[Purchase Document Status])-1)))\t\tAS [Purchase Document Status]\r\n\t,\t\t\tUPPER(sn.[Supplier Name])\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Supplier Name]\r\n\t,\t\t\tUPPER(s.[Supplier Site Name])\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Supplier Site Name]\r\n\t,\t\t\tpc.[Purchase Document Description]\r\n\t,\t\t\ti.[Item Code]\r\n\t,\t\t\ti.[Item Name]\r\n\t,\t\t\tpc.[Item Description]\r\n\t,\t\t\ti.[Category Code] \r\n\t,\t\t\tpc.[Unit Price] + pc.[Transporter Unit Price] + pc.[Additional Charges 1 Unit Price] + pc.[Additional Charges 2 Unit Price]\r\n\t\t\t\t+ ISNULL(CASE \r\n\t\t\t\t\t\t\tWHEN p.[Shipping Method] IN ('Argent - Truck','Argent - Container','AENL - Truck','AENL - Container','Argent - Drop Ship')\r\n\t\t\t\t\t\t\t\tTHEN (pc.[Transporter Amount] + pc.[Additional Charges 1 Amount] + pc.[Additional Charges 2 Amount])/25\r\n\t\t\t\t\t\t\tELSE (pc.[Transporter Amount] + pc.[Additional Charges 1 Amount] + pc.[Additional Charges 2 Amount])/CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN i.[Item Code] = 'CH00006'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN 650\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE NULLIF(pc.[Blanket Agreement Quantity],0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\r\n\t\t\t\t\t\t END,0)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Total Price]\r\n\t,\t\t\tpc.[Unit Price]\r\n\t,\t\t\tpc.[Purchase Document Currency]\r\n\t,\t\t\tISNULL(pc.[Blanket Agreement Quantity],0)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Blanket Agreement Quantity]\r\n\t,\t\t\tpc.[UOM Code]\r\n\t,\t\t\tISNULL(dq.[Delivered Qty],0) - ISNULL(rq.[Returned Qty],0)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Delivered Quantity]\r\n\t,\t\t\tISNULL(oq.[Ordered Qty],0)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Order Quantity]\r\n\t,\t\t\tISNULL(pc.[Blanket Agreement Quantity],0) - (ISNULL(dq.[Delivered Qty],0) - ISNULL(rq.[Returned Qty],0)) - ISNULL(oq.[Ordered Qty],0)\t\tAS [Remaining Quantity]\r\n\t,\t\t\t(ISNULL(pc.[Blanket Agreement Quantity],0) - (ISNULL(dq.[Delivered Qty],0) - ISNULL(rq.[Returned Qty],0)) - ISNULL(oq.[Ordered Qty],0))/25\tAS [Trucks]\r\n\t,\t\t\t((ISNULL(dq.[Delivered Qty],0) - ISNULL(rq.[Returned Qty],0)) + ISNULL(oq.[Ordered Qty],0))/NULLIF(pc.[Blanket Agreement Quantity],0)\t\tAS [Position Now]\r\n\r\n\t--          Calculation below is [Expected Position] = 1 - ([Weeks Remaining]/[Weeknumbers Contract])\r\n\t,\t\t\t1 - (CAST(CASE\r\n\t\t\t\t\t\t\t\tWHEN CONVERT(DATE, DATEADD(DAY, 1, GETDATE() - DATEPART(DW, GETDATE()) + CASE WHEN DATEPART(DW, GETDATE()) < 1 THEN 0 ELSE 7 END )) < CAST(pc.[Agreement Start Date] AS DATE)\r\n\t\t\t\t\t\t\t\t\tTHEN\tCASE\r\n\t\t\t\t\t\t\t\t\t\t\t\tWHEN pc.[Agreement Start Date] IS NULL OR CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN LEFT(i.[Item Code],2) = 'CH' AND pc.[Agreement End Date] IS NULL AND pc.[Agreement Start Date] IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN CONCAT(YEAR(pc.[Agreement Start Date]),'-12-31')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE pc.[Agreement End Date]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND IS NULL\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN 0\r\n\t\t\t\t\t\t\t\t\t\t\t\tELSE DATEDIFF(DAY,pc.[Agreement Start Date],CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN LEFT(i.[Item Code],2) = 'CH' AND pc.[Agreement End Date] IS NULL AND pc.[Agreement Start Date] <> NULL\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN CONCAT(YEAR(pc.[Agreement Start Date]),'-12-31')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE pc.[Agreement End Date]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND)/7\r\n\t\t\t\t\t\t\t\t\t\t\tEND\r\n\t\t\t\t\t\t\t\tWHEN CONVERT(DATE, DATEADD(DAY, 1, GETDATE() - DATEPART(DW, GETDATE()) + CASE WHEN DATEPART(DW, GETDATE()) < 1 THEN 0 ELSE 7 END )) > CAST(CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN LEFT(i.[Item Code],2) = 'CH' AND pc.[Agreement End Date] IS NULL AND pc.[Agreement Start Date] IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN CONCAT(YEAR(pc.[Agreement Start Date]),'-12-31')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE pc.[Agreement End Date]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND AS DATE)\r\n\t\t\t\t\t\t\t\t\tTHEN 0\r\n\t\t\t\t\t\t\t\tELSE DATEDIFF(DAY,CONVERT(DATE, DATEADD(DAY, 1, GETDATE() - DATEPART(DW, GETDATE()) + CASE WHEN DATEPART(DW, GETDATE()) < 1 THEN 0 ELSE 7 END )),CAST(CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN LEFT(i.[Item Code],2) = 'CH' AND pc.[Agreement End Date] IS NULL AND pc.[Agreement Start Date] IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN CONCAT(YEAR(pc.[Agreement Start Date]),'-12-31')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE pc.[Agreement End Date]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND AS DATE))/7\r\n\t\t\t\t\t\t  END AS DECIMAL(28,2))\t\t\t\t\t\r\n\t\t\t\t\t/CAST(NULLIF(CASE\r\n\t\t\t\t\t\t\t\t\tWHEN pc.[Agreement Start Date] IS NULL OR CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN LEFT(i.[Item Code],2) = 'CH' AND pc.[Agreement End Date] IS NULL AND pc.[Agreement Start Date] IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN CONCAT(YEAR(pc.[Agreement Start Date]),'-12-31')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE pc.[Agreement End Date]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND IS NULL\r\n\t\t\t\t\t\t\t\t\t\tTHEN 0\r\n\t\t\t\t\t\t\t\t\tELSE DATEDIFF(DAY,pc.[Agreement Start Date],CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN LEFT(i.[Item Code],2) = 'CH' AND pc.[Agreement End Date] IS NULL AND pc.[Agreement Start Date] IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN CONCAT(YEAR(pc.[Agreement Start Date]),'-12-31')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE pc.[Agreement End Date]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND)/7\r\n\t\t\t\t\t\t\t\tEND,0) AS DECIMAL(28,2)))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Expected Position]\r\n\r\n\t-- [Weeknumbers Contract] is calculated below as difference between [Agreement Start Date] and [Agreement End Date]\r\n\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN pc.[Agreement Start Date] IS NULL OR CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN LEFT(i.[Item Code],2) = 'CH' AND pc.[Agreement End Date] IS NULL AND pc.[Agreement Start Date] IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN CONCAT(YEAR(pc.[Agreement Start Date]),'-12-31')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE pc.[Agreement End Date]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND IS NULL\r\n\t\t\t\t\t\tTHEN 0\r\n\t\t\t\t\tELSE DATEDIFF(DAY,pc.[Agreement Start Date],CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN LEFT(i.[Item Code],2) = 'CH' AND pc.[Agreement End Date] IS NULL AND pc.[Agreement Start Date] IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN CONCAT(YEAR(pc.[Agreement Start Date]),'-12-31')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE pc.[Agreement End Date]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND)/7\r\n\t\t\t\tEND\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Weeknumbers Contract]\r\n\r\n\t-- [Weeks Remaining] is calculated below as\t\t- Difference between [Agreement Start Date and [Agreement End Date] if GETDATE() < [Agreement Start Date]\r\n\t--\t\t\t\t\t\t\t\t\t\t\t\t- 0 if GETDATE() > [Agreement End Date]\r\n\t--\t\t\t\t\t\t\t\t\t\t\t\t- ELSE difference between [Next Monday] and [Agreement End Date]\r\n\r\n\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN CONVERT(DATE, DATEADD(DAY, 1, GETDATE() - DATEPART(DW, GETDATE()) + CASE WHEN DATEPART(DW, GETDATE()) < 1 THEN 0 ELSE 7 END )) < CAST(pc.[Agreement Start Date] AS DATE)\r\n\t\t\t\t\t\t THEN\tCASE\r\n\t\t\t\t\t\t\t\t\tWHEN pc.[Agreement Start Date] = '' OR CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN LEFT(i.[Item Code],2) = 'CH' AND pc.[Agreement End Date] IS NULL AND pc.[Agreement Start Date] IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN CONCAT(YEAR(pc.[Agreement Start Date]),'-12-31')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE pc.[Agreement End Date]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND IS NULL\r\n\t\t\t\t\t\t\t\t\t\tTHEN 0\r\n\t\t\t\t\t\t\t\t\tELSE DATEDIFF(DAY,pc.[Agreement Start Date],CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN LEFT(i.[Item Code],2) = 'CH' AND pc.[Agreement End Date] IS NULL AND pc.[Agreement Start Date] IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN CONCAT(YEAR(pc.[Agreement Start Date]),'-12-31')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE pc.[Agreement End Date]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND)/7\r\n\t\t\t\t\t\t\t\tEND\r\n\t\t\t\t\tWHEN CONVERT(DATE, DATEADD(DAY, 1, GETDATE() - DATEPART(DW, GETDATE()) + CASE WHEN DATEPART(DW, GETDATE()) < 1 THEN 0 ELSE 7 END )) > CAST(CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN LEFT(i.[Item Code],2) = 'CH' AND pc.[Agreement End Date] IS NULL AND pc.[Agreement Start Date] IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN CONCAT(YEAR(pc.[Agreement Start Date]),'-12-31')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE pc.[Agreement End Date]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND AS DATE)\r\n\t\t\t\t\t\t THEN 0\r\n\t\t\t\t\tELSE DATEDIFF(DAY,CONVERT(DATE, DATEADD(DAY, 1, GETDATE() - DATEPART(DW, GETDATE()) + CASE WHEN DATEPART(DW, GETDATE()) < 1 THEN 0 ELSE 7 END )),CAST(CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN LEFT(i.[Item Code],2) = 'CH' AND pc.[Agreement End Date] IS NULL AND pc.[Agreement Start Date] IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN CONCAT(YEAR(pc.[Agreement Start Date]),'-12-31')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE pc.[Agreement End Date]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND AS DATE))/7\r\n\t\t\t\tEND\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Weeks Remaining]\r\n\r\n\t,\t\t\tCONVERT(DATE, DATEADD(DAY, 1, GETDATE() - DATEPART(DW, GETDATE()) + CASE WHEN DATEPART(DW, GETDATE()) < 1 THEN 0 ELSE 7 END ))\t\t\tAS [Next Monday]\r\n\t,\t\t\tpc.[Agreement Start Date]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN LEFT(i.[Item Code],2) = 'CH' AND pc.[Agreement End Date] IS NULL AND pc.[Agreement Start Date] IS NOT NULL\r\n\t\t\t\t\t\tTHEN CONCAT(YEAR(pc.[Agreement Start Date]),'-12-31')\r\n\t\t\t\t\tELSE pc.[Agreement End Date]\r\n\t\t\t\tEND\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Agreement End Date]\r\n\t,\t\t\tp.[Shipping Method]\r\n\t,\t\t\tpc.[Incoterm]\r\n\t,\t\t\tpc.[Transporter Name]\r\n\t,\t\t\tpc.[Transporter Unit Price]\r\n\t,\t\t\tpc.[Transporter Amount]\r\n\t,\t\t\tpc.[Transporter Currency]\r\n\t,\t\t\tpc.[Additional Charges 1 Supplier]\t\r\n\t,\t\t\tpc.[Additional Charges 1 Unit Price]\r\n\t,\t\t\tpc.[Additional Charges 1 Amount]\r\n\t,\t\t\tpc.[Additional Charges 1 Currency]\r\n\t,\t\t\tpc.[Additional Charges 2 Supplier]\t\r\n\t,\t\t\tpc.[Additional Charges 2 Unit Price]\r\n\t,\t\t\tpc.[Additional Charges 2 Amount]\r\n\t,\t\t\tpc.[Additional Charges 2 Currency]\r\n\t,\t\t\tu.[Username]\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Buyer]\r\n\t,\t\t\tpc.[Sustainability Position]\r\n\t,\t\t\tpc.[Supplier Item]\r\n\t,\t\t\tpc.[Deal Date]\r\n\t,\t\t\tpc.[Agreement Amount]\r\n\t,\t\t\tpc.[Amount Released Against Agreement]\r\n\t,\t\t\tpc.[Note To Vendor]\r\n\t,\t\t\tpc.[FFA Spec]\t\t\t\r\n\t,\t\t\tpc.[Line Status]\r\n\t,\t\t\tfx.[EUR USD]\r\n\t,\t\t\tfx.[EUR GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN CASE\tWHEN LEFT(i.[Item Code],2) = 'CH' AND pc.[Agreement End Date] IS NULL AND pc.[Agreement Start Date] IS NOT NULL THEN CONCAT(YEAR(pc.[Agreement Start Date]),'-12-31') ELSE pc.[Agreement End Date]  END IS NULL\r\n\r\n\r\n\t\t\t\t\tTHEN CONCAT(LEFT(pc.[Purchase Document Status],1),LOWER(SUBSTRING(pc.[Purchase Document Status],2,LEN(pc.[Purchase Document Status])-1)))\r\n\t\t\t\t\t\r\n\t\t\t\t\tWHEN pc.[Purchase Document Status] not in ('closed' ,'finally closed', 'canceled') AND CAST(CASE WHEN LEFT(i.[Item Code],2) = 'CH' AND pc.[Agreement End Date] IS NULL AND pc.[Agreement Start Date] IS NOT NULL THEN CONCAT(YEAR(pc.[Agreement Start Date]),'-12-31') ELSE pc.[Agreement End Date] END AS DATE) < GETDATE()\r\n\t\t\t\t\t\tTHEN 'Closed'\r\n\t\t\t\t\tELSE CONCAT(LEFT(pc.[Purchase Document Status],1),LOWER(SUBSTRING(pc.[Purchase Document Status],2,LEN(pc.[Purchase Document Status])-1)))\r\n\t\t\t\tEND\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Updated Contract Status]\r\n\t,\t\t\tCAST(GETDATE() AS DATE)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [DateStamp]\r\n\t,\t\t\tISNULL(pc.[Blanket Agreement Quantity],0) * ISNULL(ISNULL(y.[Expected yield],av.[Average Yield]),av2.[Average Yield])\t\t\t\t\t\t\tAS [Yield Adjusted Volume]\r\n\t,\t\t\tCAST(ISNULL(ISNULL(DATEADD(d,DATEDIFF(d,pc.[Agreement Start Date],CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t  WHEN LEFT(i.[Item Code],2) = 'CH' AND pc.[Agreement End Date] IS NULL AND pc.[Agreement Start Date] IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\tTHEN CONCAT(YEAR(pc.[Agreement Start Date]),'-12-31')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t  ELSE pc.[Agreement End Date]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t END)/2,pc.[Agreement Start Date]),pc.[Agreement Start Date]),CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t  WHEN LEFT(i.[Item Code],2) = 'CH' AND pc.[Agreement End Date] IS NULL AND pc.[Agreement Start Date] IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t\tTHEN CONCAT(YEAR(pc.[Agreement Start Date]),'-12-31')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t  ELSE pc.[Agreement End Date]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  END) AS DATE)\t\t\tAS [Agreement Mid Date]\t\r\n\t,\t\t\tISNULL(pc.[Blanket Agreement Quantity],0) - (ISNULL(dq.[Delivered Qty],0) - ISNULL(rq.[Returned Qty],0))\t\t\t\t\t\t\t\t\t\tAS [Non-Delivered Quantity]\r\n\t,\t\t\t(ISNULL(pc.[Blanket Agreement Quantity],0) - (ISNULL(dq.[Delivered Qty],0) - ISNULL(rq.[Returned Qty],0)))\r\n\t\t\t\t\t* ISNULL(ISNULL(y.[Expected yield],av.[Average Yield]),av2.[Average Yield])\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Yield Adjusted Volume Non-Delivered]\r\n\tFROM\t\t[Core].[PurchaseContracts] pc\r\n\tLEFT JOIN\t[Core].[Suppliers] s\r\n\tON\t\t\tpc.[Supplier] = s.[Vendor ID]\r\n\tAND\t\t\tpc.[Vendor Site ID] = s.[Vendor Site ID]\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\tSELECT\t\t[Party ID] \r\n\t\t\t\t\t,\t\t\tMIN([Party Name])\tAS [Supplier Name]\r\n\t\t\t\t\tFROM\t\t[Core].[Parties]\r\n\t\t\t\t\tGROUP BY\t[Party ID]\r\n\t\t\t\t) sn\r\n\tON\t\t\ts.[Party ID] = sn.[Party ID]\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\tSELECT\t\t[Business Unit ID]\r\n\t\t\t\t\t,\t\t\t[Business Unit Name]\r\n\t\t\t\t\tFROM\t\t[Core].[Organizations]\r\n\t\t\t\t\tGROUP BY\t[Business Unit ID]\r\n\t\t\t\t\t,\t\t\t[Business Unit Name]\r\n\t\t\t\t) o\r\n\tON\t\t\tpc.[Purchasing BU] = o.[Business Unit ID]\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\tSELECT\t\t[Item Code]\r\n\t\t\t\t\t,\t\t\t[Inventory Item ID]\r\n\t\t\t\t\t,\t\t\t[Category Code]\r\n\t\t\t\t\t,\t\t\tMIN([Item Name])\tAS [Item Name]\r\n\t\t\t\t\tFROM\t\t[Core].[Items]\r\n\t\t\t\t\tGROUP BY\t[Item Code]\r\n\t\t\t\t\t,\t\t\t[Inventory Item ID]\r\n\t\t\t\t\t,\t\t\t[Category Code]\r\n\t\t\t\t) i \r\n\tON\t\t\ti.[Inventory Item ID] = pc.[Item ID]\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\tSELECT\t\t[Party ID]\r\n\t\t\t\t\t,\t\t\tMIN([Party Name])\tAS [Shipping Method]\r\n\t\t\t\t\tFROM\t\t[Core].[Parties]\r\n\t\t\t\t\tGROUP BY\t[Party ID]\r\n\t\t\t\t) p\r\n\tON\t\t\tpc.[Carrier ID] = p.[Party ID]\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\tSELECT\t\t[From Header ID]\r\n\t\t\t\t\t,\t\t\tSUM(ISNULL(CAST(CASE WHEN LTRIM(RTRIM(rt.[Primary Quantity])) IS NULL THEN '0' ELSE LTRIM(RTRIM(rt.[Primary Quantity])) END AS NUMERIC(28,8)),0)) AS [Delivered Qty]\r\n\t\t\t\t\tFROM\t\t[Core].[PurchaseOrders] po\r\n\t\t\t\t\tLEFT JOIN\t[Core].[ReceivingTransactions] rt\r\n\t\t\t\t\tON\t\t\trt.[PO Line ID] = po.[PO Line ID]\r\n\t\t\t\t\tWHERE\t\trt.[Destination Type Code] = 'INVENTORY'\r\n\t\t\t\t\tAND\t\t\tpo.[Line Status] NOT IN ('OPEN','CANCELED','CLOSED FOR INVOICING')\r\n\t\t\t\t\tAND\t\t\trt.[Transaction Type] <> 'RETURN TO RECEIVING'\r\n\t\t\t\t\tGROUP BY\t[From Header ID]\r\n\t\t\t\t) dq\r\n\tON\t\t\tdq.[From Header ID] = pc.[PO Header ID]\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\tSELECT\t\t[From Header ID]\r\n\t\t\t\t\t,\t\t\tSUM(ISNULL(CAST(CASE WHEN LTRIM(RTRIM(rt.[Primary Quantity])) IS NULL THEN '0' ELSE LTRIM(RTRIM(rt.[Primary Quantity])) END AS NUMERIC(28,8)),0)) AS [Returned Qty]\r\n\t\t\t\t\tFROM\t\t[Core].[PurchaseOrders] po\r\n\t\t\t\t\tLEFT JOIN\t[Core].[ReceivingTransactions] rt\r\n\t\t\t\t\tON\t\t\trt.[PO Line ID] = po.[PO Line ID]\r\n\t\t\t\t\tWHERE\t\trt.[Destination Type Code] = 'INVENTORY'\r\n\t\t\t\t\tAND\t\t\tpo.[Line Status] NOT IN ('OPEN','CANCELED','CLOSED FOR INVOICING')\r\n\t\t\t\t\tAND\t\t\trt.[Transaction Type] = 'RETURN TO RECEIVING'\r\n\t\t\t\t\tGROUP BY\t[From Header ID]\r\n\t\t\t\t) rq\r\n\tON\t\t\trq.[From Header ID] = pc.[PO Header ID]\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\tSELECT\t\t[From Header ID]\r\n\t\t\t\t\t,\t\t\tSUM(ISNULL(CAST(CASE WHEN LTRIM(RTRIM([Ordered Quantity])) IS NULL THEN '0' ELSE LTRIM(RTRIM([Ordered Quantity])) END AS NUMERIC(28,8)),0)) AS [Ordered Qty]\r\n\t\t\t\t\tFROM\t\t[Core].[PurchaseOrders]\r\n\t\t\t\t\tWHERE\t\t[Line Status] IN ('OPEN','CLOSED FOR INVOICING')\r\n\t\t\t\t\tGROUP BY\t[From Header ID]\r\n\t\t\t\t) oq\r\n\tON\t\t\toq.[From Header ID] = pc.[PO Header ID]\r\n\tLEFT JOIN\t[Core].[Users] u\r\n\tON\t\t\tpc.[Buyer] = u.[Person ID]\r\n\tLEFT JOIN\t[Core].[FXRates] fx\r\n\tON\t\t\tCAST(pc.[Agreement Start Date] AS DATE) = CAST(fx.[CONVERSION_DATE] AS DATE)\r\n\tLEFT JOIN\t[Trade].[Yield] y\r\n\tON\t\t\to.[Business Unit Name] = y.[Business Unit]\r\n\tAND\t\t\tCASE WHEN i.[Category Code] = 'Feedstock.TallowABP' THEN 'Feedstock.Tallow' ELSE i.[Category Code] END = y.[Item Category]\r\n\tAND\t\t\t(CASE WHEN YEAR(CAST(pc.[Agreement Start Date] AS DATE)) < 2020 THEN CAST('2020-01-01' AS DATE)\r\n\t\t\t\t\t ELSE CAST(pc.[Agreement Start Date] AS DATE)\r\n\t\t\t\tEND BETWEEN y.[Start Date] AND y.[End date] OR (pc.[Agreement Start Date] > y.[Start Date] AND y.[End date] IS NULL))\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\t\tSELECT\t\tDISTINCT [Business Unit]\r\n\t\t\t\t\t\t,\t\t\t[Start date]\r\n\t\t\t\t\t\t,\t\t\t[End date]\r\n\t\t\t\t\t\t,\t\t\tAVG(CAST([Expected yield] AS DECIMAL(28,8)))OVER(PARTITION BY [Business Unit], [Start date]) AS [Average Yield]\r\n\t\t\t\t\t\tFROM\t\t[Trade].[Yield]\t\r\n\t\t\t\t) av\r\n\tON\t\t\to.[Business Unit Name] = av.[Business Unit]\r\n\tAND\t\t\tCASE WHEN YEAR(CAST(pc.[Agreement Start Date] AS DATE)) < 2020 THEN CAST('2020-01-01' AS DATE)\r\n\t\t\t\t\t ELSE CAST(pc.[Agreement Start Date] AS DATE)\r\n\t\t\t\tEND BETWEEN av.[Start Date] AND ISNULL(av.[End date],CAST(GETDATE() AS DATE))\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\t\tSELECT\t\tDISTINCT [Business Unit]\r\n\t\t\t\t\t\t,\t\t\t[Start date]\r\n\t\t\t\t\t\t,\t\t\t[End date]\r\n\t\t\t\t\t\t,\t\t\tAVG(CAST([Expected yield] AS DECIMAL(28,8)))OVER(PARTITION BY [Business Unit], [Start date]) AS [Average Yield]\r\n\t\t\t\t\t\tFROM\t\t[Trade].[Yield]\t\r\n\t\t\t\t\t\tWHERE\t\tCAST(GETDATE() AS DATE) BETWEEN [Start Date] AND ISNULL([End date],CAST(GETDATE() AS DATE))\r\n\t\t\t\t) av2\r\n\tON\t\t\to.[Business Unit Name] = av2.[Business Unit]\r\n\tWHERE\t\to.[Business Unit Name] IN ('BDA BU','Motherwell','Stanlow')\r\n\tAND\t\t\tpc.[Blanket Purchase Agreement Number] NOT IN (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT\t\tDISTINCT [Blanket Purchase Agreement Number]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM\t\t[Core].[PurchaseContracts]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE\t\t[Amount Released Against Agreement] = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND\t\t\t[Agreement End Date] < '2021-07-01'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   ) \t\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/********************************************************************************************************\r\n\tStep 2.4:\tCreate the Trade.SalesContracts table.\r\n\r\n\t\t\t\tTrade.SalesContracts is built by joining [Core].[Parties], [Core].[Organizations], [Core].[Items]\r\n\t\t\t\t, [Core].[SalesContracts], [Core].[SalesOrders_Fulfilled] and [Core].[FXRates]\r\n\r\n\t\t\t\t[Core].[SalesContracts] is filtered for [Version Type] equals ‘C’.​\r\n\r\n\t\t\t\t[Core].[Organizations] is filtered for [Business Unit Name] values of 'BDA BU', 'Motherwell’ and 'Stanlow’\r\n\r\n\tAssumptions:\t1)\tShipped and Order Quantities are calculated by combining [Core].[SalesContracts] and [Core].[SalesOrders_Fulfilled]\r\n\t\t\t\t\t\tthen filtering for [Version Type] = 'C', [ORDERED_UOM] = 'TN' and [REFERENCE_FLINE_ID] IS NULL.\r\n\r\n\t\t\t\t\t2)\tPurchase Document Status is changed to \"Closed\" for contracts that have expired and have a status that is not Closed, Finally Closed, Cancelled or Expired.\r\n\t\t\t\t\t\r\n********************************************************************************************************/\r\n \r\n\r\n\r\n\r\n\tINSERT INTO [Trade].[SalesContracts]\r\n\tSELECT\t\to.[Business Unit Name]\r\n\t,\t\t\tsc.[Sales Contract Number]\r\n\t,\t\t\tsc.[Sales Contract Version]\r\n\t,\t\t\tREPLACE(CONCAT(LEFT(sc.[Sales Contract Status],1),LOWER(SUBSTRING(sc.[Sales Contract Status],2,LEN(sc.[Sales Contract Status])-1))),'_',' ')\tAS [Sales Contract Status]\r\n\t,\t\t\tUPPER(c.[Customer])\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Customer]\r\n\t,\t\t\tc.[Customer Number]\r\n\t,\t\t\tUPPER(sc.[Customer Bill To])\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Customer Bill To]\r\n\t,\t\t\tUPPER(sc.[Customer Ship To])\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Customer Ship To]\r\n\t,\t\t\tsc.[Description]\r\n\t,\t\t\tsc.[Additional Description]\r\n\t,\t\t\tsc.[Item Name]\r\n\t,\t\t\ti.[Item Name]\tAS [Item Description]\r\n\t,\t\t\ti.[Category Code]\r\n\t,\t\t\tCAST(CASE WHEN sc.[Agreement Price] IS NULL THEN '0' ELSE sc.[Agreement Price] END AS NUMERIC(28,8)) \r\n\t\t\t\t- CAST(CASE WHEN sc.[Transporter Unit Price] IS NULL THEN '0' ELSE sc.[Transporter Unit Price] END AS NUMERIC(28,2))\r\n\t\t\t\t- CAST(CASE WHEN sc.[Additional Charges 1 Unit Price] IS NULL THEN '0' ELSE sc.[Additional Charges 1 Unit Price] END AS NUMERIC(28,2))\r\n\t\t\t\t- CAST(CASE WHEN sc.[Additional Charges 2 Unit Price] IS NULL THEN '0' ELSE sc.[Additional Charges 2 Unit Price] END AS NUMERIC(28,2))\t\tAS [Total Price per tonne]\r\n\t,\t\t\t(CAST(CASE WHEN sc.[Transporter Amount] IS NULL THEN '0' ELSE sc.[Transporter Amount] END AS NUMERIC(28,2))\r\n\t\t\t\t+ CAST(CASE WHEN sc.[Additional Charges 1 Amount] IS NULL THEN '0' ELSE sc.[Additional Charges 1 Amount] END AS NUMERIC(28,2))\r\n\t\t\t\t+ CAST(CASE WHEN sc.[Additional Charges 2 Amount] IS NULL THEN '0' ELSE sc.[Additional Charges 2 Amount] END AS NUMERIC(28,2))) * (-1)\t\tAS [Add. Cost per Transport]\r\n\t,\t\t\tsc.[Currency Code]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN sc.[Line Quantity] IS NULL\r\n\t\t\t\t\t\tTHEN CAST(CASE WHEN sc.[Line Amount] IS NULL THEN '0' ELSE sc.[Line Amount] END AS NUMERIC(28,2))/NULLIF(CAST(CASE WHEN sc.[Agreement Price] IS NULL THEN '0' ELSE sc.[Agreement Price] END AS NUMERIC(28,2)),0)\r\n\t\t\t\t\tELSE CAST(sc.[Line Quantity] AS NUMERIC(28,2))\r\n\t\t\t\tEND\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Line Quantity]\r\n\t,\t\t\tsc.[UOM Code]\r\n\t,\t\t\tsc.[Line Start Date]\r\n\t,\t\t\tsc.[Line End Date]\r\n\t,\t\t\tsc.[Shipping Method]\r\n\t,\t\t\tsc.[Incoterm]\r\n\t,\t\t\to.[Business Unit Name]\t\t\t\t\t\t\t\tAS [Seller]\r\n\t,\t\t\tISNULL(q.[Order Quantity],0)\t\t\t\t\t\tAS [Order Quantity]\t\r\n\t,\t\t\tISNULL(q.[Shipped Quantity],0)\t\t\t\t\t\tAS [Shipped Quantity]\r\n\t,\t\t\tsc.[Line Amount]\r\n\t,\t\t\tsc.[Agreement Price]\r\n\t,\t\t\tsc.[Transporter]\r\n\t,\t\t\tsc.[Transporter Unit Price]\r\n\t,\t\t\tsc.[Transporter Amount]\r\n\t,\t\t\tsc.[Transporter Currency]\r\n\t,\t\t\tsc.[Additional Charges 1 Supplier]\r\n\t,\t\t\tsc.[Additional Charges 1 Description]\r\n\t,\t\t\tsc.[Additional Charges 1 Unit Price]\r\n\t,\t\t\tsc.[Additional Charges 1 Amount]\r\n\t,\t\t\tsc.[Additional Charges 1 Currency]\r\n\t,\t\t\tsc.[Additional Charges 2 Supplier]\r\n\t,\t\t\tsc.[Additional Charges 2 Description]\r\n\t,\t\t\tsc.[Additional Charges 2 Unit Price]\r\n\t,\t\t\tsc.[Additional Charges 2 Amount]\r\n\t,\t\t\tsc.[Additional Charges 2 Currency]\r\n\t,\t\t\tsc.[Trader]\r\n\t,\t\t\tsc.[Deal Date]\r\n\t,\t\t\tsc.[Payment Term]\r\n\t,\t\t\tsc.[Tolerance]\r\n\t,\t\t\tsc.[Laycan]\r\n\t,\t\t\tsc.[Sustainability Contact]\r\n\t,\t\t\tsc.[Sustainability Position]\r\n\t,\t\t\tsc.[Sustainability Position Details]\r\n\t,\t\t\tsc.[Quality]\r\n\t,\t\t\tsc.[Temperature]\r\n\t,\t\t\tsc.[Nomination]\r\n\t,\t\t\tsc.[Nomination Requirement]\t\r\n\t,\t\t\tsc.[Lay Time]\r\n\t,\t\t\tsc.[Inspection]\r\n\t,\t\t\tsc.[Detenation Demurrage]\r\n\t,\t\t\tsc.[Demurrage Vessel]\r\n\t,\t\t\tsc.[Legislation]\r\n\t,\t\t\tsc.[Disposal Method]\r\n\t,\t\t\tsc.[Waste Stream Number]\r\n\t,\t\t\tsc.[Waste Description]\r\n\t,\t\t\tsc.[VET ID]\r\n\t,\t\t\tfx.[EUR USD]\r\n\t,\t\t\tfx.[EUR GBP]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN sc.[Sales Contract Status] not in ('Closed', 'Caneled','Finally closed', 'expired') AND ISDATE([Line End Date]) = 1 AND CAST([Line End Date] AS DATE) < GETDATE()\r\n\t\t\t\t\t\tTHEN 'Closed'\r\n\t\t\t\t\tELSE sc.[Sales Contract Status]\r\n\t\t\t\tEND\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Updated Contract Status]\r\n\t,\t\t\tCAST(GETDATE() AS DATE)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [DateStamp]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN sc.[Line Quantity] IS NULL\r\n\t\t\t\t\t\tTHEN CAST(CASE WHEN sc.[Line Amount] IS NULL THEN '0' ELSE sc.[Line Amount] END AS NUMERIC(28,2))/NULLIF(CAST(CASE WHEN sc.[Agreement Price] IS NULL THEN '0' ELSE sc.[Agreement Price] END AS NUMERIC(28,2)),0)\r\n\t\t\t\t\tELSE CAST(sc.[Line Quantity] AS NUMERIC(28,2))\r\n\t\t\t\tEND - ISNULL(q.[Shipped Quantity],0)\t\t\t\tAS [Volume Non-Delivered]\r\n\t,\t\t\tCAST(ISNULL(ISNULL(DATEADD(d,DATEDIFF(d,sc.[Line Start Date],sc.[Line End Date])/2,sc.[Line Start Date]),sc.[Line Start Date]),sc.[Line End Date]) AS DATE) AS [Line Mid Date]\r\n\tFROM\t\t[Core].[SalesContracts] sc\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\tSELECT\t\t[Party ID]\r\n\t\t\t\t\t,\t\t\t[Party Number]\t\tAS [Customer Number]\r\n\t\t\t\t\t,\t\t\tMIN([Party Name])\tAS [Customer]\r\n\t\t\t\t\tFROM\t\t[Core].[Parties]\r\n\t\t\t\t\tGROUP BY\t[Party ID]\r\n\t\t\t\t\t,\t\t\t[Party Number]\r\n\t\t\t\t) c\r\n\tON\t\t\tsc.[Sales Contract Customer] = c.[Party ID]\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\tSELECT\t\t[Business Unit ID]\r\n\t\t\t\t\t,\t\t\t[Business Unit Name]\r\n\t\t\t\t\tFROM\t\t[Core].[Organizations]\r\n\t\t\t\t\tGROUP BY\t[Business Unit ID]\r\n\t\t\t\t\t,\t\t\t[Business Unit Name]\r\n\t\t\t\t) o\r\n\tON\t\t\tsc.[Business Unit] = o.[Business Unit ID]\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\tSELECT\t\t[Item Code]\r\n\t\t\t\t\t,\t\t\t[Item Name]\r\n\t\t\t\t\t,\t\t\t[Category Code]\r\n\t\t\t\t\tFROM\t\t[Core].[Items] \r\n\t\t\t\t\tWHERE\t\t[Organization ID] = '300000001513519' --Master Stock List\r\n\t\t\t\t\tGROUP BY\t[Item Code]\r\n\t\t\t\t\t,\t\t\t[Item Name]\r\n\t\t\t\t\t,\t\t\t[Category Code]\r\n\t\t\t\t) i\r\n\tON\t\t\ti.[Item Code] = sc.[Item Name]\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\tSELECT\t\tsc.[Contract Header ID]\r\n\t\t\t\t\t,\t\t\tsc.[Line ID]\r\n\t\t\t\t\t,\t\t\tSUM(CAST(sof.[FULFILLED_QTY] AS NUMERIC(28,2)) - 2*CAST(sof.[RMA_DELIVERED_QTY] AS NUMERIC(28,2)))\tAS [Shipped Quantity]\r\n\t\t\t\t\t,\t\t\tSUM(CAST(sof.[ORDERED_QTY] AS NUMERIC(28,2)) - CAST(sof.[FULFILLED_QTY] AS NUMERIC(28,2)))\t\t\tAS [Order Quantity]\r\n\t\t\t\t\tFROM\t\t[Core].[SalesContracts] sc\r\n\t\t\t\t\tLEFT JOIN\t[Core].[SalesOrders_Fulfilled] sof\r\n\t\t\t\t\tON\t\t\tsc.[Contract Header ID] = sof.[AGREEMENT_HEADER_ID]\r\n\t\t\t\t\tAND\t\t\tsc.[Line ID] = sof.[AGREEMENT_LINE_ID]\r\n\t\t\t\t\tWHERE\t\tsc.[Version Type] = 'C'\r\n\t\t\t\t\tAND\t\t\tsof.[ORDERED_UOM] = 'TN'\r\n\t\t\t\t\tAND\t\t\tsof.[REFERENCE_FLINE_ID] IS NULL\r\n\t\t\t\t\tGROUP BY\tsc.[Contract Header ID]\r\n\t\t\t\t\t,\t\t\tsc.[Line ID]\r\n\t\t\t\t) q\t\r\n\tON\t\t\tsc.[Contract Header ID] = q.[Contract Header ID]\r\n\tAND\t\t\tsc.[Line ID] = q.[Line ID]\r\n\tLEFT JOIN\t[Core].[FXRates] fx\r\n\tON\t\t\tCAST(sc.[Line Start Date] AS DATE) = CAST(fx.[CONVERSION_DATE] AS DATE)\r\n\tWHERE\t\t[Version Type] = 'C'\r\n\tAND\t\t\to.[Business Unit Name] IN ('Motherwell','Stanlow','BDA BU')\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/********************************************************************************************************\r\n\tStep 2.5:\tCreate the Trade.InventoryOnHandBalances table.\r\n\r\n\t\t\t\tTrade.InventoryOnHandBalance is built by joining [Core].[OnHandBalance] and [Trade].[Yield]\r\n\r\n\t\t\t\t[Business Unit Name] is filtered for Motherwell, Stanlow and BDA BU.\r\n\r\n\tAssumptions:\t1)\tIf the Transaction UOM Code = 'LTR' or 'MLT' then the [Primary Transaction Quantity] is multiplied \r\n\t\t\t\t\t\tby 0.0008745 to convert to metric tonnes.\r\n\r\n\t\t\t\t\t2)\tYield adjusted volumes are calculated by joining [Trade].[Yields] onto the Core tables on date and item category.\r\n\t\t\t\t\t\tIf the item category is not found in [Trade].[Yields] then the average yield for the business unit is used.\r\n********************************************************************************************************/\r\n\r\n\r\n\r\n\r\n\tINSERT INTO [Trade].[InventoryOnHandBalance]\r\n\tSELECT\t\tohb.[Inventory Organization Name]\t\t\t\t\t\t\t\tAS [Inventory Organization Name]\t\t\r\n\t,\t\t\tohb.[Item ID]\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Item ID]\t\t\t\t\t\t\t\r\n\t,\t\t\tohb.[Inventory Organization ID]\t\t\t\t\t\t\t\t\tAS [Inventory Organization ID]\t\t\t\r\n\t,\t\t\tohb.[Primary Transaction Quantity]\t\t\t\t\t\t\t\tAS [Primary Transaction Quantity]\t\t\r\n\t,\t\t\tohb.[Subinventory]\t\t\t\t\t\t\t\t\t\t\t\tAS [Subinventory]\t\t\t\t\t\t\r\n\t,\t\t\tohb.[Onhand Quantities ID]\t\t\t\t\t\t\t\t\t\tAS [Onhand Quantities ID]\t\t\t\t\r\n\t,\t\t\tohb.[Transaction UOM Code]\t\t\t\t\t\t\t\t\t\tAS [Transaction UOM Code]\t\t\t\t\r\n\t,\t\t\tohb.[Lot Number]\t\t\t\t\t\t\t\t\t\t\t\tAS [Lot Number]\t\t\t\t\t\t\r\n\t,\t\t\tohb.[Item Code]\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Item Code]\t\t\t\t\t\t\t\r\n\t,\t\t\tohb.[Item Name]\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Item Name]\t\t\t\t\t\t\t\r\n\t,\t\t\tohb.[Category Set Name]\t\t\t\t\t\t\t\t\t\t\tAS [Category Set Name]\t\t\t\t\t\r\n\t,\t\t\tohb.[Category Code]\t\t\t\t\t\t\t\t\t\t\t\tAS [Category Code]\t\t\t\t\t\t\r\n\t,\t\t\tohb.[Category Set Description]\t\t\t\t\t\t\t\t\tAS [Category Set Description]\t\t\t\r\n\t,\t\t\tCAST(GETDATE() AS DATE)\t\t\t\t\t\t\t\t\t\t\tAS [DateStamp]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN ohb.[Transaction UOM Code] IN ('LTR', 'MLT', 'SLT')\r\n\t\t\t\t\t\tTHEN ohb.[Primary Transaction Quantity] * 0.0008745\r\n\t\t\t\t\tELSE ohb.[Primary Transaction Quantity]\r\n\t\t\t\tEND\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Primary Transaction Quantity MT]\r\n\t,\t\t\tohb.[Business Unit Name]\t\t\t\t\t\t\t\t\t\tAS [Business Unit Name]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN ohb.[Transaction UOM Code] IN ('LTR', 'MLT', 'SLT')\r\n\t\t\t\t\t\tTHEN ohb.[Primary Transaction Quantity] * 0.0008745\r\n\t\t\t\t\tELSE ohb.[Primary Transaction Quantity]\r\n\t\t\t\tEND * ISNULL(y.[Expected yield],av.[Average Yield])\t\t\t\tAS [Yield Adjusted Volume]\r\n\tFROM\t\t[Core].[OnHandBalance] ohb\r\n\tLEFT JOIN\t[Trade].[Yield] y\r\n\tON\t\t\tohb.[Business Unit Name] = y.[Business Unit]\r\n\tAND\t\t\tCASE WHEN ohb.[Category Code] = 'Feedstock.TallowABP' THEN 'Feedstock.Tallow' ELSE ohb.[Category Code] END = y.[Item Category]\r\n\tAND\t\t\tCAST(GETDATE() AS DATE) BETWEEN CONVERT(DATE,y.[Start Date],103) AND ISNULL(CONVERT(DATE,y.[End date],103),CAST(GETDATE() AS DATE))\r\n\tLEFT JOIN\t(\r\n\t\t\t\t\t\tSELECT\t\tDISTINCT [Business Unit]\r\n\t\t\t\t\t\t,\t\t\tCONVERT(DATE,[Start date],103) AS [Start date]\r\n\t\t\t\t\t\t,\t\t\tCONVERT(DATE,[End date],103) AS [End date]\r\n\t\t\t\t\t\t,\t\t\tAVG(CAST([Expected yield] AS DECIMAL(28,8)))OVER(PARTITION BY [Business Unit], [Start date]) AS [Average Yield]\r\n\t\t\t\t\t\tFROM\t\t[Trade].[Yield]\t\r\n\t\t\t\t) av\r\n\tON\t\t\tohb.[Business Unit Name] = av.[Business Unit]\r\n\tAND\t\t\tCAST(GETDATE() AS DATE) BETWEEN av.[Start Date] AND ISNULL(av.[End date],CAST(GETDATE() AS DATE))\r\n\tWHERE\t\t[Business Unit Name] IN ('Motherwell','Stanlow','BDA BU')\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/********************************************************************************************************\r\n\tStep 2.6:\tCreate the Trade.BlendedSales table.\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Trade].[BlendedSales]','U') IS NOT NULL\r\n\t\tDROP TABLE [Trade].[BlendedSales]\r\n\r\n\tSELECT\t\t'Stanlow' AS [Business Unit Name]\r\n\t,\t\t\t[Customer]\r\n\t,\t\t\t[Period]\r\n\t,\t\t\tCAST([Volume (MT)] AS NUMERIC(28,2))\t\t\t\t\t\t\t\t\tAS [Volume (MT)]\r\n\t,\t\t\tCASE\r\n\t\t\t\t\tWHEN [Period] LIKE '%Sept%' OR [Period] LIKE '%April%' OR [Period] LIKE '%June%' OR [Period] LIKE '%Nov%'\r\n\t\t\t\t\t\tTHEN CAST([Volume (MT)] AS NUMERIC(28,2))/30\r\n\t\t\t\t\tWHEN [Period] LIKE '%Feb%'\r\n\t\t\t\t\t\tTHEN CAST([Volume (MT)] AS NUMERIC(28,2))/CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  WHEN CAST(CAST(LEFT([Period],4) AS NUMERIC(28,2))/4 AS VARCHAR(50)) LIKE '%.00%' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  THEN 29\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      ELSE 28\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      END \r\n\t\t\t\t   ELSE CAST([Volume (MT)] AS NUMERIC(28,2))/31\r\n\t\t\t\tEND\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS [Volume per Day]\r\n\t,\t\t\tCAST(GETDATE() AS DATE)\t\t\t\t\t\t\t\t\t\t\tAS [Upload Date]\r\n\tINTO\t\t[Trade].[BlendedSales]\r\n\tFROM\t\t[RAW].[NO.BlendedSales]\r\n\r\n\r\n\r\n/********************************************************************************************************\r\n\tStep 2.7:\tCreate the Trade.ExposureLimits table.\r\n********************************************************************************************************/\r\n\r\n\tIF OBJECT_ID('[Trade].[ExposureLimits]','U') IS NOT NULL\r\n\t\tDROP TABLE [Trade].[ExposureLimits]\r\n\r\n\tSELECT\t\t*\r\n\tINTO\t\t[Trade].[ExposureLimits]\r\n\tFROM\t\t(\r\n\t\t\t\t\tSELECT\t\t*\r\n\t\t\t\t\t,\t\t\tROW_NUMBER() OVER (PARTITION BY [Start date] ORDER BY [Start date] DESC) AS [Latest Values]\r\n\t\t\t\t\tFROM\t\t[RAW].[NO.ExposureLimits]\r\n\t\t\t\t) el\r\n\tWHERE\t\t[Latest Values] = 1"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Trade/Exp and Pos"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-03T09:26:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerArgent')]"
			]
		}
	]
}